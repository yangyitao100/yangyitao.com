import{_ as e,r as p,o,c,b as s,d as n,e as l,f as a}from"./app.4326c516.js";const i="/assets/11-01.7229df46.webp",u={},r=a(`<h1 id="_11-编译优化之block-tree-与-patchflags" tabindex="-1"><a class="header-anchor" href="#_11-编译优化之block-tree-与-patchflags" aria-hidden="true">#</a> 11.编译优化之Block Tree 与 PatchFlags</h1><p><strong>欢迎关注 微信公众号：杨艺韬</strong></p><p><strong>Vue3</strong>是一个编译时和运行时相结合的框架。所谓编译时就是把我们编写的模版代码转化成一个<code>render</code>函数，该<code>render</code>函数的返回结果是一个<strong>虚拟Node</strong>，而运行时的核心工作就是把<strong>虚拟Node</strong>转化为<strong>真实Node</strong>进而根据情况对<strong>DOM树</strong>进行挂载或者更新。前面的文章已经分析了<strong>虚拟Node</strong>转化为<strong>真实Node</strong>的核心流程，但有些细节并没有讲，原因是这些内容和本文的主题<strong>Block Tree</strong>和<strong>PatchFlags</strong>相关，没有这些背景知识很难去理解那些内容。</p><p>本文会从一段模版代码开始，并将模版代码和对应的编译结果进行比较，引出<strong>虚拟Node</strong>的<code>patchflag</code>属性值，并在<code>patchflag</code>机制的基础上，讲解了<code>dynamicChildren</code>属性存在的意义，并分析为<strong>虚拟Node</strong>添加<code>dynamicChildren</code>属性值的过程，也就是<strong>Block</strong>机制。有了<strong>Block</strong>机制，我们又继续探讨<strong>Block</strong>机制的缺陷，进而又分析<strong>Block Tree</strong>。</p><h1 id="编译结果" tabindex="-1"><a class="header-anchor" href="#编译结果" aria-hidden="true">#</a> 编译结果</h1><p>请大家先看一段模版代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段1--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstLevel 001<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>firstLevel: {{a}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstLevel 002<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>secondLevel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>secondLevel: {{b}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),d={href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer"},k=s("strong",null,"1",-1),v=s("code",null,"render",-1),m=a(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段2  文件名：xx.html--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span> createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span> renderList <span class="token keyword">as</span> _renderList<span class="token punctuation">,</span> createCommentVNode <span class="token keyword">as</span> _createCommentVNode<span class="token punctuation">,</span> createTextVNode <span class="token keyword">as</span> _createTextVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./runtime-dom.esm-browser.js&quot;</span>

    <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;firstLevel 001&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;firstLevel: &quot;</span> <span class="token operator">+</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;firstLevel 002&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
                <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;secondLevel&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;secondLevel: &quot;</span> <span class="token operator">+</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> vNode <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vNode<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：为了方便调试，对编译的结果代码进行了少量改动。代码片段<strong>2</strong>中，第一行代码<code>import {...} from &quot;./runtime-dom.esm-browser.js&quot;</code>里面<code>./runtime-dom.esm-browser.js</code>是我本地编译的<code>runtime-dom</code>的结果文件路径，由于<code>type=&quot;module</code>的限制，需要开启一个本地服务器，然后在浏览器中访问该<code>html</code>页码，在控制台中可以查看打印的调用该<code>render</code>函数生成的<strong>虚拟Node</strong>结果。</p></blockquote><p>关于代码片段<strong>2</strong>的内容，大家如果是初次看见肯定会充满疑惑，脑海里会盘旋着诸如下面的问题：<code>_createElementVNode</code>是做什么的？<code>_createElementBlock</code>又是做什么的？怎么还有个<code>openBlock</code>这又是做什么的？还有<code> 1 /* TEXT */</code>代表什么含义？</p><p>如果此时脑海里充满了这些疑惑，不要着急，接下来将会为大家拨开迷雾，洞察这些充满疑问的地方背后的工作原理。</p><h1 id="render函数概述" tabindex="-1"><a class="header-anchor" href="#render函数概述" aria-hidden="true">#</a> render函数概述</h1><p>至于，代码片段<strong>1</strong>具体是如何转化成代码片段<strong>2</strong>的内容，我们在后面的文章会进行细致的分析。我们先看看这个编译结果<code>render</code>函数做了什么事情，或者说这个函数应该做什么事情。其实我们前面的文章中已经提到过，<code>Vue3</code>最核心的工作流程就是将模版文件转化为可以返回<strong>虚拟Node</strong>的<code>render</code>函数，以及将<strong>虚拟Node</strong>转化成<strong>真实Node</strong>。那代码片段<strong>2</strong>的<code>render</code>函数自然就是返回一个<strong>虚拟Node</strong>对象。</p><p>此时你可能会回头看代码片段<strong>2</strong>中调用的函数<code>_createElementVNode</code>，惊喜的发现，这个函数就是创建<strong>虚拟Node</strong>的函数。但你马上就会感觉奇怪，创建<strong>虚拟Node</strong>这个函数其实就是返回一个对象，这很好理解，这个对象可以描述一个<code>DOM</code>节点，而且也不难理解<code>DOM</code>节点有子节点，这里的<strong>虚拟Node</strong>也有子<strong>虚拟Node</strong>，所以函数<code>_createElementVNode</code>的第三个参数是个数组，这个数组里面的每一个元素都是调用函数<code>_createElementVNode</code>来创建的子<strong>虚拟Node</strong>。</p><p>到目前为止，这些内容理解起来都毫无压力。但你可能马上大喝一声，不对！我们代码片段<strong>1</strong>中有一个根节点，而代码片段<strong>2</strong>中却都是创建的子节点，根节点谁来创建。我们冷静下来，发现函数<code>_createElementBlock</code>的参数和函数<code>_createElementVNode</code>的参数几乎是一模一样的，没错，我们可以认为<code>_createElementBlock</code>的功能也是创建<strong>虚拟Node</strong>。</p><p>到目前为止，我们知道了代码片段<strong>2</strong>的<code>render</code>函数的核心任务就是返回<strong>虚拟Node</strong>，并且也知道了所谓的<strong>虚拟Node</strong>其实就是一个描述<strong>DOM</strong>节点的对象，而函数<code>_createElementVNode</code>和<code>_createElementBlock</code>具备创建该对象的能力。但是毕竟这两个创建<strong>虚拟Node</strong>的函数名称都有差异，那背后肯定也存在着深刻的原因，而这正和本文需要讨论的主题<strong>PatchFlags</strong>和<strong>Block Tree</strong>有着深刻的联系。</p><h1 id="patchflags" tabindex="-1"><a class="header-anchor" href="#patchflags" aria-hidden="true">#</a> PatchFlags</h1><p>我们将代码片段<strong>2</strong>中生成的<strong>虚拟Node</strong>从控制台打印截图如下：</p><p><img src="`+i+`" alt="vnode.jpeg"> 从这张图我们可以发现<strong>虚拟Node</strong>有一个属性叫<code>patchFlag</code>。 其实在代码中<code>PatchFlags</code>代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段3</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> PatchFlags <span class="token punctuation">{</span>
  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token constant">FULL_PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token constant">HYDRATE_EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token constant">STABLE_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
  <span class="token constant">KEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token constant">UNKEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token constant">NEED_PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>
  <span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token constant">DEV_ROOT_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span>
  <span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些枚举值为什么是以位运算的形式来标识，之前的文章介绍过，本文不再赘述。我们需要知道的是，除了<code>HOISTED</code>和<code>BAIL</code>，其他所有的值都代表着<strong>虚拟Node</strong>所代表的节点是动态的。所谓动态的，就是可能发生变化的。比如<code>&lt;div&gt;abc&lt;/div&gt;</code>这样的节点就不是动态的，里面没有响应式元素，正常情况下是不会发生变化的，在<code>patch</code>过程中对其进行比较是没有意义的。所以<code>Vue3</code>对<strong>虚拟Node</strong>打上标记，如果节点的标记大于<code>0</code>则说明是在<code>patch</code>的时候是需要比较<strong>新旧虚拟Node</strong>的差异进行更新的。</p><p>这时候你可能会说，如果是区分节点是否是动态的，直接打上标记大于<code>0</code>或者小于<code>0</code>不就行了吗，这里为什么有十几个枚举值来表示？这个问题问得很好，回答这个问题之前我们先问各位另外一个问题，假设让我们来比较两个节点有什么差异，怎么比较呢？</p><p>面对这个问题，按照正常的思维，既然要比较两个事物是否有差异，就得看两个事物的各组成部分是否有差异，我们知道<strong>虚拟Node</strong>有标签名、类型名、事件名等各种属性名，同时还有有子节点，子节点又可能有子节点。那么要比较两个<strong>虚拟Node</strong>的差异，就得逐个属性逐级进行比较。而这样必然导致全部属性遍历，性能不可避免的低下。</p><p><strong>Vue3</strong>的作者创造性的不仅标记某个<strong>虚拟Node</strong>是否动态，而且精准的标记具体是哪个属性是动态的，这样在进行更新的时候只需要定向查找相应属性的状态，比如<code>patchflag</code>的值如果包含的状态是<code>CLASS</code>对应的值<code>1&lt;&lt;1</code>，则直接比对<strong>新旧虚拟Node</strong>的<code>class</code>属性的值的变化。注意，由于<code>patchflag</code>是采用位运算的方式进行赋值，结合枚举类型<code>PatchFlags</code>，<code>patchflag</code>可以同时表示多种状态。也就是说可以表示<code>class</code>属性是动态的，也可以表示<code>style</code>属性是动态的，具体原理我们在前面的文章以及解释过，此处不再赘述。</p><p>我们发现，虽然对<strong>虚拟Node</strong>已经精准的标记了动态节点，甚至标识到了具体什么属性的维度。但是还是无法避免递归整颗<strong>虚拟Node</strong>树。追求极致的工程师们又创造性的想到了利用<strong>Block</strong>的机制来规避全量对<strong>虚拟Node</strong>树进行递归。</p><h1 id="block" tabindex="-1"><a class="header-anchor" href="#block" aria-hidden="true">#</a> Block</h1><p>在解释什么是<strong>Block</strong>机制之前，我们继续思考，如果是我们自己来想办法去规避全量比较<strong>虚拟Node</strong>的话怎么做？可能你会想到，是不是可以把这些动态的节点放到某一个独立的地方进行维护，这样<strong>新旧虚拟Node</strong>的节点可以在一个地方进行比较，就像下面这样：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 代码片段4--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>static content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{dynamic}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{dynamic}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的<strong>虚拟Node</strong>对属性进行精简后大致如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 代码片段4</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;static content&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;staticCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;shapeFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;staticCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;shapeFlag&quot;</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;staticCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;shapeFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;staticCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;shapeFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码片段<strong>4</strong>中，可以发现<strong>虚拟Node</strong>上有个属性叫<code>dynamicChildren</code>，正常一个<strong>虚拟Node</strong>是没有这样一个属性的，因为我们前面说过<strong>虚拟Node</strong>是用来描述<strong>DOM</strong>节点的对象，而<strong>DOM</strong>节点是没有一项信息叫<code>dynamicChildren</code>的。那这个属性有什么用呢？还记得我们在分析<code>patchElemenet</code>函数的时候吗，有这样一段代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">patchBlockChildren</span><span class="token punctuation">(</span>
        n1<span class="token punctuation">.</span>dynamicChildren<span class="token operator">!</span><span class="token punctuation">,</span>
        dynamicChildren<span class="token punctuation">,</span>
        el<span class="token punctuation">,</span>
        parentComponent<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        areChildrenSVG<span class="token punctuation">,</span>
        slotScopeIds
      <span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> parentComponent <span class="token operator">&amp;&amp;</span> parentComponent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__hmrId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverseStaticChildren</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// full diff</span>
      <span class="token function">patchChildren</span><span class="token punctuation">(</span>
        n1<span class="token punctuation">,</span>
        n2<span class="token punctuation">,</span>
        el<span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        parentComponent<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        areChildrenSVG<span class="token punctuation">,</span>
        slotScopeIds<span class="token punctuation">,</span>
        <span class="token boolean">false</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当时我叫大家先忽略<code>patchBlockChildren</code>函数，只告诉大家该函数和优化相关。我们来看看函数<code>patchBlockChildren</code>的具体实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段6</span>
<span class="token comment">// The fast path for blocks.</span>
  <span class="token keyword">const</span> patchBlockChildren<span class="token operator">:</span> <span class="token function-variable function">PatchBlockChildrenFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    oldChildren<span class="token punctuation">,</span>
    newChildren<span class="token punctuation">,</span>
    fallbackContainer<span class="token punctuation">,</span>
    parentComponent<span class="token punctuation">,</span>
    parentSuspense<span class="token punctuation">,</span>
    isSVG<span class="token punctuation">,</span>
    slotScopeIds
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">const</span> newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token comment">// Determine the container (parent element) for the patch.</span>
      <span class="token keyword">const</span> container <span class="token operator">=</span>
        <span class="token comment">// oldVNode may be an errored async setup() component inside Suspense</span>
        <span class="token comment">// which will not have a mounted element</span>
        oldVNode<span class="token punctuation">.</span>el <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// - In the case of a Fragment, we need to provide the actual parent</span>
        <span class="token comment">// of the Fragment itself so it can move its children.</span>
        <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment <span class="token operator">||</span>
          <span class="token comment">// - In the case of different nodes, there is going to be a replacement</span>
          <span class="token comment">// which also requires the correct parent container</span>
          <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token comment">// - In the case of a component, it could contain anything.</span>
          oldVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span> <span class="token operator">|</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token function">hostParentNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token operator">!</span>
          <span class="token operator">:</span> <span class="token comment">// In other cases, the parent container is not actually used so we</span>
            <span class="token comment">// just pass the block element here to avoid a DOM parentNode call.</span>
            fallbackContainer
      <span class="token function">patch</span><span class="token punctuation">(</span>
        oldVNode<span class="token punctuation">,</span>
        newVNode<span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        parentComponent<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        isSVG<span class="token punctuation">,</span>
        slotScopeIds<span class="token punctuation">,</span>
        <span class="token boolean">true</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的逻辑很简单，对<strong>新旧虚拟Node</strong>的<code>dynamicChildren</code>属性所代表的<strong>虚拟Node</strong>数组进行遍历，并调用<code>patch</code>函数进行更新操作。</p><p>我们从代码片段<strong>5</strong>中可以发现，如果属性<code>dynamicChildren</code>有值，则不会执行<code>patchChildren</code>函数进行比较<strong>新旧虚拟Node</strong>的差异并进行更新。为什么可以直接比较<strong>虚拟Node</strong>的<code>dynamicChildren</code>属性对应的数组元素，就可以完成更新呢？</p><p>我们知道<code>dynamicChildren</code>中存放的是所有的代表动态节点的<strong>虚拟Node</strong>，而且从代码片段<strong>4</strong>中不难看出<code>dynamicChildren</code>记录的动态节点不仅包括自己所属层级的动态节点，也包括子级的动态节点，也就是说根节点内部所有的动态节点都会收集在<code>dynamicChildren</code>中。由于<strong>新旧虚拟Node</strong>的根节点下都有<code>dynamicChildren</code>属性，都保存了所有的动态元素对应的值，也就是说动态节点的顺序是一一对应的，所以代码片段<strong>6</strong>中不再需要深度递归去寻找节点间的差异，而是简单的线性遍历并执行<code>patch</code>函数就完成了节点的更新。</p><p>这种机制这么优秀，是如何给属性<code>dynamicChildren</code>赋值的呢？</p><p>还记得代码片段<strong>2</strong>中，让我们倍感疑惑的函数<code>_openBlock</code>和<code>_createElementBlock</code>吗。我们来探索这两个函数的内部实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段7</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">openBlock</span><span class="token punctuation">(</span>disableTracking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  blockStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentBlock <span class="token operator">=</span> disableTracking <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>7</strong>中不难发现，所谓的<code>openBlock</code>函数，逻辑非常简单，给数组<code>blockStack</code>添加一个或为<code>null</code>或为<code>[]</code>的元素。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段8</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementBlock</span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">typeof</span> Fragment<span class="token punctuation">,</span>
  props<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  patchFlag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  dynamicProps<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  shapeFlag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>
    <span class="token function">createBaseVNode</span><span class="token punctuation">(</span>
      type<span class="token punctuation">,</span>
      props<span class="token punctuation">,</span>
      children<span class="token punctuation">,</span>
      patchFlag<span class="token punctuation">,</span>
      dynamicProps<span class="token punctuation">,</span>
      shapeFlag<span class="token punctuation">,</span>
      <span class="token boolean">true</span> <span class="token comment">/* isBlock */</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// save current block children on the block vnode</span>
  vnode<span class="token punctuation">.</span>dynamicChildren <span class="token operator">=</span>
    isBlockTreeEnabled <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> currentBlock <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">EMPTY_ARR</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token comment">// close block</span>
  <span class="token function">closeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// a block is always going to be patched, so track it as a child of its</span>
  <span class="token comment">// parent block</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlockTreeEnabled <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> currentBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentBlock<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>8</strong>中调用了一个函数<code>createBaseVNode</code>，该函数功能是创建<strong>虚拟Node</strong>对象，这才是<code>createElementBlock</code>的核心工作，那这里的函数<code>setupBlock</code>发挥了什么作用呢？可以概括为下面<strong>3</strong>个作用：</p><ol><li><strong>虚拟Node</strong>创建完成后，给该<strong>虚拟Node</strong>的属性<code>dynamicChildren</code>赋值，赋的值为<code>currentBlock</code>，我们知道，<code>currentBlock</code>是在调用<code>openBlock</code>函数的时候初始化的一个数组。</li><li>调用<code>closeBlock</code>的作用就是将调用<code>openBlock</code>时候初始化的数组对象<code>currentBlock</code>移除，并将<code>currentBlock</code>赋值为<code>blockStack</code>的最后一个元素。该函数内容如下：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段9</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">closeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  blockStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  currentBlock <span class="token operator">=</span> blockStack<span class="token punctuation">[</span>blockStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>执行语句<code>currentBlock.push(vnode)</code>，将当前创建的节点自身添加到上一级（因为<code>closeBlock</code>的时候已经<code>pop</code>出刚刚创建完成的<strong>虚拟Node</strong>所在的<code>currentBlock</code>）<code>currentBock</code>中。</li></ol><p>描述了上面<strong>3</strong>点，可能大家觉得有些疑惑，上面的描述和代码虽然很一致，但是究竟发挥了什么作用呢？我们先将源码实现进行精简，在下文讨论<strong>Block Tree</strong>的时候再回过头看代码片段<strong>7</strong>到代码片段<strong>9</strong>的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段10</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementBlock</span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">typeof</span> Fragment<span class="token punctuation">,</span>
  props<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  patchFlag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  dynamicProps<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  shapeFlag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>
    <span class="token function">createBaseVNode</span><span class="token punctuation">(</span><span class="token comment">/*此处省略若干参数*/</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createBaseVNode</span><span class="token punctuation">(</span><span class="token comment">/* ...*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ...*/</span><span class="token punctuation">}</span> <span class="token keyword">as</span> VNode
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/*如果是动态元素*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentBlock<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  vnode<span class="token punctuation">.</span>dynamicChildren <span class="token operator">=</span> currentBlock
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将代码精简到极致，其实就是如果是动态节点，就添加到<code>currentBlock</code>中，并且在创建完毕<strong>虚拟Node</strong>后，就将<code>currentBlock</code>赋值给创建好的<strong>虚拟Node</strong>的<code>dynamicChildren</code>属性。注意，通过<code>createElementBlock</code>创建的虚拟节点才会为<strong>虚拟Node</strong>添加<code>dynamicChildren</code>属性值。</p><h1 id="block存在的问题" tabindex="-1"><a class="header-anchor" href="#block存在的问题" aria-hidden="true">#</a> Block存在的问题</h1><p>上面我们知道了，<code>dynamicChildren</code>的赋值的过程，确实可以让我们更新<strong>DOM</strong>元素的效率提高，但遗憾的是，这里面存在一些问题。问题的关键是，当<strong>DOM</strong>结构不稳定的时候，我们无法通过代码片段<strong>6</strong>中的方式来更新元素。因为要想能通过遍历数组的方式去调用<code>patch</code>函数对元素进行更新的前提条件是<strong>新旧虚拟Node</strong>的<code>dynamicChildren</code>的元素是一一对应的，因为只有<strong>新旧虚拟Node</strong>是同一个元素进行调用<code>patch</code>依次更新才有意义。但是如果<strong>新旧虚拟Node</strong>的<code>dynamicChildren</code>元素不能一一对应，那就无法通过这种方式来更新。</p><p>然而在我们的程序中包含了大量的<code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>、<code>v-for</code>等可能改变<strong>DOM</strong>树结构的指令。比如下面的模版：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段11--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{city}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in arr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>11</strong>中，当<code>flag</code>的值不同的时候，收集的动态节点个数是不相同的，同时，不同<strong>虚拟Node</strong>对应的真实<strong>DOM</strong>也是不同的，当我们通过代码片段<strong>6</strong>的方式，直接进行遍历更新是无法生效的。</p><p>举个例子，<code>flag</code>为<code>true</code>的时候，动态节点中包含<code>{{name}}</code>所在的<code>div</code>和<code>{{age}}</code>所在的<code>div</code>，而当条件发生改变后，新的<strong>虚拟Node</strong>收集的动态节点是<code>{{city}}</code>所在的<code>div</code>，当进行遍历比较的时候，会用<code>{{city}}</code>所在<code>div</code>对应的<strong>虚拟Node</strong>去和<code>{{name}}</code>所在的<code>div</code>所在的<strong>虚拟Node</strong>进行比较和更新。但是<code>{{name}}</code>所在<code>div</code>的<strong>虚拟Node</strong>的<code>el</code>属性是节点<code>&lt;div&gt;{{name}}&lt;/div&gt;</code>，然而该节点已经因为条件变化而消失。所以即使对该节点进行更新，浏览器页面也不会发生任何变化。</p><h1 id="block-tree" tabindex="-1"><a class="header-anchor" href="#block-tree" aria-hidden="true">#</a> Block Tree</h1><p>为了解决只使用<code>Block</code>来提升更新性能的时候所产生的问题，<strong>Block Tree</strong>产生了。所谓的<strong>Block Tree</strong>，其实就是把那些<strong>DOM</strong>结构可能发生改变的地方也作为一个动态节点进行收集。其实代码片段<strong>6</strong>到代码片段<strong>9</strong>之所以维护一个全局的栈结构，就是为了配合<strong>Block Tree</strong>这种机制的正常运转。我们来看一个具体例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段12--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{name}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转化成<code>render</code>函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span> createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span> renderList <span class="token keyword">as</span> _renderList<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_renderList</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> index <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span> <span class="token comment">/* KEYED_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看该<code>render</code>函数的返回值，为了方便阅读做了大量精简，关键信息如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 代码片段13</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yangyitao&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;staticCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;shapeFlag&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yangyitao&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dynamicChildren&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看见根节点下有<code>dynamicChildren</code>属性值，该属性对应的数组有两个元素，一个对应<code>{{name}}</code>所在的<code>div</code>；一个对应<code>for</code>循环的外层节点，该节点的<code>dynamicChildren</code>为空元素，这是因为无法保证里面的元素数量上的一致，无法进行通过循环遍历，<strong>新旧虚拟Node</strong>一一对应进行更新，因此只能正常比较<code>children</code>下的元素。对于<code>v-if</code>、<code>v-else</code>等情况和<code>for</code>循环有相似之处，大家可以多调试，深入理解相关知识。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情支持：</p><ul><li>如果<code>点赞，点在看，转发</code>可以让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>`,60);function g(b,y){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("我们在网站"),s("a",d,[n("https://vue-next-template-explorer.netlify.app/"),l(t)]),n("上对代码片段"),k,n("中的代码转化成"),v,n("函数：")]),m])}const h=e(u,[["render",g],["__file","11.编译优化之Block Tree 与 PatchFlags.html.vue"]]);export{h as default};
