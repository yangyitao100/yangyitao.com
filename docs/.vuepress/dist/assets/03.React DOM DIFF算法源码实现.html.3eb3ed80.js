import{_ as n,o as s,c as a,f as p}from"./app.d86bc82c.js";const t={},o=p(`<h1 id="_03-react-dom-diff算法源码实现" tabindex="-1"><a class="header-anchor" href="#_03-react-dom-diff算法源码实现" aria-hidden="true">#</a> 03.React DOM DIFF算法源码实现</h1><p>具体代码演化过程请观看视频，这里呈现关键代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REACT_TEXT</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;react.text&#39;</span><span class="token punctuation">)</span><span class="token comment">///</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MOVE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;dom.diff.move&#39;</span><span class="token punctuation">)</span><span class="token comment">//</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CREATE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;dom.diff.create&#39;</span><span class="token punctuation">)</span><span class="token comment">//</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">toVNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token comment">//</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">REACT_TEXT</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span> node<span class="token punctuation">}</span><span class="token comment">//</span>
    <span class="token punctuation">}</span> <span class="token operator">:</span> node<span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token comment">//</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// react.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span> <span class="token constant">REACT_FORWARD_REF</span><span class="token punctuation">,</span> toVNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span> <span class="token comment">///</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toVNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        props<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">toVNode</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token comment">///</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Component.js</span>
<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1. 获取重新执行render函数后的虚拟DOM 新虚拟DOM</span>
        <span class="token comment">// 2. 根据新虚拟DOM生成新的真实DOM</span>
        <span class="token comment">// 3. 将真实DOM挂载到页面上</span>
        <span class="token keyword">let</span> oldVNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldVNode<span class="token punctuation">;</span> <span class="token comment">// TODO: 让类组件拥有一个oldVNode属性保存类组件实例对应的的虚拟DOM</span>
        <span class="token keyword">let</span> oldDOM <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span> <span class="token comment">// TODO: 将真实DOM保存到对应的虚拟DOM上</span>
        <span class="token keyword">let</span> newVNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">updateDomTree</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> oldDOM<span class="token punctuation">)</span> <span class="token comment">////</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oldVNode <span class="token operator">=</span> newVNode
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// react-dom.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">,</span> <span class="token constant">REACT_FORWARD_REF</span><span class="token punctuation">,</span> <span class="token constant">MOVE</span><span class="token punctuation">,</span> <span class="token constant">CREATE</span><span class="token punctuation">,</span> <span class="token constant">REACT_TEXT</span>  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span><span class="token comment">///</span>
<span class="token keyword">function</span> <span class="token function">createDOM</span><span class="token punctuation">(</span><span class="token parameter">VNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1.创建元素 2.处理子元素 3.处理属性值</span>
    <span class="token operator">...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">REACT_TEXT</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">////</span>
        dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///</span>
    <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> VNode<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">///</span>
        dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token comment">///</span>
    <span class="token punctuation">}</span><span class="token comment">///</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> props<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>children<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> dom<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">mountArray</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> dom<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token comment">////</span>
        <span class="token comment">/////</span>
    <span class="token punctuation">}</span>
    <span class="token function">setPropsForDOM</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> props<span class="token punctuation">)</span>
    VNode<span class="token punctuation">.</span>dom <span class="token operator">=</span> dom
    ref <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current <span class="token operator">=</span> dom<span class="token punctuation">)</span>
    <span class="token keyword">return</span> dom
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mountArray</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">////</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token comment">////</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentDOM<span class="token punctuation">,</span> oldVNodeChildren<span class="token punctuation">,</span> newVNodeChildren</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    oldVNodeChildren <span class="token operator">=</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>oldVNodeChildren<span class="token punctuation">)</span> <span class="token operator">?</span> oldVNodeChildren <span class="token operator">:</span> <span class="token punctuation">[</span>oldVNodeChildren<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    newVNodeChildren <span class="token operator">=</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>newVNodeChildren<span class="token punctuation">)</span> <span class="token operator">?</span> newVNodeChildren <span class="token operator">:</span> <span class="token punctuation">[</span>newVNodeChildren<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 利用Map数据结构为旧的虚拟DOM数组找到key和节点的关系，为后续根据key查找是否有可复用的虚拟DOM创造条件</span>
    <span class="token keyword">let</span> lastNotChangedIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldKeyChildMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    oldVNodeChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> oldKey <span class="token operator">=</span> oldVNode <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>key <span class="token operator">?</span> oldVNode<span class="token punctuation">.</span>key <span class="token operator">:</span> index<span class="token punctuation">;</span>
        oldKeyChildMap<span class="token punctuation">[</span>oldKey<span class="token punctuation">]</span> <span class="token operator">=</span> oldVNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 遍历新的子虚拟DOM树组，找到可以复用但需要移动的、需要重新创建的、需要删除的节点，剩下的都是不用动的节点</span>
    <span class="token keyword">let</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    newVNodeChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newVNode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> newVNode <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newVNode<span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> newKey <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">?</span> newVNode<span class="token punctuation">.</span>key <span class="token operator">:</span> index<span class="token punctuation">;</span>
        <span class="token keyword">let</span> oldVNode <span class="token operator">=</span> oldKeyChildMap<span class="token punctuation">[</span>newKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">deepDOMDiff</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> lastNotChangedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">MOVE</span><span class="token punctuation">,</span>
                    oldVNode<span class="token punctuation">,</span>
                    newVNode<span class="token punctuation">,</span>
                    index
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">delete</span> oldKeyChildMap<span class="token punctuation">[</span>newKey<span class="token punctuation">]</span>
            lastNotChangedIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lastNotChangedIndex<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            actions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">CREATE</span><span class="token punctuation">,</span>
                newVNode<span class="token punctuation">,</span>
                index
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 可以复用但需要移动位置的节点，以及用不上需要删除的节点，都从父节点上移除</span>
    <span class="token keyword">let</span> VNodeToMove <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=&gt;</span> action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">MOVE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=&gt;</span> action<span class="token punctuation">.</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> VNodeToDelete <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>oldKeyChildMap<span class="token punctuation">)</span>
    VNodeToMove<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>VNodeToDelete<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">oldVChild</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> currentDOM <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentDOM<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 对需要移动以及需要新创建的节点统一插入到正确的位置</span>
    actions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">debugger</span>
        <span class="token keyword">let</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>
        <span class="token keyword">let</span> childNodes <span class="token operator">=</span> parentDOM<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token function-variable function">getDomForInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">CREATE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">createDOM</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token constant">MOVE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> childNode <span class="token operator">=</span> childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parentDOM<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">getDomForInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> childNode<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            parentDOM<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">getDomForInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> classInstance <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>classInstance <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>classInstance<span class="token punctuation">;</span>
    classInstance<span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">launchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldDOM <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldDOM<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> newVNode<span class="token punctuation">;</span>
    <span class="token keyword">let</span> newRenderVNode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateDomTree</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>oldRenderVNode<span class="token punctuation">,</span> newRenderVNode<span class="token punctuation">,</span> oldDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    newVNode<span class="token punctuation">.</span>oldRenderVNode <span class="token operator">=</span> newRenderVNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">deepDOMDiff</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> diffTypeMap <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token constant">ORIGIN_NODE</span><span class="token operator">:</span> <span class="token keyword">typeof</span> oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 原生节点</span>
        <span class="token constant">CLASS_COMPONENT</span><span class="token operator">:</span> <span class="token keyword">typeof</span> oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">,</span>
        <span class="token constant">FUNCTION_COMPONENT</span><span class="token operator">:</span> <span class="token keyword">typeof</span> oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span>
        <span class="token constant">TEXT</span><span class="token operator">:</span> oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_TEXT</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token constant">DIFF_TYPE</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>diffTypeMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> diffTypeMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token constant">DIFF_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ORIGIN_NODE&#39;</span><span class="token operator">:</span>
            <span class="token keyword">let</span> currentDOM <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>dom <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setPropsForDOM</span><span class="token punctuation">(</span>currentDOM<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span>
            <span class="token function">updateChildren</span><span class="token punctuation">(</span>currentDOM<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newVNode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;CLASS_COMPONENT&#39;</span><span class="token operator">:</span>
            <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;FUNCTION_COMPONENT&#39;</span><span class="token operator">:</span>
            <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;TEXT&#39;</span><span class="token operator">:</span>
            newVNode<span class="token punctuation">.</span>dom <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newVNode<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newVNode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">removeVNode</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentDOM <span class="token operator">=</span> <span class="token function">findDomByVNode</span><span class="token punctuation">(</span>vNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentDOM<span class="token punctuation">)</span> currentDOM<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 开始dom-diff</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateDomTree</span><span class="token punctuation">(</span><span class="token parameter">oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> oldDOM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> typeMap <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token constant">NO_OPERATE</span><span class="token operator">:</span> <span class="token operator">!</span>oldVNode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newVNode<span class="token punctuation">,</span>
        <span class="token constant">ADD</span><span class="token operator">:</span> <span class="token operator">!</span>oldVNode <span class="token operator">&amp;&amp;</span> newVNode<span class="token punctuation">,</span>
        <span class="token constant">DELETE</span><span class="token operator">:</span> oldVNode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newVNode<span class="token punctuation">,</span>
        <span class="token constant">REPLACE</span><span class="token operator">:</span> oldVNode <span class="token operator">&amp;&amp;</span> newVNode <span class="token operator">&amp;&amp;</span> oldVNode<span class="token punctuation">.</span>type <span class="token operator">!==</span> newVNode<span class="token punctuation">.</span>type <span class="token comment">// 类型不同</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token constant">UPDATE_TYPE</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>typeMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> typeMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token constant">UPDATE_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;NO_OPERATE&#39;</span><span class="token operator">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;DELETE&#39;</span><span class="token operator">:</span>
            <span class="token function">removeVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ADD&#39;</span><span class="token operator">:</span>
            oldDOM<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createDOM</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;REPLACE&#39;</span><span class="token operator">:</span>
            <span class="token function">removeVNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里直接追加到尾巴上</span>
            oldDOM<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createDOM</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token comment">// 深度的 dom-diff，新老虚拟DOM都存在且类型相同</span>
            <span class="token function">deepDOMDiff</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;./react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;./react-dom&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
    isReset <span class="token operator">=</span> <span class="token boolean">false</span>
    oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span>
    newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldArr <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">updateShowArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isReset <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldArr <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newArr
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isReset <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isReset
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;test-class&#39;</span> style<span class="token operator">=</span><span class="token punctuation">{</span>
                        <span class="token punctuation">{</span>
                            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> 
                            <span class="token literal-property property">cursor</span><span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span><span class="token punctuation">,</span> 
                            <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;1px solid gray&#39;</span><span class="token punctuation">,</span> 
                            <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">&#39;6px&#39;</span><span class="token punctuation">,</span>
                            <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&#39;inline-block&#39;</span><span class="token punctuation">,</span>
                            <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&#39;6px 12px&#39;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateShowArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>Change The Text<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyClassComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","03.React DOM DIFF算法源码实现.html.vue"]]);export{k as default};
