import{_ as l,r as e,o as i,c as u,b as s,d as n,e as a,w as t,f as o}from"./app.4326c516.js";const d="/assets/07-02.aeeb6ff0.webp",r={},k=o(`<h1 id="_08-single-spa中的reroute函数" tabindex="-1"><a class="header-anchor" href="#_08-single-spa中的reroute函数" aria-hidden="true">#</a> 08.single-spa中的reroute函数</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=s("code",null,"reroute",-1),m=s("code",null,"popstate",-1),b=s("code",null,"hashchange",-1),h=s("code",null,"single-spa",-1),g=s("strong",null,"加载",-1),_=s("strong",null,"启动",-1),f=s("strong",null,"挂载",-1),A=s("strong",null,"卸载",-1),E=s("code",null,"reroute",-1),T=s("code",null,"single-spa",-1),w=s("code",null,"Vue3",-1),y=s("code",null,"React18",-1),U=s("code",null,"Webpack5",-1),O=s("code",null,"Rollup",-1),P=s("code",null,"Vite",-1),N=s("code",null,"reroute",-1),D=s("img",{src:d,alt:"single-spa的状态切换.jpg"},null,-1),L=o(`<h1 id="reroute函数的核心逻辑" tabindex="-1"><a class="header-anchor" href="#reroute函数的核心逻辑" aria-hidden="true">#</a> reroute函数的核心逻辑</h1><p>我们先看该函数的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reroute</span><span class="token punctuation">(</span><span class="token parameter">pendingPromises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eventArguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    appsToUnload<span class="token punctuation">,</span>
    appsToUnmount<span class="token punctuation">,</span>
    appsToLoad<span class="token punctuation">,</span>
    appsToMount<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getAppChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略一些代码...</span>
    appsThatChanged <span class="token operator">=</span> appsToUnload<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
      appsToLoad<span class="token punctuation">,</span>
      appsToUnmount<span class="token punctuation">,</span>
      appsToMount
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">performAppChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    appsThatChanged <span class="token operator">=</span> appsToLoad<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">loadApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 此处省略许多代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x=s("strong",null,"300",-1),B=s("strong",null,"1",-1),C=s("strong",null,"一",-1),j=s("code",null,"getAppChanges",-1),I=s("code",null,"single-spa",-1),R=s("strong",null,"二",-1),S=s("code",null,"isStarted()",-1),M=s("code",null,"single-spa",-1),F=s("code",null,"start",-1),q=s("code",null,"performAppChanged",-1),G=s("code",null,"getAppChanges",-1),V=s("code",null,"start",-1),K=s("code",null,"loadApp",-1),W=s("code",null,"loadApp",-1),z=s("code",null,"getAppChanges",-1),H=s("code",null,"performAppChanges",-1),J=o(`<h1 id="getappchanges" tabindex="-1"><a class="header-anchor" href="#getappchanges" aria-hidden="true">#</a> getAppChanges</h1><p>请先看<code>getAppChanges</code>函数的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAppChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> appsToUnload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    appsToUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    appsToLoad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    appsToMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 此处省略一些代码...</span>
  apps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> appShouldBeActive <span class="token operator">=</span>
      app<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">SKIP_BECAUSE_BROKEN</span> <span class="token operator">&amp;&amp;</span> <span class="token function">shouldBeActive</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token constant">LOAD_ERROR</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>appShouldBeActive <span class="token operator">&amp;&amp;</span> currentTime <span class="token operator">-</span> app<span class="token punctuation">.</span>loadErrorTime <span class="token operator">&gt;=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          appsToLoad<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token constant">NOT_LOADED</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token constant">LOADING_SOURCE_CODE</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>appShouldBeActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          appsToLoad<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token constant">NOT_BOOTSTRAPPED</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token constant">NOT_MOUNTED</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appShouldBeActive <span class="token operator">&amp;&amp;</span> <span class="token function">getAppUnloadInfo</span><span class="token punctuation">(</span><span class="token function">toName</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          appsToUnload<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>appShouldBeActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          appsToMount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token constant">MOUNTED</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appShouldBeActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          appsToUnmount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> appsToUnload<span class="token punctuation">,</span> appsToUnmount<span class="token punctuation">,</span> appsToLoad<span class="token punctuation">,</span> appsToMount <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码片段<strong>2</strong>中可以看出该函数的逻辑其实很简单。定义<strong>4</strong>个数组，然后根据微应用当前所处的不同状态，推断出函数即将要进入的状态，并把即将要进入同一个状态的微应用放到一个相同的数组中。关于微应用的状态变化，可以参考本文开始处的流程图。下面对代码中关于向数组中添加相应微应用的逻辑进行简要介绍。</p><h2 id="数组appstoload" tabindex="-1"><a class="header-anchor" href="#数组appstoload" aria-hidden="true">#</a> 数组appsToLoad</h2><p>我们发现处于<code>NOT_LOADED</code>、<code>LOADING_SOURCE_CODE</code>状态的微应用被放入了数组<code>appsToLoad</code>中，事实上<code>appsToLoad</code>数组中存放的微应用在后续的逻辑中即将被<strong>加载</strong>，且在加载过程中，状态会变化为<code>LOADING_SOURCE_CODE</code>，加载完成后，状态会变化为<code>NOT_BOOTSTRAPPED</code>，也就是说之前未被加载完成的微应用会在此进行加载。大家会不会觉得很奇怪，这不是在浪费资源吗，不过不用担心，因为在执行加载的函数中有这样的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段3</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>loadPromise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> app<span class="token punctuation">.</span>loadPromise<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">NOT_LOADED</span> <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">LOAD_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> app<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>loadPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">delete</span> app<span class="token punctuation">.</span>loadPromise<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> app<span class="token punctuation">.</span>loadPromise<span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是，代码中利用app.loadPromise做了缓存，并不会重复加载。后文会有小节详细讲解函数<code>toLoadPromise</code>，此处提及指示解答一些朋友们初次看代码时候心中可能的疑惑。</p><h2 id="数组appstounload" tabindex="-1"><a class="header-anchor" href="#数组appstounload" aria-hidden="true">#</a> 数组appsToUnload</h2><p>我们从代码片段<strong>2</strong>中还发现，处于<code>NOT_BOOTSTRAPPED</code>、<code>NOT_MOUNTED</code>状态的微应用，如果不需要于激活状态且<code>getAppUnloadInfo(toName(app))</code>返回值为<code>true</code>，则该微应用加入到数组<code>appsToUnload</code>中。这里的<code>getAppUnloadInfo</code>函数代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段4</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAppUnloadInfo</span><span class="token punctuation">(</span><span class="token parameter">appName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> appsToUnload<span class="token punctuation">[</span>appName<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象appstounload" tabindex="-1"><a class="header-anchor" href="#对象appstounload" aria-hidden="true">#</a> 对象appsToUnload</h3><p>请朋友们注意，函数<code>getAppUnloadInfo</code>中的<code>appsToUnload</code>是一个全局对象，不是函数<code>getAppChanges</code>中的<code>appsToUnload</code>数组。函数<code>getAppUnloadInfo</code>返回为<code>true</code>，则说明用户手动调用过函数<code>unloadApplication</code>，因为函数<code>getAppUnloadInfo</code>中的对象<code>appsToUnload</code>只会在<code>unloadApplication</code>的执行过程中被改变。</p><h3 id="unloadapplication" tabindex="-1"><a class="header-anchor" href="#unloadapplication" aria-hidden="true">#</a> unloadApplication</h3><p>下面是关于<code>unloadApplication</code>函数在<code>single-spa</code>文档上的官方说明：</p><blockquote><p>The purpose of unloading a registered application is to set it back to a <code>NOT_LOADED</code> status, which means that it will be <code>re-bootstrapped</code> the next time it needs to mount. The main use-case for this was to allow for the hot-reloading of entire registered applications, but <code>unloadApplication</code> can be useful whenever you want to <code>re-bootstrap your application</code>.</p></blockquote><p>文档中的内容，可以简单理解为，如果希望执重新执行微应用的生命周期函数<code>bootstrap</code>，那调用<code>unloadApplicaton</code>函数是一个不错的选择。其实到这里我们也可以发现，一般情况下，我们是不会轻易<strong>卸载</strong>微应用的，也就是说，流程图中<code>MOUNTED</code>-&gt;<code>UNMOUNTING</code>-&gt;<code>UNLOADING</code>-&gt;<code>UNLOADED</code>这个状态转换流程，如果不是用户手动干预，调用<code>unloadApplicaton</code>，是不会发生的。</p><h3 id="tounloadpromise" tabindex="-1"><a class="header-anchor" href="#tounloadpromise" aria-hidden="true">#</a> toUnloadPromise</h3><p>实际上，数组<code>appsToUnload</code>中的微应用即将被执行的主要逻辑都在函数<code>toUnloadPromise</code>中，请看代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toUnloadPromise</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> unloadInfo <span class="token operator">=</span> appsToUnload<span class="token punctuation">[</span><span class="token function">toName</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 对象appsToUnload没有值，说明没有调用过unloadApplicaton函数，没必要继续</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unloadInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> app<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 说明已经处于NOT_LOADED状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">NOT_LOADED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">finishUnloadingApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> unloadInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> app<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 已经在卸载中的状态，等执行结果就可以了，注意这里的promise是从对象appsToUnload上面取的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">UNLOADING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> unloadInfo<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 应用的状态转换应该符合流程图所示，只有处于UNMOUNTED状态下的微应用才可以有-&gt;UNLOADING-&gt;UNLOADED的转化</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">NOT_MOUNTED</span> <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">LOAD_ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> app<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> unloadPromise <span class="token operator">=</span>
      app<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">LOAD_ERROR</span>
        <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">reasonableTime</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">&quot;unload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">UNLOADING</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> unloadPromise
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">finishUnloadingApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> unloadInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">errorUnloadingApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> unloadInfo<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>toUnloadPromise</code>中可以认为主要做了三件事：<strong>一</strong>是不能符合执行条件的情况进行拦截，拦截的相关原因已经写到代码片段<strong>5</strong>的注释中；<strong>二</strong>是利用<code>reasonableTime</code>函数真正的执行卸载的相关逻辑；<strong>三</strong>是执行函数<code>finishUnloadingApp</code>或<code>errorUnloadingApp</code>变更微应用的状态。变更状态的逻辑相对简单，不在本文赘述，下面分析函数<code>reasonableTime</code>中的源码实现。</p><h3 id="reasonabletime" tabindex="-1"><a class="header-anchor" href="#reasonabletime" aria-hidden="true">#</a> reasonableTime</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段6</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reasonableTime</span><span class="token punctuation">(</span><span class="token parameter">appOrParcel<span class="token punctuation">,</span> lifecycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略许多代码...</span>
    appOrParcel<span class="token punctuation">[</span>lifecycle<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">getProps</span><span class="token punctuation">(</span>appOrParcel<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处省略许多代码...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数可以理解为做了三件事情：<strong>一</strong>是做了超时处理，我在代码片段<strong>6</strong>中省略了相关内容；<strong>二</strong>是执行微应用的<code>lifecycle</code>变量对应的函数，就当前分析<code>toUnloadPromise</code>函数的场景下，这里的<code>lifecycle</code>对应的<code>unload</code>属性对应的函数。这<code>unload</code>属性是在函数<code>toLoadPromise</code>中添加的，也就是说在<strong>加载</strong>阶段让微应用具备了<strong>卸载</strong>的能力。事实上，这个<code>unload</code>函数是加载微应用完成后，从微应用暴露的对象中获取的。</p><h2 id="数组appstomount、appstounmount、appstomount" tabindex="-1"><a class="header-anchor" href="#数组appstomount、appstounmount、appstomount" aria-hidden="true">#</a> 数组appsToMount、appsToUnmount、appsToMount</h2><p>从上文可知，代码片段<strong>2</strong>中，处于<code>NOT_BOOTSTRAPPED</code>、<code>NOT_MOUNTED</code>状态的微应用，如果并路由规则匹配，则该微应用将会被添加到数组<code>appsToMount</code>中。至于数组<code>appsToUnmount</code>，其分析过程和后续的执行流程和<code>appsToUnload</code>中的微应用的执行流程有很多的相似之处，本文不再赘述。</p><h1 id="performappchanges" tabindex="-1"><a class="header-anchor" href="#performappchanges" aria-hidden="true">#</a> performAppChanges</h1><p>从上文的分析中，我们知道了各个微应用所处的状态，以及接下来会执行什么样的逻辑。但这些对这些微应用进行处理的时候，有什么样的先后顺序呢，请大家进入<code>performAppChange</code>函数中。</p><h2 id="核心逻辑" tabindex="-1"><a class="header-anchor" href="#核心逻辑" aria-hidden="true">#</a> 核心逻辑</h2><p>请先看函数<code>performAppChanges</code>的核心逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段7</span>
<span class="token keyword">function</span> <span class="token function">performAppChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 此处省略许多代码...</span>
      <span class="token keyword">const</span> unloadPromises <span class="token operator">=</span> appsToUnload<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toUnloadPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> unmountUnloadPromises <span class="token operator">=</span> appsToUnmount
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toUnmountPromise<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">unmountPromise</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> unmountPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>toUnloadPromise<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> allUnmountPromises <span class="token operator">=</span> unmountUnloadPromises<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>unloadPromises<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> unmountAllPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>allUnmountPromises<span class="token punctuation">)</span><span class="token punctuation">;</span>

      unmountAllPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略许多代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 此处省略许多代码...</span>
      <span class="token keyword">return</span> unmountAllPromise
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">callAllEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">callAllEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 此处省略许多代码...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略的代码也很重要，主要是自定义事件的派发，因为过于冗长影响阅读体验先在代码片段<strong>7</strong>中省略了。总体来看该函数主要做了三件事情：<strong>一</strong>是执行卸载逻辑；<strong>二</strong>是执行完卸载逻辑后,再执行相关挂载逻辑；<strong>三</strong>是在不同阶段派发自定义事件。关于卸载、挂载的实现逻辑和上文分析过的<code>toUnloadPromise</code>很相似，故不在本文赘述。下文主要讲一讲里面的<code>callAllEventLiseners</code>函数和<code>single-spa</code>中的自定义事件。</p><h2 id="callalleventlisteners" tabindex="-1"><a class="header-anchor" href="#callalleventlisteners" aria-hidden="true">#</a> callAllEventListeners</h2>`,33),Q=s("code",null,"performAppChanges",-1),X=s("code",null,"callAllEventListeners",-1),Y=s("code",null,"hashchange、popstate",-1),Z=s("code",null,"reroute",-1),$=s("code",null,"hashchange、popstate",-1),nn=s("code",null,"reroute",-1),sn=s("code",null,"hashchange、popstate",-1),an=o(`<h2 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><p>代码片段<strong>7</strong>中省略了很多形如下面所示的事件派发自定义事件的相关逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span>
        appsThatChanged<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
        <span class="token operator">?</span> <span class="token string">&quot;single-spa:before-no-app-change&quot;</span>
        <span class="token operator">:</span> <span class="token string">&quot;single-spa:before-app-change&quot;</span><span class="token punctuation">,</span>
        <span class="token function">getCustomEventDetail</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),pn=s("code",null,"runAfterFirstMounted",-1),tn=s("code",null,"single-spa",-1),on=s("code",null,"runAfterFirstMounted",-1),en=s("code",null,"single-spa",-1),cn=s("strong",null,"7",-1),ln={href:"https://single-spa.js.org/docs/api/#unloadapplication",target:"_blank",rel:"noopener noreferrer"},un=s("p",null,[n("欢迎关注"),s("code",null,"微信公众号：杨艺韬"),n("，可以获取最新动态。")],-1);function dn(rn,kn){const p=e("RouterLink"),c=e("ExternalLinkIcon");return i(),u("div",null,[k,s("blockquote",null,[s("p",null,[n("前面在"),a(p,{to:"/microfe/07.%E5%AF%B9single-spa%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%8F%8A%E5%BE%AE%E5%BA%94%E7%94%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E5%88%86%E6%9E%90.html"},{default:t(()=>[n("微前端07 : 对single-spa的路由管理及微应用状态管理的分析")]),_:1}),n("提到过，"),v,n("函数非常重要，因为无论是注册应用还是在"),m,n("、"),b,n("事件被触发，都会调用这个函数。事实上，"),h,n("对微应用进行"),g,n("、"),_,n("、"),f,n("、"),A,n("的时候，都主要是在这个函数中执行的相关逻辑。本文将会带着大家走进"),E,n("函数，从源码层面理解"),T,n("是如何对微应用进行管理的。写完本文，对微前端的相关分析就暂时告一段落，至于对市面上其他主流微前端框架的分析，以及实现一个生产环境可用的微前端框架，在我完成"),w,n("、"),y,n("、"),U,n("、"),O,n("、"),P,n("等目前市面上的核心框架和工具的源码进行深入的分析后，再一步步带着大家实现一个生产环境可用的微前端框架。之所以这样安排，是因为如果选择使用微前端，实际上选择的一套对应的技术方案，我们在把一些主流核心框架和工具的源码进入深入分析后，后续编写相关配套的基础设施，大家才能更彻底的理解为什么代码要这样写，而不是那样写，知其然还知其所以然。这也是我做源码探究的愿望，帮助大家不再畏惧源码，而是将这些内容融入到血液中，提升工作效率和学习效率，将更多时间投入到有价值的事情上去。无论如何，源码探究是高阶开发者锤炼基本功不可逾越的门槛。好了，现在就正式进入到"),N,n("函数中去吧。")])]),s("p",null,[n("在开始本文之前，我们将"),a(p,{to:"/microfe/07.%E5%AF%B9single-spa%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%8F%8A%E5%BE%AE%E5%BA%94%E7%94%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E5%88%86%E6%9E%90.html"},{default:t(()=>[n("微前端07 : 对single-spa的路由管理及微应用状态管理的分析")]),_:1}),n("中的微应用状态切换流程图放到这里，方便大家阅读本文的时候进行回顾： "),D]),L,s("p",null,[n("该函数原本有将近"),x,n("行代码，我们在这里对其进行了大量精简。从代码片段"),B,n("中可以看出，该函数主要完成了两项工作。"),C,n("是通过函数"),j,n("获取在"),I,n("注册过的微应用，并用四个数组变量来区分这些微应用下一步将会做什么处理以及进入什么状态。"),R,n("是根据"),S,n("的返回值进行判断，如果已经调用过"),M,n("暴露的"),F,n("函数，则调用"),q,n("函数根据"),G,n("函数的返回值对微应用进行相应的处理，并改变相应的状态。如果微调用过"),V,n("函数，则调用"),K,n("函数执行加载操作，关于"),W,n("我们已经在"),a(p,{to:"/microfe/06.single-spa%E7%9A%84%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6.html"},{default:t(()=>[n("微前端06 : single-spa的注册机制")]),_:1}),n("一文进行讨论过，本文不再赘述。下面对"),z,n("、"),H,n("分别进行介绍。")]),J,s("p",null,[n("还记得我们在"),a(p,{to:"/microfe/07.%E5%AF%B9single-spa%E7%9A%84%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%8F%8A%E5%BE%AE%E5%BA%94%E7%94%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E5%88%86%E6%9E%90.html"},{default:t(()=>[n("微前端07 : 对single-spa的路由管理及微应用状态管理的分析")]),_:1}),n("提到过，将注册的hashchange、popstate事件保存在数组中了，并未调用原始的监听事件注册逻辑，"),Q,n("中调用"),X,n("的位置就是触发这些保存在数组中的事件的合适时机。因为该函数的调用，处于所有需要卸载的微应用彻底卸载完成的位置或者注册应用时候应用加载完成。实际上这里面有一个隐藏的逻辑在里面，默认情况下触发"),Y,n("事件马上就会执行"),Z,n("函数，换句话说"),$,n("事件触发后，先执行"),nn,n("函数对微应用进行处理，当卸载了该卸载的应用才批量执行后续注册的"),sn,n("事件。事实上，这里的卸载并不一定真的卸载，因为可能路由的变化并不需要切换微应用。这样当前微应用注册的路由事件就可以触发。如果当前微应用需要被切换，就触发注册的微应用就相当于清空保存在数组中的事件。同理，在注册微应用的时候，微应用加载完成后，也应该触发保存到数组中的监听事件。")]),an,s("p",null,[n("我不准备详细对每一个事件进行介绍，这里提出来，是因为我们在乾坤中有个api"),pn,n("，实际上就是监听"),tn,n("提供的自定义事件，事件触发后，再执行"),on,n("传入的函数参数。"),en,n("中有"),cn,n("个自定义监听事件，朋友们可以查阅"),s("a",ln,[n("single-spa API文档"),a(c)]),n("，再去源码中看对应逻辑即可，就不在本文赘述了。")]),un])}const mn=l(r,[["render",dn],["__file","08.single-spa中的reroute函数.html.vue"]]);export{mn as default};
