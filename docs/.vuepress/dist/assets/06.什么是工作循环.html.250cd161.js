import{_ as n,o as s,c as a,f as p}from"./app.03bf752b.js";const t={},e=p(`<h1 id="什么是工作循环" tabindex="-1"><a class="header-anchor" href="#什么是工作循环" aria-hidden="true">#</a> 什么是工作循环</h1><p>在 React 18 中，工作循环（work loop）是指 React 内部处理更新和渲染任务的主要过程。工作循环可以分为两个主要阶段：协调（Reconciliation）和提交（Commit）。协调阶段负责计算新的组件状态和虚拟 DOM，而提交阶段负责将新的虚拟 DOM 应用到实际的 DOM 上。</p><ul><li><p>协调阶段（Reconciliation）： 当一个组件的状态或属性发生变化时，React 会触发协调过程。 在这个过程中，React 会比较新旧两个组件树（虚拟 DOM 树）之间的差异，以确定需要进行的更新。 为了提高性能，React 会将任务拆分成较小的工作单元，并在浏览器的空闲时间执行这些任务。这种调度策略避免了长时间阻塞主线程，从而提高了用户体验。</p></li><li><p>提交阶段（Commit）： 当协调阶段完成后，React 会进入提交阶段。 在这个阶段，React 会将计算出的 DOM 更新应用到实际的 DOM 树上。 由于这个阶段可能会导致 UI 的更新，React 会在浏览器的一个连续帧中完成整个提交过程，以避免卡顿现象。</p></li></ul><p>我们用代码来简单示意一下，注意这里不是手写的React18代码，只是一个原理示范，和真实的源码实现差别很大：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一个简化的虚拟 DOM 结构</span>
<span class="token keyword">const</span> vDOM1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> vDOM2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 一个简化的比较函数，用于计算需要应用的 DOM 更新</span>
<span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span><span class="token parameter">oldVDOM<span class="token punctuation">,</span> newVDOM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在这里，我们会比较 oldVDOM 和 newVDOM，然后返回一个包含 DOM 更新的对象。</span>
  <span class="token comment">// 在这个简化的示例中，我们直接返回一个预定义的更新对象。</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;UPDATE_TEXT&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工作循环</span>
<span class="token keyword">function</span> <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 协调阶段（Reconciliation）：计算需要进行的 DOM 更新</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>vDOM1<span class="token punctuation">,</span> vDOM2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 2. 提交阶段（Commit）：将 DOM 更新应用到实际的 DOM 树上</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;UPDATE_TEXT&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    update<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent <span class="token operator">=</span> update<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 在这个简化的示例中，我们只执行一次工作循环。</span>
  <span class="token comment">// 实际上，React 的工作循环会在整个应用的生命周期中反复执行。</span>
<span class="token punctuation">}</span>

<span class="token comment">// 启动工作循环</span>
<span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次强调，这个示例并不真实反映 React 内部的实际实现，因为 React 的工作循环要复杂得多，并且包含许多性能优化和特性。但是确实能体现一些基本情况。因为最本质的逻辑确实是这样。</p>`,6),o=[e];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","06.什么是工作循环.html.vue"]]);export{u as default};
