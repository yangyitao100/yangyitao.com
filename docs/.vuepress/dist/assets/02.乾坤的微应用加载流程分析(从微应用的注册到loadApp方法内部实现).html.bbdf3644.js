import{_ as l,r as e,o as i,c as u,b as s,d as n,e as a,w as o,f as p}from"./app.4326c516.js";const r="/assets/02-01.a6c82036.webp",k="/assets/02-02.0fe5f7c4.webp",d={},v=s("h1",{id:"_02-乾坤的微应用加载流程分析-从微应用的注册到loadapp方法内部实现",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_02-乾坤的微应用加载流程分析-从微应用的注册到loadapp方法内部实现","aria-hidden":"true"},"#"),n(" 02.乾坤的微应用加载流程分析(从微应用的注册到loadApp方法内部实现)")],-1),m=s("strong",null,"single-spa",-1),b=s("strong",null,"single-spa",-1),g=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乾坤的微应用加载流程主要触发场景包括下面四个：</p><ul><li>通过<code>registerMicroApps</code>注册微应用</li><li>通过<code>loadMicroApp</code>手动加载微应用</li><li>调用<code>start</code>时触发了预加载逻辑</li><li>手动调用<code>prefetchApps</code>执行预加载</li></ul>`,3),y=s("code",null,"src/loaser.ts",-1),h=s("code",null,"loadApp",-1),f=s("code",null,"loadApp",-1),w=s("code",null,"loadApp",-1),E=p('<h1 id="乾坤的微应用注册流程" tabindex="-1"><a class="header-anchor" href="#乾坤的微应用注册流程" aria-hidden="true">#</a> 乾坤的微应用注册流程</h1><p>请先看下图：</p><p><img src="'+r+`" alt="乾坤微应用注册流程.png"> 从图中我们可以看出两个重要的点，分别对应流程图中的第4步和第5步：</p><ul><li>微应用的注册，实际上发生在<strong>single-spa</strong>中</li><li>子应用暴露的生命周期函数，由乾坤提供的函数参数返回</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段一，所属文件: src/apis.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> registerMicroApps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RegistrableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里省略了其他代码...</span>
  unregisteredApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> activeRule<span class="token punctuation">,</span> loader <span class="token operator">=</span> noop<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>
    <span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//关键点1</span>
      name<span class="token punctuation">,</span>
      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 关键点2</span>
        <span class="token comment">// 这里省略了其他代码...</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
          <span class="token comment">// 关键点4</span>
          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token comment">// 关键点3</span>
          <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">toArray</span><span class="token punctuation">(</span>mount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token operator">...</span>otherMicroAppConfigs<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">activeWhen</span><span class="token operator">:</span> activeRule<span class="token punctuation">,</span>
      <span class="token literal-property property">customProps</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们先了解上面代码片段中的一些关键信息：</p><h2 id="关于single-spa在这里发挥的作用" tabindex="-1"><a class="header-anchor" href="#关于single-spa在这里发挥的作用" aria-hidden="true">#</a> 关于single-spa在这里发挥的作用</h2><p>从上面代码片段中的<strong>关键点1</strong>处可以直观的看出，真正发起注册微应用的方法是<code>registerApplication</code>方法，而该方法是从<strong>single-spa</strong>中导入的。这映照了我们前面说过的，乾坤是建立在<strong>single-spa</strong>之上的。大家想一想，如果没有乾坤，直接使用<strong>single-spa</strong>是不是也可以让我们的项目具备接入微应用的能力呢？答案是肯定的。只不过乾坤在这里进行的资源加载以及资源隔离工作需要我们自己编码实现。到这里大家会不会有所启发，增强那些成熟但不够强大的开源库，可以让我们事半功倍，既避免重复又提高了工作效率。同时这也为那些想参与开源贡献但又无从下手的朋友，提供了一个思路。</p><h2 id="关于微应用加载函数的返回值" tabindex="-1"><a class="header-anchor" href="#关于微应用加载函数的返回值" aria-hidden="true">#</a> 关于微应用加载函数的返回值</h2><p>上面代码片段中注释<strong>关键点2</strong>处指示的微应用加载函数，对应了流程图中的<strong>第5步</strong>，最核心的逻辑是代码注释<strong>关键点4</strong>所指示的<code>loadApp</code>方法（其他逻辑我们先忽略暂不关心，本文后续部分会在恰当的时机提到）。上文流程图中的<strong>第5步</strong>，对应上文代码片段中的<strong>关键点3</strong>。当<strong>关键点2</strong>处的app方法执行，返回了<strong>关键点3</strong>处的对象，该对象包括了<code>mount、name、bootstrap、unmount</code>等属性，这些属性其实就是<strong>single-spa</strong>注册微应用时候所需要的内容，因为<strong>single-spa</strong>中所谓的注册微应用，本质上就是获取微应用暴露的相关生命周期方法，在后续程序运转过程中，通过控制这些生命周期方法，进而实现对微应用的控制。</p><p>接下来，我们就把目光投向<code>loadApp</code>内部中去，微应用的加载，核心逻辑都在这里，这也是本文的主题，请看下文。</p><h1 id="loadapp的内部实现" tabindex="-1"><a class="header-anchor" href="#loadapp的内部实现" aria-hidden="true">#</a> loadApp的内部实现</h1><h2 id="loadapp的主体流程" tabindex="-1"><a class="header-anchor" href="#loadapp的主体流程" aria-hidden="true">#</a> loadApp的主体流程</h2><p>请先简单看一下流程图：</p><p><img src="`+k+`" alt="乾坤资源加载流程.png"></p><p>从图中可以看出，<code>loadApp</code>内部逻辑比较复杂，在忽略一些细节的情况下，大体上有<strong>11</strong>个主要步骤。由于图中的流程是代码执行流程，初次阅读可能不容易理解，但不要紧，下面的章节会结合代码逐步进行解析其中的细节。在深入细节之前，请大家要明白<code>loadApp</code>的核心功能：那就是获取微应用的<strong>js/css/html</strong>等资源，并对这些资源进行加工，随后会构造和执行一生命周期中需要执行的方法，最终返回一个函数，而这个函数的返回值是一个对象，该对象包括了微应用的生命周期方法。有了这个最基本的认识，我们就可以进行下面的详细解读了。</p><h2 id="loadapp中值得关注的细节" tabindex="-1"><a class="header-anchor" href="#loadapp中值得关注的细节" aria-hidden="true">#</a> loadApp中值得关注的细节</h2><h3 id="关于获取微应用资源的方法" tabindex="-1"><a class="header-anchor" href="#关于获取微应用资源的方法" aria-hidden="true">#</a> 关于获取微应用资源的方法</h3><p>关于微应用资源的获取，对应流程图中的<strong>第3步</strong>，具体功能实现依赖了库<code>import-html-entry</code>中的<code>importEntry</code>函数，这个函数解决了两个问题，<strong>一</strong>是如何把资源获取到本地，<strong>二</strong>是如何将这些进行恰当处理以满足实际需要。关于这个库的具体实现，如何获取资源，如何处理资源，我会在后续出一篇单独的文章进行讲解，敬请朋友们期待。调用该函数的对应代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 代码片段二，对应文件：src/loader.ts</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> template<span class="token punctuation">,</span> execScripts<span class="token punctuation">,</span> assetPublicPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * 先对这几个变量有个简单的了解，后续在合适的地方会详细介绍
   * template: 一个字符串，内部包含了html、css资源
   * execScripts：一个函数，执行该函数后会返回一个对象
   * assetPublicPath：访问页面远程资源的相对路径
   * /
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将获取到的template-涉及html-css-转化成dom节点" tabindex="-1"><a class="header-anchor" href="#将获取到的template-涉及html-css-转化成dom节点" aria-hidden="true">#</a> 将获取到的template(涉及html/css)转化成DOM节点</h3><p>代码片段二中我们提到，<code>template</code>是一个字符串，为什么是一个字符串呢，其实很简单，资源以字节流的形式从网络上到达本地后只能转化成字符串进行处理。我们这里需要把字符串转化成具体可用的Dom节点。那怎么转化？具体代码涉及两部分：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段三，对应文件：src/loader.ts</span>
<span class="token keyword">const</span> appContent <span class="token operator">=</span> <span class="token function">getDefaultTplWrapper</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">initialAppWrapperElement</span><span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
    appContent<span class="token punctuation">,</span>
    strictStyleIsolation<span class="token punctuation">,</span>
    scopedCSS<span class="token punctuation">,</span>
    appInstanceId<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段四，对应文件：src/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getDefaultTplWrapper</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">tpl</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div id=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getWrapperId</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; data-name=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; data-version=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tpl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段三中的<code>appContent</code>对应流程图中第<strong>4</strong>步提到的<code>appContent</code>。代码片段中三中的<code>initialAppWrapperElement</code>就是流程图中第<strong>5</strong>步提到的DOM元素<code>initialAppWrapperElement</code>。从代码中可以看出，函数<code>getDefaultTplWrapper</code>中对获取到的<code>template</code>外层包裹一个<code>div</code>，在该<code>div</code>上设置<code>id、data-name、data-version</code>等属性。为什么要包裹这样一个标签呢？在我看来有两个好处，<strong>第一</strong>是能够保证<code>template</code>转化为DOM节点后的根节点只有一个，这样将来对微应用挂载、卸载等操作的时候能够保证准确性；<strong>第二</strong>是在该标签上设置具有标识性的属性，可以避免与微应用原有的根元素上的属性冲突。</p><blockquote><p>有没有发现这里的<code>getDefaultTplWrapper</code>方法实际上什么都没做，只是返回了一个函数，那这样的意义是什么呢，这种机制可以避免反复传递参数<code>name</code>。其实这是一个我们在日常编写代码的过程中可以借鉴的点，在需要频繁传递的某些参数而这些参数又不经常变化的情况下，特别是还要对这些参数进行处理的情况下，可以通过这种方式对程序进行优化。一方面可以让调用函数的时候参数更精简，同时也避免了重复对这些参数进行处理。这就是我们常常说的函数的颗粒化，很好地利用了闭包的机制。说到这，我想表达一个自己由来已久的观点：<strong>世界上没有技术高手，只有基本功扎实的开发者</strong>。我把这句话分享给大家，希望和大家一道夯实基础，在技术的道路上越走越远。</p></blockquote><p>接下来，我们如何将字符串<code>appContent</code>转化成DOM节点<code>initialAppWrapperElement</code>呢，这有赖于片段三中的所示的<code>createElement</code>方法，该方法代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段四，所属文件：src/loader.ts</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">appContent</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">strictStyleIsolation</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">appInstanceId</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> HTMLElement <span class="token punctuation">{</span>
  <span class="token keyword">const</span> containerElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  containerElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> appContent<span class="token punctuation">;</span>
  <span class="token comment">// appContent always wrapped with a singular div</span>
  <span class="token keyword">const</span> appElement <span class="token operator">=</span> containerElement<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
  <span class="token comment">// 省略了其他代码...</span>
  <span class="token keyword">return</span> appElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段四中的关键是，先创建一个空<code>div</code>，名为<code>containerElement</code>，然后将其内容设置为上文提到的<code>appContent</code>，再获取<code>containerElement</code>的第一个子元素，作为将要返回的DOM元素，当然还需要对这个DOM元素进行一些处理，这里省略了相关代码。这样做有什么作用呢，看见上面的那行注释<code>appContent always wrapped with a singular div</code>。其实就是如果<code>appContent</code>有多个根节点，那么这里只会获取和应用第一个节点。如果在日常代码编写过程中有相同的场景，我认为可以直接复用这三行代码。</p><h3 id="css资源的处理和隔离方法" tabindex="-1"><a class="header-anchor" href="#css资源的处理和隔离方法" aria-hidden="true">#</a> css资源的处理和隔离方法</h3><p>代码片段四中省略了下面这几行代码。这几行代码的作用是对<code>appElement</code>中的<strong>style</strong>进行处理，限于篇幅，具体怎么处理这些<strong>style</strong>我们这里先不关心，后续我们用专门的文章来进行详细解析，敬请朋友们期待。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>scopedCSS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> attr <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>css<span class="token punctuation">.</span>QiankunCSSRewriteAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      appElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>css<span class="token punctuation">.</span>QiankunCSSRewriteAttr<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> styleNodes <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">forEach</span><span class="token punctuation">(</span>styleNodes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">stylesheetElement</span><span class="token operator">:</span> HTMLStyleElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      css<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>appElement<span class="token operator">!</span><span class="token punctuation">,</span> stylesheetElement<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于shadow-dom的陷阱" tabindex="-1"><a class="header-anchor" href="#关于shadow-dom的陷阱" aria-hidden="true">#</a> 关于shadow dom的陷阱</h3><p>其实在代码片段四中还省略了下面几行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>strictStyleIsolation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportShadowDOM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">&#39;[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> innerHTML <span class="token punctuation">}</span> <span class="token operator">=</span> appElement<span class="token punctuation">;</span>
      appElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> <span class="token literal-property property">shadow</span><span class="token operator">:</span> ShadowRoot<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>appElement<span class="token punctuation">.</span>attachShadow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shadow <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// createShadowRoot was proposed in initial spec, which has then been deprecated</span>
        shadow <span class="token operator">=</span> <span class="token punctuation">(</span>appElement <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createShadowRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      shadow<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerHTML<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几行代码的主要功能，就是如果是严格的样式隔离，那么就判断当前环境是否支持<strong>shadow dom</strong>，在支持<strong>shadow dom</strong>的情况下，则将元素绑定到<strong>shadow dom</strong>上。至于<strong>shadow dom</strong>是什么，限于篇幅不在这里解释。如果有朋友查阅资料后还是不清楚可以留言交流。不过这里需要指出的是，<strong>shadow dom</strong>虽然可以做到很好的隔离，但是有个问题需要大家关注。那就是元素在<strong>shadow dom</strong>中是自治的，外界无法影响。但如果该元素挂载到了<strong>shadow dom</strong>外部，则无法正常运行。比如React中的很多弹框，都是直接挂载到<code>body</code>上的，那这种情况下就要采取措施进行规避。乾坤在关于start方法到api文档中提到了下面内容：</p>`,36),A={href:"https://github.com/facebook/react/issues/10422",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"strictStyleIsolation",-1),_=s("code",null,"qiankun",-1),C=s("code",null,"ShadowDOM",-1),j=p(`<h3 id="关于函数initialappwrappergetter" tabindex="-1"><a class="header-anchor" href="#关于函数initialappwrappergetter" aria-hidden="true">#</a> 关于函数initialAppWrapperGetter</h3><p>该函数存在于，流程图中的第<strong>6</strong>步和第<strong>7</strong>步之间。朋友们有没有觉得奇怪，我们上文已经得到了微应用的DOM元素<code>initialAppWrapperElement</code>，为什么又出现一个函数来获取微应用的DOM元素？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段五，所属文件：src/loader.ts</span>
  <span class="token keyword">const</span> initialAppWrapperGetter <span class="token operator">=</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span>
    appInstanceId<span class="token punctuation">,</span>
    <span class="token operator">!</span><span class="token operator">!</span>legacyRender<span class="token punctuation">,</span>
    strictStyleIsolation<span class="token punctuation">,</span>
    scopedCSS<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> initialAppWrapperElement<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** generate app wrapper dom getter */</span>
<span class="token keyword">function</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span>
  <span class="token literal-property property">appInstanceId</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">useLegacyRender</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">strictStyleIsolation</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token function-variable function">elementGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>useLegacyRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略一些代码...</span>
      <span class="token keyword">const</span> appWrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token function">getWrapperId</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 省略一些代码...</span>
      <span class="token keyword">return</span> appWrapper<span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">elementGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 省略一些代码</span>
    <span class="token keyword">return</span> element<span class="token operator">!</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码片段五中，我们其实可以看到之所以存在这个<code>getAppWrapperGetter</code>方法，是为了兼容过去可以自定义渲染函数的机制，这里我们先不提这个渲染机制，可以简单理解为把一个DOM节点挂载到某个DOM节点上。这也提醒我们，在设计一个系统的时候一定要慎重，否则为了兼容低版本能正常运行，而不得不经常做一些类似的兼容措施。如果乾坤一开始就没有设计这个<code>legacyRender</code>这种机制，那么<code>getAppWrapperGetter</code>也就没有存在的必要，整个系统的程序可读性和易用性都会提升。当然乾坤作为一个优秀的微前端框架，也是逐步在发展进化，兼容低版本的行为难以避免。</p><h3 id="沙箱机制的应用" tabindex="-1"><a class="header-anchor" href="#沙箱机制的应用" aria-hidden="true">#</a> 沙箱机制的应用</h3><p>我们在上一篇文章分析了乾坤中的三种沙箱机制的核心原理。但是只了解原理还不够，我们还得在程序中具体使用才能发挥作用。鉴于对沙箱的具体应用涉及的代码还不少，不方便在本文进行详细阐述。我会在后续单独写一篇文章进行解析。这里只做简要介绍，涉及代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段六，所属文件：src/loader.ts</span>
<span class="token keyword">let</span> global <span class="token operator">=</span> globalContext<span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">mountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">unmountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> useLooseSandbox <span class="token operator">=</span> <span class="token keyword">typeof</span> sandbox <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>sandbox<span class="token punctuation">.</span>loose<span class="token punctuation">;</span>
  <span class="token keyword">let</span> sandboxContainer<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sandboxContainer <span class="token operator">=</span> <span class="token function">createSandboxContainer</span><span class="token punctuation">(</span>
      appInstanceId<span class="token punctuation">,</span>
      <span class="token comment">// FIXME should use a strict sandbox logic while remount, see https://github.com/umijs/qiankun/issues/518</span>
      initialAppWrapperGetter<span class="token punctuation">,</span>
      scopedCSS<span class="token punctuation">,</span>
      useLooseSandbox<span class="token punctuation">,</span>
      excludeAssetFilter<span class="token punctuation">,</span>
      global<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    global <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>proxy <span class="token keyword">as</span> <span class="token keyword">typeof</span> window<span class="token punctuation">;</span>
    mountSandbox <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>mount<span class="token punctuation">;</span>
    unmountSandbox <span class="token operator">=</span> sandboxContainer<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分代码在流程图中第<strong>6</strong>步和第<strong>7</strong>步之间。我认为里面最核心的那行代码是<code>global = sandboxContainer.instance.proxy as typeof window;</code>，因为后续该微应用中进行的操作，都是这个沙箱容器中的沙箱代理对象在发挥作用。详细内容后续新文章进行解析，这里只是先提到一下，大概有个印象，如果不理解沙箱容器、沙箱代码对象这些名词也没关系，可以先跳过。</p><h3 id="一些生命周期中需要执行的函数" tabindex="-1"><a class="header-anchor" href="#一些生命周期中需要执行的函数" aria-hidden="true">#</a> 一些生命周期中需要执行的函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段七，所属文件：src/loader.ts</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  beforeUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  afterUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  afterMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  beforeMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  beforeLoad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAddOns</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> assetPublicPath<span class="token punctuation">)</span><span class="token punctuation">,</span> lifeCycles<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">concat</span><span class="token punctuation">(</span>v1 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段七，对应流程图中的第<strong>7</strong>步，这些数组对象<code>beforeUnmount、afterUnmount、afterMount、beforeMount、beforeLoad</code>中会保存很多函数，这些函数会放到某些合适的时机去执行。那什么是合适的时机呢？上文我们提到过，微应用会暴露生命周期方法，<strong>single-spa</strong>会通过调用这些生命周期方法来控制微应用的状态。代码片段七中的这些方法，就会放到生命周期方法中去，本文在后续部分会再次提到。至于这里的<code>mergeWith、getAddOns</code>方法的具体执行和内容，因为里面内容不太多，朋友们可以自行阅读，如果阅读后有不理解的内容，可以留言沟通。</p><h3 id="关于数组的reduce方法的妙用-exechookschain" tabindex="-1"><a class="header-anchor" href="#关于数组的reduce方法的妙用-exechookschain" aria-hidden="true">#</a> 关于数组的reduce方法的妙用：execHooksChain</h3><p>代码片段七执行完后，紧接着有一行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeLoad<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们先不关心<code>beforeLoad</code>中具体有哪些方法，具体有哪些方法由代码片段七决定。我们现在只看<code>execHooksChain</code>这个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段八，所属文件：src/loader.ts</span>
<span class="token keyword">function</span> execHooksChain<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">hooks</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>LifeCycleFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">app</span><span class="token operator">:</span> LoadableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  global <span class="token operator">=</span> window<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hooks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> hooks<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chain<span class="token punctuation">,</span> hook</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">hook</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里巧妙的利用了数组的<code>reduce</code>函数，试想如果不这样写应该怎么做实现相同的功能呢，我想应该是这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段九</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">await</span> hooks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现相同功能，其实两种方式都可以，朋友们可以自行选用，但如果基础不扎实，对<code>reduce</code>方法了解的不那么清楚，可能第一次读相关代码会比较吃力，我写的代码片段九，可以帮助基础不扎实的朋友理解代码片段八实现的功能。</p><h3 id="微应用加载完成后的返回值" tabindex="-1"><a class="header-anchor" href="#微应用加载完成后的返回值" aria-hidden="true">#</a> 微应用加载完成后的返回值</h3><p>微应用加载流程执行完成返回的是一个函数，如代码所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token literal-property property">parcelConfigGetter</span><span class="token operator">:</span> <span class="token function-variable function">ParcelConfigObjectGetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">remountContainer <span class="token operator">=</span> initialContainer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略相关代码</span>
    <span class="token keyword">const</span> <span class="token literal-property property">parcelConfig</span><span class="token operator">:</span> ParcelConfigObject <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略相关代码</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> parcelConfig<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可能第一反应是，既然加载完成了，为什么不直接返回相关内容，反而返回一个函数呢？其实答案就在这个函数的参数<code>remountContainer</code>里面，因为这个返回的对象实际上就是<strong>single-spa</strong>需要的微应用暴露的的生命周期函数。我们知道微应用的生命周期方法中有<code>mount</code>，我们的微应用最终要挂载到某个地方去，正常情况下就是用户注册微应用时候传入的<code>container</code>参数。但是如果注册完成后，微应用需要挂载到别的地方去怎么办呢，因此这里返回值就是一个函数，而非直接返回对象。</p><h3 id="parcelconfiggetter的返回对象" tabindex="-1"><a class="header-anchor" href="#parcelconfiggetter的返回对象" aria-hidden="true">#</a> parcelConfigGetter的返回对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">parcelConfig</span><span class="token operator">:</span> ParcelConfigObject <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> appInstanceId<span class="token punctuation">,</span>
      bootstrap<span class="token punctuation">,</span>
      <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> marks <span class="token operator">=</span> <span class="token function">performanceGetEntriesByName</span><span class="token punctuation">(</span>markName<span class="token punctuation">,</span> <span class="token string">&#39;mark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// mark length is zero means the app is remounting</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>marks <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>marks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">performanceMark</span><span class="token punctuation">(</span>markName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> prevAppUnmountedDeferred<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// initial wrapper element before app mount/remount</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          appWrapperElement <span class="token operator">=</span> initialAppWrapperElement<span class="token punctuation">;</span>
          appWrapperGetter <span class="token operator">=</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span>
            appInstanceId<span class="token punctuation">,</span>
            <span class="token operator">!</span><span class="token operator">!</span>legacyRender<span class="token punctuation">,</span>
            strictStyleIsolation<span class="token punctuation">,</span>
            scopedCSS<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> appWrapperElement<span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 添加 mount hook, 确保每次应用加载前容器 dom 结构已经设置完毕</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> useNewContainer <span class="token operator">=</span> remountContainer <span class="token operator">!==</span> initialContainer<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>useNewContainer <span class="token operator">||</span> <span class="token operator">!</span>appWrapperElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// element will be destroyed after unmounted, we need to recreate it if it not exist</span>
            <span class="token comment">// or we try to remount into a new container</span>
            appWrapperElement <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>appContent<span class="token punctuation">,</span> strictStyleIsolation<span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">syncAppWrapperElement2Sandbox</span><span class="token punctuation">(</span>appWrapperElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">element</span><span class="token operator">:</span> appWrapperElement<span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;mounting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        mountSandbox<span class="token punctuation">,</span>
        <span class="token comment">// exec the chain after rendering to keep the behavior with beforeLoad</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token function">appWrapperGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setGlobalState<span class="token punctuation">,</span> onGlobalStateChange <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// finish loading after app mounted</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">element</span><span class="token operator">:</span> appWrapperElement<span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// initialize the unmount defer after app mounted and resolve the defer after it unmounted</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prevAppUnmountedDeferred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> measureName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[qiankun] App </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>appInstanceId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Loading Consuming</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token function">performanceMeasure</span><span class="token punctuation">(</span>measureName<span class="token punctuation">,</span> markName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">unmount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token function">appWrapperGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        unmountSandbox<span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> remountContainer <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;unmounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">offGlobalStateChange</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// for gc</span>
          appWrapperElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token function">syncAppWrapperElement2Sandbox</span><span class="token punctuation">(</span>appWrapperElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prevAppUnmountedDeferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现这个返回的对象有很多内容，但是我们可以从宏观的视角来看，该对象只有<strong>4</strong>个属性，<code>name、bootstrap、mount、unmount</code>，没错这正是<strong>single-spa</strong>需要微应用暴露的生命周期函数。后续就是通过执行对应生命周期函数而控制微应用。因为这里相当于微应用加载的最终结果，汇聚了大量其他逻辑产生了这样一个结果对象。我不打算立即对这些函数进行逐一解析，因为内容比较零碎，如果逐一讲解不利于大家理解。所以后续文章会先逐个介绍本文尚未详细介绍的部分，在比较全面的了解乾坤后，我们会深入到<strong>single-spa</strong>，那时候会用到这些方法，我们再找合适的机会来详细讲解这里的众多方法。</p><h3 id="关于promise的妙用-deferred" tabindex="-1"><a class="header-anchor" href="#关于promise的妙用-deferred" aria-hidden="true">#</a> 关于Promise的妙用：Deferred</h3><p>此时<code>loadApp</code>已经执行完成，返回了一个函数<code>parcelConfigGetter</code>，我们把视野移动到调用<code>loadApp</code>的地方，也就是本文的代码片段一。但代码片段一省略了我现在要讲的代码，请看这里：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略代码...</span>
        <span class="token keyword">await</span> frameworkStartedDefer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 省略代码....</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有没有觉得有行代码很奇怪，那就是<code>await frameworkStartedDefer.promise;</code>，其实这行代码是与下面的代码片段配合使用的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 所属文件：src/apis.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opts</span><span class="token operator">:</span> FrameworkConfiguration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略了其他代码...</span>
  frameworkStartedDefer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那这个<code>frameworkStartedDefer</code>到底是什么呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 所属文件：src/apis.ts</span>
<span class="token keyword">const</span> frameworkStartedDefer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 所属文件：src/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">promise</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  resolve<span class="token operator">!</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> PromiseLike<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  reject<span class="token operator">!</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">reason<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过控制一个<code>Promise</code>的<code>resolve</code>和<code>reject</code>方法，来控制分属于两个不同方法中代码的执行顺序，很巧妙。在日常开发中如果有类似场景，可以借鉴。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><p>本文介绍了乾坤微应用的注册流程，并由微应用的注册流程，引出了微应用的加载流程，我们对微应用的加载流程中的一些关键的环节进行了剖析。由于还有些细节的内容较多，难以在本文全部展开介绍，我将会在以新的文章的形式来具体剖析，敬请读者朋友们期待。朋友们也可对自己感兴趣的点在留言区提出来，我将在后续的文章中考虑呈现相关主题的内容。</p><p>欢迎关注我的<code>微信订阅号</code>：<code>杨艺韬</code>，可以获取我的最新动态。</p>`,37);function S(I,M){const t=e("RouterLink"),c=e("ExternalLinkIcon");return i(),u("div",null,[v,s("blockquote",null,[s("p",null,[n("我们在"),a(t,{to:"/microfe/01.%E4%B9%BE%E5%9D%A4%E7%9A%84Js%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%EF%BC%88%E5%BF%AB%E7%85%A7%E6%B2%99%E7%AE%B1%E3%80%81%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E6%B2%99%E7%AE%B1%EF%BC%89.html"},{default:o(()=>[n("微前端01 : 乾坤的Js隔离机制原理剖析（快照沙箱、两种代理沙箱）")]),_:1}),n("一文中提到过，乾坤建立在"),m,n("的基础上，相对于"),b,n("，乾坤主要完成了两件事，微应用的加载和资源隔离。本文主要探讨乾坤中微应用的加载过程。")])]),g,s("p",null,[n("其实不管通过什么场景触发微应用加载逻辑，进行微应用加载本身的执行方法都只有一个，那就是位于"),y,n("文件中的"),h,n("方法。为了方便大家理解，认识微应用加载逻辑在乾坤中的位置，我将主要触发场景列在上面，关于上面列出的方法，都是乾坤暴露出来的api，可以在乾坤文档上查阅到相关用途。本文会以具体的乾坤微应用的注册流程开始，进而引出"),f,n("方法中的实现细节。在介绍"),w,n("实现细节的过程中，我会先分析乾坤加载微应用的主体流程和关键环节。在大家对主流程了解的基础上，将其中需要注意的关键点，分成多个小节进行介绍。但对于一些内容可能会比较多的细节，我们会再用新的文章来进行详细分析。比如在"),a(t,{to:"/microfe/01.%E4%B9%BE%E5%9D%A4%E7%9A%84Js%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%EF%BC%88%E5%BF%AB%E7%85%A7%E6%B2%99%E7%AE%B1%E3%80%81%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E6%B2%99%E7%AE%B1%EF%BC%89.html"},{default:o(()=>[n("微前端01 : 乾坤的Js隔离机制原理剖析（快照沙箱、两种代理沙箱）")]),_:1}),n("提到的三种沙箱，我们当时分析了其核心原理，但它们是如何在乾坤中的发挥作用的当时并没有提及，虽然微应用加载流程和沙箱机制有比较强的关联，但该部分内容又相对较多，所以我们会在后续的文章中结合沙箱相关代码和加载流程相关代码进行详细介绍。具体内容请见下文。")]),E,s("blockquote",null,[s("p",null,[n("基于 ShadowDOM 的严格样式隔离并不是一个可以无脑使用的方案，大部分情况下都需要接入应用做一些适配后才能正常在 ShadowDOM 中运行起来（比如 "),s("a",A,[n("react 场景下"),a(c)]),n(" 需要解决这些 问题，使用者需要清楚开启了 "),x,n(" 意味着什么。后续 "),_,n(" 会提供更多官方实践文档帮助用户能快速地将应用改造成可以运行在 "),C,n(" 环境的微应用。")])]),j])}const B=l(d,[["render",S],["__file","02.乾坤的微应用加载流程分析(从微应用的注册到loadApp方法内部实现).html.vue"]]);export{B as default};
