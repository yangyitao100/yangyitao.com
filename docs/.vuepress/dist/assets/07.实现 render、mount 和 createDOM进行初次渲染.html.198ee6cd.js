import{_ as n,o as s,c as a,f as p}from"./app.03bf752b.js";const t={},e=p(`<h1 id="_07-实现-render、mount-和-createdom进行初次渲染" tabindex="-1"><a class="header-anchor" href="#_07-实现-render、mount-和-createdom进行初次渲染" aria-hidden="true">#</a> 07.实现 render、mount 和 createDOM进行初次渲染</h1><p>具体代码变化过程请观看视频，这里把关键代码展示出来：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">REACT_ELEMENT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">VNode<span class="token punctuation">,</span> containerDOM</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">mount</span><span class="token punctuation">(</span>VNode<span class="token punctuation">,</span> containerDOM<span class="token punctuation">)</span>
    <span class="token comment">// 有同学会觉得奇怪，为什么不把mount函数的逻辑放到这里，还少一次函数调用，</span>
    <span class="token comment">// 事实上，render函数不仅仅只做挂载这样一件事情，只不过我们这里暂未涉及</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">VNode<span class="token punctuation">,</span> containerDOM</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> newDOM <span class="token operator">=</span> <span class="token function">createDOM</span><span class="token punctuation">(</span>VNode<span class="token punctuation">)</span>
    newDOM <span class="token operator">&amp;&amp;</span> containerDOM<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createDOM</span><span class="token punctuation">(</span><span class="token parameter">VNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 根据虚拟DOM创建真实DOM要做三件事情： 1.创建元素 2.处理子元素 3.处理元素属性</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>type<span class="token punctuation">,</span> props<span class="token punctuation">}</span> <span class="token operator">=</span> VNode
    <span class="token keyword">let</span> dom<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> VNode<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 处理子元素</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 这里我们要纠正上一小节关于createElement的一行代码，children数组</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> props<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>children<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> dom<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mountArray</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> props<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 处理属性</span>
    <span class="token keyword">return</span> dom
<span class="token punctuation">}</span>
f
<span class="token keyword">function</span> <span class="token function">mountArray</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token punctuation">{</span>
    render
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> ReactDOM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来观察项目执行情况，会发现页面上展示了视频中我们所期待的字符串。不过虽然这里实现了render、mount、createDOM几个函数，但这里只是处理了最简单的场景，随着课程的深入，这些函数的内容还会不断完善。</p>`,4),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","07.实现 render、mount 和 createDOM进行初次渲染.html.vue"]]);export{k as default};
