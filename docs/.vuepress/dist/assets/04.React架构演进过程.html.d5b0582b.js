import{_ as l,r as c,o,c as i,b as t,d as e,e as r,f as n}from"./app.d86bc82c.js";const s={},_=t("h1",{id:"_04-react架构演进过程",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_04-react架构演进过程","aria-hidden":"true"},"#"),e(" 04.React架构演进过程")],-1),d={href:"https://reactjs.org/docs/faq-versioning.html",target:"_blank",rel:"noopener noreferrer"},h=n("<ul><li>0.3.0～0.14.0（2013.5.29 ～ 2015.10.7）</li><li>React 15（2016.4.7）——基本功能、基本理念成熟</li><li>React 16（2017.9.26）——Fiber架构的引入、16.8Hooks的引入</li><li>React 17（2020.10.20）——事件委托机制变化，New Jsx Transform</li><li>React 18（2022.3.29）——Concurrent、Suspense、Transitions</li></ul><p>可以这样理解：</p><ul><li>0.3.0～0.14.0 是基础功能的打磨过程</li><li>React15，是一个基础实现版本的顶峰</li><li>React16，核心就是架构变化，另外16.8引入了Hooks</li><li>React17，局部优化、发展新特性</li><li>React18，局部优化、发展新特性</li></ul><p>关于每个版本发布了什么，有两个渠道可以获取这些信息，</p><ul><li>一个是changelog，</li><li>第二个是blog，官方有不少比较详细的博客文章来对版本进行说明</li></ul>",5);function u(p,R){const a=c("ExternalLinkIcon");return o(),i("div",null,[_,t("p",null,[e("为了更快的了解React的架构发展过程，我们可以从版本号上入手来看到一些信息。官方文档上提到"),t("a",d,[e("React采用了语意化版本规则"),r(a)]),e("。 了解了版本号的规则之后，再来看React关键的版本号的变化：")]),h])}const m=l(s,[["render",u],["__file","04.React架构演进过程.html.vue"]]);export{m as default};
