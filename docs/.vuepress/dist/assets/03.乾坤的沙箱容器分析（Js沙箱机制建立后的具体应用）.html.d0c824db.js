import{_ as l,r as o,o as i,c as u,b as s,d as n,e as a,w as c,f as t}from"./app.03bf752b.js";const r={},d=s("h1",{id:"_03-乾坤的沙箱容器分析-js沙箱机制建立后的具体应用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_03-乾坤的沙箱容器分析-js沙箱机制建立后的具体应用","aria-hidden":"true"},"#"),n(" 03.乾坤的沙箱容器分析（Js沙箱机制建立后的具体应用）")],-1),k=s("strong",null,"乾坤的Js隔离机制（快照沙箱、两种代理沙箱）",-1),m=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="沙箱容器的主逻辑" tabindex="-1"><a class="header-anchor" href="#沙箱容器的主逻辑" aria-hidden="true">#</a> 沙箱容器的主逻辑</h1><p>对沙箱机制的具体应用，本质上就是对<strong>沙箱容器</strong>的控制，至于什么是<strong>沙箱容器</strong>，我们直接看代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段一，所属文件：src/sandbox/index.ts</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">appName</span>
 * <span class="token keyword">@param</span> <span class="token parameter">elementGetter</span>
 * <span class="token keyword">@param</span> <span class="token parameter">scopedCSS</span>
 * <span class="token keyword">@param</span> <span class="token parameter">useLooseSandbox</span>
 * <span class="token keyword">@param</span> <span class="token parameter">excludeAssetFilter</span>
 * <span class="token keyword">@param</span> <span class="token parameter">globalContext</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createSandboxContainer</span><span class="token punctuation">(</span>
  <span class="token literal-property property">appName</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token function-variable function">elementGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> ShadowRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  useLooseSandbox<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  excludeAssetFilter<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean<span class="token punctuation">,</span>
  globalContext<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> window<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> SandBox<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>Proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sandbox <span class="token operator">=</span> useLooseSandbox <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">LegacySandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> globalContext<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ProxySandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> globalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    sandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnapshotSandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 此处省略许多代码...   占位1</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">instance</span><span class="token operator">:</span> sandbox<span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 此处省略许多代码... 占位2</span>
      sandbox<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 此处省略许多代码... 占位3</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 此处省略许多代码... 占位4</span>
      sandbox<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 此处省略许多代码... 占位5</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v=s("strong",null,"沙箱容器",-1),b=s("code",null,"instance、mount、unmount",-1),y=s("code",null,"instace",-1),h=s("code",null,"mount、unmount",-1),g=s("strong",null,"沙箱容器",-1),S=s("code",null,"globalContext",-1),f=s("code",null,"window",-1),E=s("code",null,"globalContext",-1),x=s("code",null,"window",-1),_=s("code",null,"mount、unmount",-1),C=s("code",null,"mount、unmount",-1),w=s("code",null,"sandbox.active",-1),A=s("code",null,"sandbox.inactive",-1),B=s("code",null,"mount、unmount",-1),M=s("strong",null,"占位1",-1),j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段二，所属文件：src/sandbox/index.ts</span>
<span class="token keyword">const</span> bootstrappingFreers <span class="token operator">=</span> <span class="token function">patchAtBootstrapping</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> elementGetter<span class="token punctuation">,</span> sandbox<span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> excludeAssetFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">mountingFreers</span><span class="token operator">:</span> Freer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> <span class="token literal-property property">sideEffectsRebuilders</span><span class="token operator">:</span> Rebuilder<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="函数patchatbootstrapping" tabindex="-1"><a class="header-anchor" href="#函数patchatbootstrapping" aria-hidden="true">#</a> 函数patchAtBootstrapping</h1><p>我们先暂时只关注第一行代码，这里调用了函数<code>patchAtBootstrapping</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段三，所属文件：src/sandbox/patchers/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchAtBootstrapping</span><span class="token punctuation">(</span>
  <span class="token literal-property property">appName</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token function-variable function">elementGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> ShadowRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">sandbox</span><span class="token operator">:</span> SandBox<span class="token punctuation">,</span>
  <span class="token literal-property property">scopedCSS</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  excludeAssetFilter<span class="token operator">?</span><span class="token operator">:</span> CallableFunction<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Freer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> patchersInSandbox <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>SandBoxType<span class="token punctuation">.</span>LegacyProxy<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">patchLooseSandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> elementGetter<span class="token punctuation">,</span> sandbox<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> excludeAssetFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>SandBoxType<span class="token punctuation">.</span>Proxy<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">patchStrictSandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> elementGetter<span class="token punctuation">,</span> sandbox<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> excludeAssetFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>SandBoxType<span class="token punctuation">.</span>Snapshot<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">patchLooseSandbox</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> elementGetter<span class="token punctuation">,</span> sandbox<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> scopedCSS<span class="token punctuation">,</span> excludeAssetFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> patchersInSandbox<span class="token punctuation">[</span>sandbox<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">patch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>patchAtBootstrapping</code>只做了一件事情，就是根据不同的沙箱类型，执行后并以数组的形式返回执行结果。为什么是数组类型呢？就这个方法本身而言，直接返回函数值没有任何问题，因为从代码中可以看出，不管何种沙箱类型，在<code>patchAtBootstrapping</code>中，都只执行了一个函数。之所以包装成数组，是因为其他和<code>patchAtBootstrapping</code>发挥作用类似的函数，比如<code>patchAtMounting</code>,里面就会有多个函数需要执行。这样做的好处是，保证了数据格式的统一，利于后续相关逻辑进行统一处理，同时也有很好的可扩展性，将来如果函数<code>patchAtBootstrapping</code>需要执行多个函数，不需要改动代码整体结构。这是我们值得学习的。</p><h1 id="函数patchstrictsandbox" tabindex="-1"><a class="header-anchor" href="#函数patchstrictsandbox" aria-hidden="true">#</a> 函数patchStrictSandbox</h1><p>至于<code>patchLooseSandbox、patchStrictSandbox、patchLooseSandbox</code>这三个函数。接下来我只深入到<code>patchStrictSandbox</code>中去，因为<code>patchStrictSandbox</code>最重要，其他两个函数的内部主体逻辑和<code>patchStrictSandbox</code>类似，感兴趣的朋友们可以自行阅读，如果有不清楚的地方可以留言交流。接下来我们就看看函数<code>patchStrictSandbox</code>的代码吧：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段四，所属文件：src/sandbox/patchers/dynamicAppend/forStrictSandbox.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchStrictSandbox</span><span class="token punctuation">(</span>
  <span class="token literal-property property">appName</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token function-variable function">appWrapperGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> ShadowRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> Window<span class="token punctuation">,</span>
  mounting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  scopedCSS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  excludeAssetFilter<span class="token operator">?</span><span class="token operator">:</span> CallableFunction<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Freer <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略许多代码... 占位1</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略许多代码... 占位2</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">rebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 此处省略许多代码... 占位3</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在省略了许多代码后，我们可以直观的看到该函数的主体结构，这个过程我们可以用伪代码来描述这个调用过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段五</span>
<span class="token keyword">let</span> freeFunc <span class="token operator">=</span> <span class="token function">patchStrictSandbox</span><span class="token punctuation">(</span>许多参数<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一步：在这个函数里面执行了代码，影响了程序状态</span>
<span class="token keyword">let</span> rebuidFun <span class="token operator">=</span> <span class="token function">freeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二步：将第一步中对程序状态的影响撤销掉</span>
<span class="token function">rebuidFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三步：恢复到第一步执行完成时程序的状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解了<code>patchStrictSandbox</code>的主逻辑，我们来看看代码片段四中<strong>占位1</strong>处所省略的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段六，所属文件：src/sandbox/patchers/dynamicAppend/forStrictSandbox.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchStrictSandbox</span><span class="token punctuation">(</span>
  <span class="token literal-property property">appName</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token function-variable function">appWrapperGetter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> HTMLElement <span class="token operator">|</span> ShadowRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> Window<span class="token punctuation">,</span>
  mounting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  scopedCSS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  excludeAssetFilter<span class="token operator">?</span><span class="token operator">:</span> CallableFunction<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Freer <span class="token punctuation">{</span>
    <span class="token comment">//*********************第一部分*********************/</span>
    <span class="token keyword">let</span> containerConfig <span class="token operator">=</span> proxyAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>containerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        containerConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
          appName<span class="token punctuation">,</span>
          proxy<span class="token punctuation">,</span>
          appWrapperGetter<span class="token punctuation">,</span>
          <span class="token literal-property property">dynamicStyleSheetElements</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">strictGlobal</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          excludeAssetFilter<span class="token punctuation">,</span>
          scopedCSS<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        proxyAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> containerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dynamicStyleSheetElements <span class="token punctuation">}</span> <span class="token operator">=</span> containerConfig<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/***********************第二部分*********************/</span>
    <span class="token keyword">const</span> unpatchDocumentCreate <span class="token operator">=</span> <span class="token function">patchDocumentCreateElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> unpatchDynamicAppendPrototypeFunctions <span class="token operator">=</span> <span class="token function">patchHTMLDynamicAppendPrototypeFunctions</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处省略许多代码... </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数patchstrictsandbox的第一部分逻辑" tabindex="-1"><a class="header-anchor" href="#函数patchstrictsandbox的第一部分逻辑" aria-hidden="true">#</a> 函数patchStrictSandbox的第一部分逻辑</h2><p>我们先来分析代码片段六中的第一部分，可以看到该部分有几个重要的变量，<code>proxyAttachContainerConfigMap、dynamicStyleSheetElements、proxy、containerConfig</code>，这部分代码做了三件事，<strong>一</strong>是从缓存变量<code>proxyAttachContainerConfigMap</code>中根据<code>proxy</code>获取配置对象，如果有就赋值给变量<code>containerConfig</code>。<strong>二</strong>是如果缓存中没有<code>proxy</code>对应的配置对象，那么则定一个初始化配置对象，并以<code>proxy</code>为<code>key</code>，以这个配置对象为<code>value</code>，存储到缓存变量<code>proxyAttachContainerConfigMap</code>中。<strong>三</strong>是从<code>containerConfig</code>中获取<code>dynamicStyleSheetElements</code>。这里有几个点值得推敲。 首先，<code>proxy</code>是什么，为什么要以<code>proxy</code>为<code>key</code>将配置对象存储在<code>proxyAttachContainerConfigMap</code>中？<code>proxy</code>实际上就是在上文代码片段一中创建的沙箱实例，对应代码片段一中的<code>sandbox</code>变量。</p><p>其次，在代码片段六中，<code>proxyAttachContainerConfigMap</code>只赋值了初始值，既然有是从缓存变量<code>proxyAttachContainerConfigMap</code>中根据<code>proxy</code>获取配置对象的这个操作，说明<code>proxyAttachContainerConfigMap</code>肯定在其他地方有更新<code>containerConfig</code>的操作，否则没必要只缓存一个初始化值。具体应该在哪里更新这个<code>containerConfig</code>，更新<code>containerConfig</code>中的哪个属性对应的值，我们在后文会提到。</p>`,15),D=s("code",null,"dynamicStyleSheetElements",-1),R=s("code",null,"HTMLStyleElement[]",-1),L=s("code",null,"HTMLStyleElement",-1),F=s("code",null,"<style>",-1),T=s("code",null,"HTMLStyleElement",-1),H=s("code",null,"HTMLStyleElement",-1),N=s("code",null,"sheet",-1),P=s("code",null,"CSSStyleSheet",-1),G=s("code",null,"CSSStyleSheet",-1),W={href:"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"CSSStyleSheet",-1),J=s("code",null,"cssRules",-1),V=s("code",null,"CSSRuleList",-1),O=s("code",null,"CSSStyleRule",-1),U=s("code",null,"CSSStyleRule",-1),q=s("code",null,"CSSStyleRule",-1),z=t(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">// 注意虽然样式呈现的效果等价，但实际上通过CssStyleRule控制样式和普通的以文本的形式挂载到dom上的样式有着一些不同，这些不同会在后面提到
div</span><span class="token punctuation">{</span>
   <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里了解这些就足够了，后续在分析乾坤对css资源进行处理的时候还会涉及<code>CSSStyleRule</code>，到时再继续探讨。</p>`,2),K={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="函数patchstrictsandbox的第二部分逻辑" tabindex="-1"><a class="header-anchor" href="#函数patchstrictsandbox的第二部分逻辑" aria-hidden="true">#</a> 函数patchStrictSandbox的第二部分逻辑</h2><p>这时我们将视野回到代码片段六中的第二部分，为了方便阅读将相关代码放到这里：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> unpatchDocumentCreate <span class="token operator">=</span> <span class="token function">patchDocumentCreateElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> unpatchDynamicAppendPrototypeFunctions <span class="token operator">=</span> <span class="token function">patchHTMLDynamicAppendPrototypeFunctions</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="patchdocumentcreateelement" tabindex="-1"><a class="header-anchor" href="#patchdocumentcreateelement" aria-hidden="true">#</a> patchDocumentCreateElement</h1><p>我们先看看<code>patchDocumentCreateElement</code>中的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段七，所属文件：src/sandbox/patchers/dynamicAppend/forStrictSandbox.ts</span>
<span class="token keyword">function</span> <span class="token function">patchDocumentCreateElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略许多代码...</span>
    <span class="token keyword">const</span> rawDocumentCreateElement <span class="token operator">=</span> document<span class="token punctuation">.</span>createElement<span class="token punctuation">;</span>
    <span class="token class-name">Document</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> createElement（
        <span class="token comment">// 省略许多代码...</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> HTMLElement <span class="token punctuation">{</span>
      <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">rawDocumentCreateElement</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tagName<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 关键点1</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHijackingTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略许多代码</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键点2 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;createElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>createElement <span class="token operator">=</span> <span class="token class-name">Document</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createElement<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关键点3 </span>
    docCreatePatchedMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createElement<span class="token punctuation">,</span> rawDocumentCreateElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unpatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关键点4</span>
    <span class="token comment">//此次省略一些代码...</span>
    <span class="token class-name">Document</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createElement <span class="token operator">=</span> docCreateElementFnBeforeOverwrite<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>createElement <span class="token operator">=</span> docCreateElementFnBeforeOverwrite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在省略一些代码后，<code>patchDocumentCreateElement</code>函数实现的功能，逐渐清晰可见。该函数主要做了三件事情。<strong>一</strong>是重写<code>Document.prototype.createElement</code>，重写的目的在代码片段七中的关键点<strong>1</strong>体现，具体关键点<strong>1</strong>内部做了什么由于逻辑较简单暂不在这里介绍。<strong>二</strong>是保存重写后的<code>createElement</code>和重写前的<code>createElement</code>这二者的对应关系，对应关键点<strong>3</strong>。至于上面代码片段提到的关键点<strong>2</strong>，是对<code>document</code>的一个变化，这个点应该和其他地方的逻辑有关系，否则没有必要对<code>document</code>进行判断处理，暂时没发现用到这个处理的地方，后续找到了相关逻辑再补上这个细节，但意义不太大，再看情况决定。<strong>三</strong>是返回一个函数，该函数会还原重写<code>Document.prototype.createElement</code>时候对<code>Document.prototype.createElement</code>的影响。</p><p>由于篇幅较长，请将我们的视野再次移动到代码片段六中的第二部分：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> unpatchDocumentCreate <span class="token operator">=</span> <span class="token function">patchDocumentCreateElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> unpatchDynamicAppendPrototypeFunctions <span class="token operator">=</span> <span class="token function">patchHTMLDynamicAppendPrototypeFunctions</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elementAttachContainerConfigMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刚才我们分析了函数<code>patchDocumentCreateElement</code>，现在可以知道代码片段中的<code>unpatchDocumentCreate</code>是一个函数，执行后会清除对<code>Document.prototype.createElement</code>的影响。这里我不再进入函数<code>patchHTMLDynamicAppendPrototypeFunctions</code>中进行分析，原理和函数<code>patchDocumentCreateElement</code>类似，只不过其影响和恢复的的是 <code>HTMLHeadElement.prototype.appendChild、HTMLHeadElement.prototype.removeChild、HTMLBodyElement.prototype.removeChild、HTMLHeadElement.prototype.insertBefore</code>等原型方法。</p><h1 id="函数patchstrictsandbox的free函数" tabindex="-1"><a class="header-anchor" href="#函数patchstrictsandbox的free函数" aria-hidden="true">#</a> 函数patchStrictSandbox的free函数</h1><p>此时，请将视线移动到代码片段四中的<strong>占位2</strong>处，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此处省略许多代码...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>allMicroAppUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">unpatchDynamicAppendPrototypeFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">unpatchDocumentCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">recordStyledComponentsCSSRules</span><span class="token punctuation">(</span>dynamicStyleSheetElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上文的分析我们知道，执行<code>unpatchDynamicAppendPrototypeFunctions、unpatchDocumentCreate</code>两个函数后，会清除重写相应原型函数的影响。我们重点看看<code>recordStyledComponentsCSSRules(dynamicStyleSheetElements);</code>，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">recordStyledComponentsCSSRules</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">styleElements</span><span class="token operator">:</span> HTMLStyleElement<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  styleElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">styleElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>styleElement <span class="token keyword">instanceof</span> <span class="token class-name">HTMLStyleElement</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isStyledComponentsLike</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>styleElement<span class="token punctuation">.</span>sheet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        styledComponentCSSRulesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">,</span> <span class="token punctuation">(</span>styleElement<span class="token punctuation">.</span>sheet <span class="token keyword">as</span> CSSStyleSheet<span class="token punctuation">)</span><span class="token punctuation">.</span>cssRules<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心其实只有一行代码：<code>styledComponentCSSRulesMap.set(styleElement, (styleElement.sheet as CSSStyleSheet).cssRules);</code>。上文我们知道了<code>cssRules</code>代表着一条条具体的css样式，就这行代码而言，这些样式是从远程加载而来，相当于从网络上获取了一个<code>css</code>文件，然后对其中的内容进行解析，生成一个<code>style</code>标签，<code>style</code>标签具体承载的样式并非以字符串的形式，这里的具体代码比较冗长暂时不贴出来。实际上就是保存一个<code>style</code>标签对象和其中的内容之间的关系。这里保存的<code>cssRules</code>在下文的分析中会用到。</p><h1 id="函数patchstrictsandbox中free函数的rebuild函数" tabindex="-1"><a class="header-anchor" href="#函数patchstrictsandbox中free函数的rebuild函数" aria-hidden="true">#</a> 函数patchStrictSandbox中free函数的rebuild函数</h1><p>此时，请将视线移动到代码片段四中的<strong>占位3</strong>处，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">rebuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">rebuildCSSRules</span><span class="token punctuation">(</span>dynamicStyleSheetElements<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stylesheetElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> appWrapper <span class="token operator">=</span> <span class="token function">appWrapperGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appWrapper<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>stylesheetElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">rawHeadAppendChild</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>appWrapper<span class="token punctuation">,</span> stylesheetElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的rebuildCSSRules函数如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">rebuildCSSRules</span><span class="token punctuation">(</span>
  <span class="token literal-property property">styleSheetElements</span><span class="token operator">:</span> HTMLStyleElement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">reAppendElement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">stylesheetElement</span><span class="token operator">:</span> HTMLStyleElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  styleSheetElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stylesheetElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> appendSuccess <span class="token operator">=</span> <span class="token function">reAppendElement</span><span class="token punctuation">(</span>stylesheetElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>appendSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stylesheetElement <span class="token keyword">instanceof</span> <span class="token class-name">HTMLStyleElement</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isStyledComponentsLike</span><span class="token punctuation">(</span>stylesheetElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cssRules <span class="token operator">=</span> <span class="token function">getStyledElementCSSRules</span><span class="token punctuation">(</span>stylesheetElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cssRules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cssRules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> cssRule <span class="token operator">=</span> cssRules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> cssStyleSheetElement <span class="token operator">=</span> stylesheetElement<span class="token punctuation">.</span>sheet <span class="token keyword">as</span> CSSStyleSheet<span class="token punctuation">;</span>
            cssStyleSheetElement<span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span>cssRule<span class="token punctuation">.</span>cssText<span class="token punctuation">,</span> cssStyleSheetElement<span class="token punctuation">.</span>cssRules<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码逻辑看可以直观的看出两件事情，<strong>一</strong>是将前面生成的<code>style</code>标签添加到微应用上；<strong>二</strong>是将之前保存的<code>cssRule</code>插入到对应的<code>style</code>标签上。为什么一定要执行<code>insertRule</code>呢?通过<code>cssRule</code>动态控制样式和普通<code>style</code>标签控制样式有所不同。一旦<code>cssRule</code>所关联的<code>style</code>标签脱离<code>document</code>，这些<code>cssRule</code>都会失效。这也是为什么需要保存和重新设置的原因。</p><p>到此，本文代码片段一中的<strong>占位1</strong>处的代码就算执行完成了。对<strong>占位1</strong>的代码理解清楚后，本文也就基本完成了。因为<code>mount、unmount</code>其实就是在利用<strong>占位1</strong>提供的<code>bootstrappingFreers</code>函数改变以及恢复状态。</p><p>欢迎关注我的<code>微信订阅号：杨艺韬</code>，可以获取最新动态。</p>`,24);function X(Y,Z){const e=o("RouterLink"),p=o("ExternalLinkIcon");return i(),u("div",null,[d,s("blockquote",null,[s("p",null,[n("在 "),k,n(" 一文中，我们知道了乾坤的沙箱的核心原理和具体实现。但知道这些还不够，因为沙箱本身就像是一个工具，有了工具还得应用到实践中，这个工具才能创造价值发挥作用。我们也在"),a(e,{to:"/microfe/02.%E4%B9%BE%E5%9D%A4%E7%9A%84%E5%BE%AE%E5%BA%94%E7%94%A8%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90(%E4%BB%8E%E5%BE%AE%E5%BA%94%E7%94%A8%E7%9A%84%E6%B3%A8%E5%86%8C%E5%88%B0loadApp%E6%96%B9%E6%B3%95%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0).html"},{default:c(()=>[n("微前端02 : 乾坤的微应用加载流程分析(从微应用的注册到loadApp方法内部实现)")]),_:1}),n("中提到了在加载微应用过程中跟沙箱相关的部分逻辑，但受限于篇幅并未展开。本文将会详细讲解乾坤对沙箱的具体应用。")])]),m,s("p",null,[n("由代码片段一可知，所谓"),v,n("，就是一个对象。该对象包括三个属性"),b,n("，其中"),y,n("代表沙箱实例，"),h,n("是两个方法，供"),g,n("持有者在合适的时机进行调用。关于沙箱实例，我们先看创建沙箱实例的时候传入了"),S,n("，还记得我们在"),a(e,{to:"/microfe/01.%E4%B9%BE%E5%9D%A4%E7%9A%84Js%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%EF%BC%88%E5%BF%AB%E7%85%A7%E6%B2%99%E7%AE%B1%E3%80%81%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E6%B2%99%E7%AE%B1%EF%BC%89.html"},{default:c(()=>[n("微前端01 : 乾坤的Js隔离机制（快照沙箱、两种代理沙箱）")]),_:1}),n("中各沙箱的极简版吧，当时我直接用的"),f,n("，那为什么在真实源码中要通过传入"),E,n("而不是直接使用"),x,n("呢。答案其实很简单，参数存在的意义就是参数值可变，否则都直接写死了，换句话说更灵活了。举个例子，如果我们的微应用的载体是另一个微应用呢？如果没有这种灵活性，就不能很好的支持复杂多变的场景，乾坤作为业界知名框架，在众多开发者的打磨下，对于细节的处理确实很值得学习。聊完了沙箱实例的创建，我们再来看看"),_,n("这两个方法。如果忽略省略的代码片段注释处省略的代码，那"),C,n("仅仅是调用"),w,n("、"),A,n("两个方法让沙箱激活或者失活。如果是这样的话，这个沙箱容器的存在的意义就不大了，但我在介绍"),B,n("两个方法中的其他逻辑之前，我们来先看看代码片段一中"),M,n("处的三行代码：")]),j,s("p",null,[n("最后，"),D,n("是什么？实际上其类型是"),R,n("，"),L,n("表示"),F,n("元素。我们这里不追究"),T,n("到底有多少属性和方法，但需要关注的是，"),H,n("实例中有一个"),N,n("属性，这个属性是一个"),P,n("对象。至于"),G,n("的概念和各种属性我就不在这里一一详述了，可以参阅相关"),s("a",W,[n("文档"),a(p)]),n("了解。此时我们需要知道的是，"),I,n("的实例有个重要的属性"),J,n("，该属性类型为"),V,n("，是一个"),O,n("对象数组。关于"),U,n("的详细内容就不继续介绍了，只需要知道"),q,n("相当于代表了一条具体的css样式，如下所示：")]),z,s("blockquote",null,[s("p",null,[n("注：请阅读英文版MDN文档，对于HTMLStyleElement的解释，中文版的 翻译还比较落后，与"),s("a",K,[n("英文版"),a(p)]),n("的介绍有出入")])]),Q])}const nn=l(r,[["render",X],["__file","03.乾坤的沙箱容器分析（Js沙箱机制建立后的具体应用）.html.vue"]]);export{nn as default};
