import{_ as n,o as s,c as a,f as e}from"./app.d86bc82c.js";const t={},p=e(`<h1 id="_06-收集注册的函数" tabindex="-1"><a class="header-anchor" href="#_06-收集注册的函数" aria-hidden="true">#</a> 06.收集注册的函数</h1><h2 id="packages-react-dom-bindings-src-events-domplugineventsystem-js" tabindex="-1"><a class="header-anchor" href="#packages-react-dom-bindings-src-events-domplugineventsystem-js" aria-hidden="true">#</a> packages/react-dom-bindings/src/events/DOMPluginEventSystem.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HostComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-reconciler/src/ReactWorkTags&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> getListener <span class="token keyword">from</span> <span class="token string">&#39;./getListener&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 累积单阶段监听器
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Fiber<span class="token punctuation">}</span></span> <span class="token parameter">targetFiber</span> 目标Fiber实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">reactName</span> React事件名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">nativeEventType</span> 原生事件类型
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span> <span class="token parameter">isCapturePhase</span> 是否在捕获阶段
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">accumulateSinglePhaseListeners</span><span class="token punctuation">(</span>
  <span class="token parameter">targetFiber<span class="token punctuation">,</span> reactName<span class="token punctuation">,</span> nativeEventType<span class="token punctuation">,</span> isCapturePhase</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> captureName <span class="token operator">=</span> reactName <span class="token operator">+</span> <span class="token string">&#39;Capture&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> reactEventName <span class="token operator">=</span> isCapturePhase <span class="token operator">?</span> captureName <span class="token operator">:</span> reactName<span class="token punctuation">;</span>
  <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> targetFiber<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>instance <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> stateNode<span class="token punctuation">,</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> HostComponent <span class="token operator">&amp;&amp;</span> stateNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token function">getListener</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> reactEventName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createDispatchListener</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> stateNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    instance <span class="token operator">=</span> instance<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> listeners<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 创建分发监听器
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Fiber<span class="token punctuation">}</span></span> <span class="token parameter">instance</span> Fiber实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> 监听器函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Element<span class="token punctuation">}</span></span> <span class="token parameter">currentTarget</span> 当前目标元素
 */</span>
<span class="token keyword">function</span> <span class="token function">createDispatchListener</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> currentTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> instance<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> currentTarget <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-dom-bindings-src-events-getlistener-js" tabindex="-1"><a class="header-anchor" href="#packages-react-dom-bindings-src-events-getlistener-js" aria-hidden="true">#</a> packages/react-dom-bindings/src/events/getListener.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getFiberCurrentPropsFromNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../client/ReactDOMComponentTree&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 从给定的React实例中获取指定事件的监听函数。
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">instance</span> - React实例。
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">registrationName</span> - 注册的事件名（例如，&#39;onClick&#39;）。
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> - 返回该事件的监听函数，如果不存在则返回null。
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">getListener</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> registrationName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从实例中取出状态节点</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> stateNode <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>
  <span class="token comment">// 如果状态节点不存在，返回null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stateNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用ReactDOMComponentTree模块的getFiberCurrentPropsFromNode函数，获取状态节点当前的props</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">getFiberCurrentPropsFromNode</span><span class="token punctuation">(</span>stateNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果props不存在，返回null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 从props中获取对应事件名的监听函数</span>
  <span class="token keyword">const</span> listener <span class="token operator">=</span> props<span class="token punctuation">[</span>registrationName<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回监听函数，如果不存在，此处将返回undefined</span>
  <span class="token keyword">return</span> listener<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-dom-bindings-src-client-reactdomcomponenttree-js" tabindex="-1"><a class="header-anchor" href="#packages-react-dom-bindings-src-client-reactdomcomponenttree-js" aria-hidden="true">#</a> packages/react-dom-bindings/src/client/ReactDOMComponentTree.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getFiberCurrentPropsFromNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node<span class="token punctuation">[</span>internalPropsKey<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),c=[p];function o(i,l){return s(),a("div",null,c)}const u=n(t,[["render",o],["__file","06.收集注册的函数.html.vue"]]);export{u as default};
