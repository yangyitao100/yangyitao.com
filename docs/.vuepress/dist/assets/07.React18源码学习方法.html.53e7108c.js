import{_ as e,o as a,c as r,f as t}from"./app.03bf752b.js";const i={},c=t('<h1 id="_07-react18源码学习方法" tabindex="-1"><a class="header-anchor" href="#_07-react18源码学习方法" aria-hidden="true">#</a> 07.React18源码学习方法</h1><p>根据我对React源码进行研究的经验，在学习过程中，我们需要注意以下四点：</p><ul><li>学习复杂事物采用分层的办法，先宏观，再中观，再微观</li><li>先应用，再原理，不要有有一步到位的心态，一步一步的来</li><li>勤调试，以数据为核心，追踪实时变化</li><li>善对比，比较中找到优劣加深理解，比如Fiber架构出现前后性能的变化</li></ul><p>我们对这 四点逐一进行简单介绍：</p><h2 id="学习复杂事物采用分层的办法-先宏观-再中观-再微观" tabindex="-1"><a class="header-anchor" href="#学习复杂事物采用分层的办法-先宏观-再中观-再微观" aria-hidden="true">#</a> <strong>学习复杂事物采用分层的办法，先宏观，再中观，再微观</strong></h2><p>我们知道React源码还是比较复杂的，对于复杂的事物，我们切忌不要一开始就深入细节，就好像身处大山，就只能看见花草树木，很难看见自己所处的位置，进而迷路，我们在学习React源码的时候要遵循下面的学习步骤：</p><ul><li>先认识React整体架构</li><li>然后探索其中关键的数据结构与算法</li><li>最后探索代码细节的实现</li></ul><h2 id="先应用-再原理-不要有有一步到位的心态-一步一步的来" tabindex="-1"><a class="header-anchor" href="#先应用-再原理-不要有有一步到位的心态-一步一步的来" aria-hidden="true">#</a> <strong>先应用，再原理，不要有有一步到位的心态，一步一步的来</strong></h2><p>想一步到位深入理解源码违了背认识事物的规律，我们要先对一个事物有一定的感性认识，才会更有助于我们深入学习原理形成理性认识。所以我们在手写React源码的过程中，会先讲解对某个功能基本使用的小案例，再剖析其中的原理，然后再编码实现。但是鉴于我们这门课程是源码课，讲解应用小案例的时候会点到为止，如果有同学不理解小案例，希望能多阅读官方文档，动手实践，相信可以良好理解，继续深入学习我们这门课程。</p><h2 id="勤调试-以数据为核心-追踪实时变化" tabindex="-1"><a class="header-anchor" href="#勤调试-以数据为核心-追踪实时变化" aria-hidden="true">#</a> <strong>勤调试，以数据为核心，追踪实时变化</strong></h2><p>因为我们的编写的代码还是有一定难度的，有的同学可能听着听着就感觉一下听不懂了，这个时候不妨停下来，按照程序执行的流程，调试我在视频中手写的代码，逐步去体会，多调试几次，相信能够深入理解我们讲解的内容。</p><h2 id="善对比-比较中找到优劣加深理解-比如fiber架构出现前后性能的变化" tabindex="-1"><a class="header-anchor" href="#善对比-比较中找到优劣加深理解-比如fiber架构出现前后性能的变化" aria-hidden="true">#</a> <strong>善对比，比较中找到优劣加深理解，比如Fiber架构出现前后性能的变化</strong></h2><p>关于这一点，同学们要多关注，我们课程的上半部分和下半部分两者内容不同的地方，和不变的地方，这个在实际编写代码的过程中我也会反复提到。</p>',13),n=[c];function h(d,l){return a(),r("div",null,n)}const o=e(i,[["render",h],["__file","07.React18源码学习方法.html.vue"]]);export{o as default};
