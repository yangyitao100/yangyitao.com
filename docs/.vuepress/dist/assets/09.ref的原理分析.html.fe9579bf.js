import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,f as l}from"./app.00462568.js";const r={},i=s("h1",{id:"_09-ref的原理分析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_09-ref的原理分析","aria-hidden":"true"},"#"),n(" 09.ref的原理分析")],-1),u={href:"https://reactjs.org/docs/refs-and-the-dom.html",target:"_blank",rel:"noopener noreferrer"},k=l(`<ul><li>Refs provide a way to access DOM nodes or React elements created in the render method.</li></ul><blockquote><p>In the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.</p></blockquote><ul><li><strong>There are a few good use cases for refs :</strong> Managing focus, text selection, or media playback.Triggering imperative animations. Integrating with third-party DOM libraries.</li><li>Don’t Overuse Refs</li></ul><p>我们可以通过下面的代码来直观的感受下ref是什么： 我们在index.js中将代码做如下调整:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 注意这里用的是引入的官方原版源码，而不是我们编写的react源码</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">MyClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
    counter <span class="token operator">=</span> <span class="token number">0</span>
    isBlue <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">updateShowText</span><span class="token punctuation">(</span><span class="token parameter">newText</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> newText
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
        element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isBlue <span class="token operator">?</span> <span class="token string">&#39;blue&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>isBlue <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isBlue 
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;test-class&#39;</span> ref<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> 
                <span class="token literal-property property">cursor</span><span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span><span class="token punctuation">,</span> 
                <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;1px solid gray&#39;</span><span class="token punctuation">,</span> 
                <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">&#39;6px&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&#39;inline-block&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&#39;6px 12px&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateShowText</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>Simple React Counter<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyClassComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在日常开发中，操作div元素的变化往往是通过数据来驱动的。但这里为了演示ref的能力，所以这里才用ref来改动样式。实际上，ref虽然很强大，但在日常开发中用的场景是有限的，正如官方文档说的：<strong>Managing focus, text selection, or media playback</strong>等特定场景下才利用ref的能力，如果滥用ref是与React世界中数据驱动视图的基本理念相违背的。</p></blockquote><p>我们来根据这个ref的使用示范，来分析ref的实现原理，要让ref发挥作用有三个阶段：</p><ol><li>初始化：<code>this.myRef = React.createRef();</code> 相当于 this.myRef = { current: null }</li><li>传递ref引用：<code>ref= { this.myRef }</code>，这里有个隐藏的动作，this.myRef.current = xxx dom</li><li>取值：<code>const element = this.myRef.current;</code></li></ol>`,8);function d(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[i,s("p",null,[n("在探究ref原理之前，我们先看看官方文档"),s("a",u,[n("关于ref的说明"),c(a)]),n("：")]),k])}const y=e(r,[["render",d],["__file","09.ref的原理分析.html.vue"]]);export{y as default};
