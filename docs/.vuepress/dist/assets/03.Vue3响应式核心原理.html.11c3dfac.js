import{_ as n,o as s,c as a,f as t}from"./app.c996eb5c.js";const e={},p=t(`<h1 id="_03-vue3响应式核心原理" tabindex="-1"><a class="header-anchor" href="#_03-vue3响应式核心原理" aria-hidden="true">#</a> 03.Vue3响应式核心原理</h1><blockquote><p>本文会先分析<code>reactivity</code>的代码主体结构，进而分析其关键部分的实现细节，最后会对其中一些值得大家学习的点拿出来和大家分享。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>有可能朋友们会疑惑，源码分析为什么要从<code>reactivity</code>讲起，而不是从其他地方开始分析？请大家先看<code>Vue3</code>官方文档中的包依赖关系图：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>                                    +---------------------+
                                    |                     |
                                    |  @vue/compiler-sfc  |
                                    |                     |
                                    +-----+--------+------+
                                          |        |
                                          v        v
                      +---------------------+    +----------------------+
                      |                     |    |                      |
        +------------&gt;|  @vue/compiler-dom  +---&gt;|  @vue/compiler-core  |
        |             |                     |    |                      |
   +----+----+        +---------------------+    +----------------------+
   |         |
   |   vue   |
   |         |
   +----+----+        +---------------------+    +----------------------+    +-------------------+
        |             |                     |    |                      |    |                   |
        +------------&gt;|  @vue/runtime-dom   +---&gt;|  @vue/runtime-core   +---&gt;|  @vue/reactivity  |
                      |                     |    |                      |    |                   |
                      +---------------------+    +----------------------+    +-------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，我们在<code>core/packages/</code>目录下可以发现一共有<strong>16</strong>个文件夹，也就是说有<strong>16</strong>个子项目。但是最核心最重要的，就是图中涉及的<strong>7</strong>个项目。其中<code>@vue/compiler-sfc、@vue/compiler-dom、 @vue/compiler-core</code>跟编译相关。<code>@vue/runtime-dom、@vue/runtime-core、@vue/reactivity</code>跟运行时相关。而图中的子项目<code>vue</code>更像是一个家长，可以把其他子项目提供的能力聚合在一起，再统一对外提供能力。当<code>vue</code>将其聚合在一起的时候，其中一些子项目的能力只是供内部其他子项目调用，并不会对外暴露所有子项目完整的能力。</p><p>在本系列文章中会先讲运行时相关的子项目，再讲编译阶段相关的子项目，因为运行时跟我们实际开发更贴近，一开始就深入编译阶段容易让很多朋友打退堂鼓。而对于运行时相关的子项目，我们从依赖图的最末端讲起，再层层回到依赖项的最顶端，这样一开始涉及的内容会尽可能的少，然后逐渐丰富，符合认知规律。但凡事无绝对，由于<code>@vue/runtime-dom</code>内容相对较少且和实际开发联系比较紧密，因此会在讲解<code>@vue/runtime-core</code>之前进行分析。所以，关于运行时相关的源码分析，实际分析顺序如下：</p><ol><li>reactivity</li><li>@vue/runtime-dom</li><li>@vue/runtime-core</li></ol><p>我们先介绍下这几个子项目各自的职责：</p><ul><li><code>reactivity</code>: 为数据提供响应式的能力，我们日常开发中出现的<code>reactive</code>、<code>ref</code>等函数都出自该项目中；</li><li><code>@vue/runtime-dom</code>: 针对浏览器的运行时，内部会涉及到<code>DOM API</code>，其依赖于<code>@vue/runtime-core</code>提供的能力；</li><li><code>@vue/runtime-core</code>: 平台无关的运行时核心，内部依赖<code>reactivity</code>提供的数据响应式能力了。有了这个核心库，就可以针对特点平台自定义渲染器，<code>@vue/runtime-dom</code>就是案例。</li></ul><blockquote><p>对于上文的介绍，大家可能会比较疑惑，比如到底什么是运行时？平台无关又是什么意思？什么是数据响应式？<code>@vue/runtime-dom</code>和<code>@vue/runtime-core</code>到底是什么关系？请大家暂时先将这些疑问放下，在后续的文章内容中逐渐会解答大家的疑惑。</p></blockquote><h1 id="reactivty" tabindex="-1"><a class="header-anchor" href="#reactivty" aria-hidden="true">#</a> reactivty</h1><p>现在正式步入了<code>reactivity</code>的分析，下面首先会阐述<code>Vue3</code>中数据响应式的概念。接着分析要让数据具备响应式的能力，需要哪些关键步骤。最后会对每一个关键环节中的源码进行详细分析。</p><h2 id="响应式原理介绍" tabindex="-1"><a class="header-anchor" href="#响应式原理介绍" aria-hidden="true">#</a> 响应式原理介绍</h2><h3 id="vue2的响应式原理" tabindex="-1"><a class="header-anchor" href="#vue2的响应式原理" aria-hidden="true">#</a> Vue2的响应式原理</h3><p>在<code>Vue2</code>中，所谓响应式，我们可以粗略的这样理解，就是利用<code>Object.defineProperty</code>方法，为某个对象<code>reactiveObj</code>属性<code>key</code>设置<code>get</code>、<code>set</code>属性，当某个地方<code>X</code>调用了<code>reactiveObj.key</code>则会触发<code>get</code>方法，此时在<code>get</code>方法中做一条记录:<code>X</code>使用了<code>reactiveObj</code>对象的<code>key</code>属性。当为对象<code>reactiveObj</code>的<code>key</code>属性赋值的时候，会触发<code>reactiveObj</code>的<code>set</code>方法，此时在<code>set</code>方法中，通知<code>X</code>将自己负责的地方执行一些更新逻辑。如果这个更新逻辑是操作<code>DOM</code>显示新的内容，对于用户来讲直接的感受就是没操作<code>DOM</code>的情况下，只是修改了自己定义的一个普通对象上的一个属性的值，但是<code>DOM</code>上的内容却自己发生了变化。事实上，在<code>Vue2</code>中，通常情况下，定义的所有数据都默认是响应式的，也就是说会默认为每个数据对象的每个属性调用<code>Object.defineProperty</code>方法，让其数据默认具备响应式的能力。</p><h3 id="vue3的响应式原理" tabindex="-1"><a class="header-anchor" href="#vue3的响应式原理" aria-hidden="true">#</a> Vue3的响应式原理</h3><h4 id="vue2和vue3关于响应式的最重要的区别" tabindex="-1"><a class="header-anchor" href="#vue2和vue3关于响应式的最重要的区别" aria-hidden="true">#</a> Vue2和Vue3关于响应式的最重要的区别</h4><p>从本质上讲<code>Vue3</code>的响应式原理和<code>Vue2</code>的响应式原理没有根本的不同。都可以简单的理解为，使用一个对象的属性的时候，记录下是谁在使用，当对象的属性值发生变化时再通知那些使用过该属性值的地方做相应的处理。当然，虽然本质上没有太大的不同，但在实现响应式的方案却又有很大的差别。主要有两个核心的差异：</p><ol><li>利用的基础能力不同，<code>Vue2</code>利用了<code>Object.defineProperty</code>，<code>Vue3</code>利用了<code>Proxy</code>的相关<code>API</code>；</li><li><code>Vue2</code>是默认会让所有的数据具备响应式的能力，<code>Vue3</code>需要手动调用函数让特定数据具备响应式的能力；</li></ol><p>当然<code>Vue2</code>和<code>Vue3</code>还有很多不同，比如因为采用底层能力的不同导致的兼容性不同、<code>Object.defineProperty</code>有新增属性或数组的响应式丢失问题等等还有很多其他的不同。但我认为核心的不同就是上面的两点：一个代表了实现的基本原理不同，一个代表了响应式相关的应用实践的差异。</p><h4 id="手写极简版vue3响应式系统" tabindex="-1"><a class="header-anchor" href="#手写极简版vue3响应式系统" aria-hidden="true">#</a> 手写极简版Vue3响应式系统</h4><blockquote><p>在<code>Vue</code>的世界，不管是<code>Vue2</code>还是<code>Vue3</code>，我们无论在<code>template</code>中写了什么内容，都会在程序内部转化成<code>虚拟DOM</code>，然后再将<code>虚拟DOM</code>转化成<code>真实DOM</code>，最后再将<code>真实DOM</code>在合适的时机挂载到<code>document</code>上某个具体的地方。<code>Vue3</code>有两个<code>render</code>函数，第一个<code>render</code>函数是对模版进行编译的函数<code>compile</code>执行完的返回值，执行该函数可以获得<code>虚拟DOM</code>对象；另一个<code>render</code>函数是将<code>虚拟DOM</code>转化成<code>真实DOM</code>，并将<code>真实DOM</code>挂载到<code>document</code>上。一定要分清这两个<code>render</code>函数的不同，这两个函数可以说是整个<code>Vue3</code>的灵魂。对于响应式原理来讲，我们关心的是第二个<code>render</code>函数，如果对于刚才对<code>render</code>函数的描述还比较模糊也没关系在这里，现在只需要将这句话刻在脑海里：<strong>执行完一个函数后，<code>document</code>上的内容就发生了变化</strong>。</p></blockquote><p>假如有一个场景，初始代码如下，直接让浏览器页面上某个地方显示字符串<code>yangyitao</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">let</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;anyRealId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> dataObj<span class="token punctuation">.</span>name <span class="token comment">// Id为\`anyRealId\`的元素真实存在</span>
dataObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;杨艺韬&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，我们希望在改变了<code>dataObj.name</code>的值后，元素<code>anyRealId</code>中的内容也发生变化，也就是显示的内容由<code>yangyitao</code>变为<code>杨艺韬</code>。可能你会进行下面的改造：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">let</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">functionA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;anyRealId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> dataObj<span class="token punctuation">.</span>name <span class="token comment">// Id为\`anyRealId\`的元素真实存在 </span>
<span class="token punctuation">}</span>
<span class="token function">functionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dataObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;杨艺韬&quot;</span><span class="token punctuation">;</span>
<span class="token function">functionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，这既保证了数据能够正常初始化，又保证了数据更新后，触发页面内容的变化。但是这样存在几个问题：</p><ul><li>手动调用函数，看起来比较繁琐</li><li>目前的案例只用到了对象<code>dataObj</code>的<code>name</code>属性，所以我们知道在<code>name</code>的值发生了变化手动调用函数，但是如果<code>runctionA</code>中使用了<code>dataObj</code>的<strong>100</strong>个属性，而且这<strong>100</strong>个属性可以在任何地方发生改变。程序会显得及其臃肿，也考验我们的记忆力，可操作性极低。</li><li>在有些情况下，数据变化后，我们并不需要更新页面上显示的内容，怎么进行区分呢？</li></ul><p>为了实现这些目标，我们可能对程序进一步进行优化：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段3--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> objMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> <span class="token function-variable function">reactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>functionA<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>functionA<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                        effectArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>functionA<span class="token punctuation">)</span>
                        propertyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> effectArr<span class="token punctuation">)</span>
                        objMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyMap<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> 
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> val
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    effectArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span>
        <span class="token keyword">let</span> reactiveDataObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span>

        <span class="token keyword">const</span> <span class="token function-variable function">functionA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> reactiveDataObj<span class="token punctuation">.</span>name <span class="token comment">// Id为\`anyRealId\`的元素真实存在 </span>
        <span class="token punctuation">}</span>
        <span class="token function">functionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            reactiveDataObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;杨艺韬&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中打开页面，会发现页面中的<code>yangyitao</code>会在<strong>3</strong>秒中后自动更换为<code>杨艺韬</code>。这样对于函数<code>functionA</code>而言，我们完成了简单的数据变化触发页面变化的功能。为了具备一定的通用性，我们将代码改造成下面这个样子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段4--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> objMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">const</span> <span class="token function-variable function">reactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                        effectArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
                        propertyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> effectArr<span class="token punctuation">)</span>
                        objMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyMap<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> 
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> val
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    effectArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            activeEffect <span class="token operator">=</span> fn
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span>
        <span class="token keyword">let</span> reactiveDataObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span>

        <span class="token keyword">const</span> <span class="token function-variable function">functionA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> reactiveDataObj<span class="token punctuation">.</span>name <span class="token comment">// Id为\`anyRealId\`的元素真实存在 </span>
        <span class="token punctuation">}</span>
        <span class="token function">effect</span><span class="token punctuation">(</span>functionA<span class="token punctuation">)</span>

        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            reactiveDataObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;杨艺韬&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，程序多了一点通用性，我们可以把<code>functionA</code>换成<code>functionB</code>或者其他。上面的代码逻辑并不严密，很多边界条件都没处理，但这并不影响我们达到了目标。在后续只要更改了<code>reactiveDataObj</code>的<code>name</code>属性的值，页面就会自动发生变化，而不需要上文中手动调用一个函数来触发变化。</p><p>代码<strong>片段4</strong>中有几个关键点：</p><ol><li>调用<code>reactive</code>函数传入数据对象，该函数会返回一个代理对象<code>reactiveDataObj</code>，在后续<code>functionA</code>中使用对象<code>reactiveDataObj</code>而非<code>dataObj</code></li><li>先执行一遍传入<code>effect</code>函数中的<code>functionA</code>，并用一个全局变量<code>activeEffect</code>记录该函数。</li></ol><p>其实到了这里，我们可以认为自己已经理解了<code>Vue3</code>最核心的原理。当然这是不够的，下面我们就进入<code>reactivity</code>中，探究<code>Vue3</code>是如何将核心原理进行实施的。</p>`,38),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","03.Vue3响应式核心原理.html.vue"]]);export{d as default};
