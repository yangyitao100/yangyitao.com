import{_ as r,r as a,o as n,c,b as o,d as e,e as s,f as h}from"./app.4326c516.js";const l={},i=o("h1",{id:"_02-hooks概况",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#_02-hooks概况","aria-hidden":"true"},"#"),e(" 02.Hooks概况")],-1),d=o("h2",{id:"hooks存在的意义",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#hooks存在的意义","aria-hidden":"true"},"#"),e(" Hooks存在的意义")],-1),_={href:"https://reactjs.org/docs/hooks-reference.html",target:"_blank",rel:"noopener noreferrer"},k=o("blockquote",null,[o("p",null,"Hooks是React 在16.8版本中新增加的功能，能够使我们在不编写类组件的情况下使用状态以及其他React特性。")],-1),p=o("p",null,[e("在前面的课程中，我们说过，React是组件的世界，而组件又分为类组件和函数组件。在最开始的时候，类组件居于主导地位，函数组件地位相对低下，因为函数组件内部没有像类组件那样类似于"),o("code",null,"this.setState"),e("这样的更新机制，也没有像类组件那样有满足在特定阶段执行不同操作的生命周期函数。")],-1),u=o("p",null,"随着Hooks的出现，函数组件的能力得到了极大的增强，不仅具备了原先类组件所具备的强大能力，而且相较于类组件还有很多优势，使得现如今日常开发中几乎都用具备Hooks能力的函数组件进行功能开发。",-1),f={href:"https://reactjs.org/docs/hooks-intro.html#motivation",target:"_blank",rel:"noopener noreferrer"},m=h('<ul><li>类组件，难以重用有状态的逻辑，<code>render props</code>、高阶组件等方式很繁琐</li><li>类组件逻辑复杂的时候难以阅读</li><li>在Javascript中，类本身就是一个很容易导致错误的概念，比如与大多数编程语言含义都不一样的<code>this</code></li><li>React团队在探索性能优化，比如提前编译等技术，类组件容易导致性能优化的效果打折扣</li></ul><h2 id="hooks的本质" tabindex="-1"><a class="header-anchor" href="#hooks的本质" aria-hidden="true">#</a> Hooks的本质</h2><p>有的同学可能会问，老师说了这半天，Hooks很重要我们已经很清楚了，那究竟什么是Hooks呢？这个问题我们先不回答，因为解释起来很抽象，我们通过本章后续小结的案例观察和源码实现去体会，相信能够解答这个问题。</p><p>好了，关于Hooks基本情况我们就先介绍到这里，谢谢大家。</p>',4);function H(x,b){const t=a("ExternalLinkIcon");return n(),c("div",null,[i,d,o("p",null,[e("在官方文档："),o("a",_,[e("https://reactjs.org/docs/hooks-reference.html"),s(t)]),e("有下面的说明：")]),k,p,u,o("p",null,[e("那相较于类组件，引入了Hooks之后的函数组件具备一些什么优势呢？这个问题的答案其实在官方文档已经给出："),o("a",f,[e("https://reactjs.org/docs/hooks-intro.html#motivation"),s(t)])]),m])}const v=r(l,[["render",H],["__file","02.Hooks存在的意义.html.vue"]]);export{v as default};
