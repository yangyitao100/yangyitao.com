import{_ as e,o as i,c as n,f as s}from"./app.4326c516.js";const a={},l=s(`<h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><p>同学们好，在本章中，我们学习了 React 中的 Fiber 架构的一些核心概念和相关设计思想。现在让我们回顾一下本节课程的主要内容：</p><ul><li>Fiber架构是React为了解决性能问题和提升调度能力而引入的一种新的内部实现机制.它主要通过重新组织渲染过程，使React可以更有效地执行渲染任务。</li><li>介绍了Fiber、双缓冲策略、工作循环、并发模式等概念</li><li>后面通过一个思考题介绍了Fiber 架构的主要设计动机，这些动机包括：</li><li><ul><li>改进性能</li></ul></li><li><ul><li>引入优先级调度</li></ul></li><li><ul><li>支持并发模式</li></ul></li><li><ul><li>等等</li></ul></li></ul><p>这里提到的优先级调度机制，使 React 能够根据任务的优先级对它们进行调度。这有助于确保用户界面始终保持流畅且响应迅速。当然要想对任务进行优先级进行调度的前提就是任务是一个个可以单独处理的任务。所以Fiber 架构为 React 的并发模式（Concurrent Mode）奠定了基础。并发模式利用时间切片和优先级调度等概念，以提高用户界面的性能和响应速度。</p><p>通过学习本节课程，我们对 React 中的 Fiber 架构有了概念上的了解，理解了它的设计动机、原理。从下一章开始我们就正式开始手写React18的源码，在这个过程中会反复提到本章涉及到的概念。好了关于本章小结就先到这里，谢谢大家。</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const originalCode = &#39;This is the original code&#39;;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const updatedCode = &#39;This is the updated code&#39;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const unchangedCode = &#39;This code remains the same&#39;;
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),t=[l];function d(c,r){return i(),n("div",null,t)}const p=e(a,[["render",d],["__file","09.小结.html.vue"]]);export{p as default};
