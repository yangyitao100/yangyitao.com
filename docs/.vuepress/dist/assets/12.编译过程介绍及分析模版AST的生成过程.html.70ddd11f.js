import{_ as e,r as p,o,c,b as s,d as n,e as i,f as a}from"./app.03bf752b.js";const l={},u=a(`<h1 id="_12-编译过程介绍及分析模版ast的生成过程" tabindex="-1"><a class="header-anchor" href="#_12-编译过程介绍及分析模版ast的生成过程" aria-hidden="true">#</a> 12.编译过程介绍及分析模版AST的生成过程</h1><p>欢迎关注<strong>微信公众号：杨艺韬</strong></p><p>本文先会分析<code>Vue3</code>的编译过程主要包含哪些环节，理解了主体环节后，再带着大家深入分析<code>AST</code>的生成过程。</p><h1 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程" aria-hidden="true">#</a> 编译过程</h1><p>我们进入<code>core/packages/compiler-dom/src/index.ts</code>，会发现有这样的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span>
  template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>
    template<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> parserOptions<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// ignore &lt;script&gt; and &lt;tag&gt;</span>
        <span class="token comment">// this is not put inside DOMNodeTransforms because that list is used</span>
        <span class="token comment">// by compiler-ssr to generate vnode fallback branches</span>
        ignoreSideEffectTags<span class="token punctuation">,</span>
        <span class="token operator">...</span>DOMNodeTransforms<span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        DOMDirectiveTransforms<span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      transformHoist<span class="token operator">:</span> __BROWSER__ <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stringifyStatic
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>compile</code>的作用就是把模版字符串转化成一个<code>render</code>函数。而函数<code>compile</code>函数内部仅仅是调用了函数<code>baseCompile</code>，<code>baseCompile</code>函数是从<code>compiler-core</code>导入的，也就是关于编译相关的功能主要是在<code>compiler-core</code>中完成的。而<code>compiler-dom</code>主要是向函数<code>baseCompiler</code>传入了一系列的参数，这些参数代表什么含义我们在后文会在恰当的地方解释。</p><p>我们来看一下<code>compiler-core</code>中函数<code>baseCompile</code>的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>
  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>
  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>

  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> template
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token function">transform</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      prefixIdentifiers<span class="token punctuation">,</span>
      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token operator">...</span>nodeTransforms<span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// user transforms</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        directiveTransforms<span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// user transforms</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>
    ast<span class="token punctuation">,</span>
    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      prefixIdentifiers
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们对函数<code>baseCompile</code>进行精简了之后，做了三件重要的事情，调用<code>baseParse</code>函数返回<code>ast</code>，接着调用<code>transform</code>对<code>ast</code>进行处理，最后调用<code>generate</code>函数返回结果，其实这三个函数完成了下面三项工作：</p><ol><li>将模版字符串转化成<code>AST</code>；</li><li>将<code>AST</code>转化成可以用来描述<code>JavaScript</code>的<code>AST</code>；</li><li>根据第<strong>2</strong>步生成的可以描述<code>JavaScript</code>的<code>AST</code>生成一个函数。</li></ol><p>上面三项工作，每一项都涉及到大量代码，本文只分析<strong>Vue3</strong>是如何将模版字符串转化成<code>AST</code>的。</p><h1 id="ast的生成" tabindex="-1"><a class="header-anchor" href="#ast的生成" aria-hidden="true">#</a> AST的生成</h1><h2 id="什么是ast" tabindex="-1"><a class="header-anchor" href="#什么是ast" aria-hidden="true">#</a> 什么是AST</h2>`,14),r=s("code",null,"AST",-1),d={href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段3--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>yangyitao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时查看控制台输出的<code>AST</code>，我们提取其中的部分内容显示在这里：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 代码片段4</span>
<span class="token punctuation">{</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> &#39;yangyitao&#39;<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    isSelfClosing<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> &#39;&lt;div&gt;yangyitao&lt;/div&gt;&#39;<span class="token punctuation">}</span><span class="token punctuation">,</span>
    tag<span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
    tagType<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>4</strong>中没有对每一项都展开，但是我们依然可以直观的看到，所谓的<code>AST</code>其实就是一个对象，该对象可以用来描述我们传入的模版字符串。下面我们就进入<code>baseParse</code>函数，分析模版字符串转化为<code>render</code>函数的具体过程。</p><h2 id="baseparse函数" tabindex="-1"><a class="header-anchor" href="#baseparse函数" aria-hidden="true">#</a> baseParse函数</h2><p>我们来看函数<code>baseParse</code>的代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> ParserOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> RootNode <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>
    <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现函数<code>baseParse</code>内部主要通过<code>createParserContext</code>、<code>getCursor</code>、<code>createRoot</code>、<code>parseChildren</code>、<code>getSelection</code>等<strong>5</strong>个函数来完成工作。接下来我们就进入到这<strong>5</strong>个函数中去一探究竟。</p><h3 id="createparsercontext" tabindex="-1"><a class="header-anchor" href="#createparsercontext" aria-hidden="true">#</a> createParserContext</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段6</span>
<span class="token keyword">function</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  rawOptions<span class="token operator">:</span> ParserOptions
<span class="token punctuation">)</span><span class="token operator">:</span> ParserContext <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultParserOptions<span class="token punctuation">)</span>

  <span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> ParserOptions
  <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> rawOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-ignore</span>
    options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span>
      rawOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>
        <span class="token operator">?</span> defaultParserOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token operator">:</span> rawOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">,</span>
    column<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    line<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    originalSource<span class="token operator">:</span> content<span class="token punctuation">,</span> 
    source<span class="token operator">:</span> content<span class="token punctuation">,</span> 
    inPre<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    inVPre<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    onWarn<span class="token operator">:</span> options<span class="token punctuation">.</span>onWarn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于函数<code>createParserContext</code>，我们先忽略对<code>rawOptions</code>参数的处理，会发现该函数返回了一个对象。该对象记录了很多信息，我们这里主要关注<strong>5</strong>个属性：<code>column</code>、<code>line</code>、<code>offset</code>、<code>originalSource</code>、<code>source</code>。这<strong>5</strong>个属性具体代表什么含义呢？ 假设我们有这样的代码片段：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段7--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./compiler-dom.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> compile <span class="token punctuation">}</span> <span class="token operator">=</span> VueCompilerDOM<span class="token punctuation">;</span>
    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div&gt;yangyitao&lt;/div&gt;&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们查看函数<code>createParserContext</code>的首次调用的返回值，省略一些内容后有下面的信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 代码片段8</span>
<span class="token punctuation">{</span>
    column<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    line<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    originalSource<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;yangyitao&lt;/div&gt;&quot;</span><span class="token punctuation">,</span>
    source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;yangyitao&lt;/div&gt;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们解释下面<strong>5</strong>个属性的含义。</p><ol><li><code>column</code>：所谓<strong>列</strong>，是对模版字符串指解析到哪一列了，举个例子<code>&lt;div&gt;yangyitao&lt;/div&gt;</code>，如果程序处理完开始标签<code>&lt;div&gt;</code>，那么此时相当于程序已经解析到第<strong>6</strong>列，需要注意的是这里的<strong>列</strong>是相对于<strong>行</strong>的位置，比如代码解析到了第二行的第一个字符，那<strong>列</strong>的值依然是<strong>1</strong>；</li><li><code>line</code>：代码片段<strong>7</strong>中我们只有一行代码，所以这个值始终是<strong>1</strong>；</li><li><code>offset</code>：与<code>column</code>不同，偏移量<code>offset</code>是相对于我们要解析的整个模版字符串的位置。举个例子，如果我们要解析下面的模版字符串:</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
yangyitao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当解析完第一个标签<code>&lt;div&gt;</code>，<code>column</code>是<strong>1</strong>，但偏移量是<strong>5</strong>。需要注意的是偏移量是从<strong>0</strong>开始计数，而<code>column</code>和<code>line</code>是从<strong>1</strong>开始计数；</p><ol start="4"><li><code>originalSource</code>：代表整个待解析的模版字符串，对应代码片段<strong>7</strong>的<code>&lt;div&gt;yangyitao&lt;/div&gt;</code>；</li><li><code>source</code>：代表尚未解析模版字符串，比如代码片段<strong>7</strong>中的模版字符串<code>&lt;div&gt;yangyitao&lt;/div&gt;</code>如果将开始标签<code>&lt;div&gt;</code>解析完毕，那么<code>source</code>的值就应该是<code>yangyitao&lt;/div&gt;</code>；</li></ol><p>我们想一想，为什么要有这样一个上下文对象呢？所谓上下文对象，实际上就是维护了一个对象，这个对象记录了当前对模版字符串进行解析的状态，比如解析到什么地方了，还剩多少内容没有处理，同时还记录了当前处理节点的类型等等。代码片段<strong>6</strong>中我们刚才忽略了参数<code>rawOptions</code>，我们来看看这个<code>rawOptions</code>可能包括哪些内容：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段9</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> defaultParserOptions<span class="token operator">:</span> MergedParserOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  delimiters<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{{</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">}}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getNamespace</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getTextMode</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span>
  isVoidTag<span class="token operator">:</span> <span class="token constant">NO</span><span class="token punctuation">,</span>
  isPreTag<span class="token operator">:</span> <span class="token constant">NO</span><span class="token punctuation">,</span>
  isCustomElement<span class="token operator">:</span> <span class="token constant">NO</span><span class="token punctuation">,</span>
  decodeEntities<span class="token operator">:</span> <span class="token punctuation">(</span>rawText<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>
    rawText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>decodeRE<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> decodeMap<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  onError<span class="token operator">:</span> defaultOnError<span class="token punctuation">,</span>
  onWarn<span class="token operator">:</span> defaultOnWarn<span class="token punctuation">,</span>
  comments<span class="token operator">:</span> __DEV__
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码片段<strong>9</strong>中可以看出，我们的上下文不仅维护了状态还具备一些能力，通过这些能力可以获取当前操作节点的类型等等，至于什么是<code>TextModes</code>、<code>Namespaces</code>我们在后续用到的地方再讲解。</p><h3 id="getcursor" tabindex="-1"><a class="header-anchor" href="#getcursor" aria-hidden="true">#</a> getCursor</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段10</span>
<span class="token keyword">function</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">)</span><span class="token operator">:</span> Position <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> column<span class="token punctuation">,</span> line<span class="token punctuation">,</span> offset <span class="token punctuation">}</span> <span class="token operator">=</span> context
  <span class="token keyword">return</span> <span class="token punctuation">{</span> column<span class="token punctuation">,</span> line<span class="token punctuation">,</span> offset <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数逻辑非常简单，只是从上下文中获取了几个属性，这几个属性能反应出当前对模版字符串解析到什么位置了。</p><h3 id="getselection" tabindex="-1"><a class="header-anchor" href="#getselection" aria-hidden="true">#</a> getSelection</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段11</span>
<span class="token keyword">function</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>
  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>
  start<span class="token operator">:</span> Position<span class="token punctuation">,</span>
  end<span class="token operator">?</span><span class="token operator">:</span> Position
<span class="token punctuation">)</span><span class="token operator">:</span> SourceLocation <span class="token punctuation">{</span>
  end <span class="token operator">=</span> end <span class="token operator">||</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    start<span class="token punctuation">,</span>
    end<span class="token punctuation">,</span>
    source<span class="token operator">:</span> context<span class="token punctuation">.</span>originalSource<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>offset<span class="token punctuation">,</span> end<span class="token punctuation">.</span>offset<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数返回的是一个对象，这个对象代表了一个完整节点的代码内容以及这些内容在整个模版字符串中的开始位置和结束位置。至于开始位置和结束位置是通过上文介绍过的<strong>列</strong>、<strong>行</strong>、<strong>偏移量</strong>来进行描述。</p><h3 id="createroot" tabindex="-1"><a class="header-anchor" href="#createroot" aria-hidden="true">#</a> createRoot</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段12</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>
  children<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  loc <span class="token operator">=</span> locStub
<span class="token punctuation">)</span><span class="token operator">:</span> RootNode <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    helpers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    hoists<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    cached<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    temps<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    loc
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数返回的其实就是一个我们所说的<code>AST</code>，<code>AST</code>是什么，<code>AST</code>就是一个对象，就是一个用来描述模版字符串的对象。需要注意的是，根节点有一个特殊的类型来标识<code>NodeTypes.ROOT</code>。</p><h3 id="parsechildren" tabindex="-1"><a class="header-anchor" href="#parsechildren" aria-hidden="true">#</a> parseChildren</h3><p>函数<code>parseChildren</code>可以说是整个解析模版字符串功能的灵魂，鉴于代码量太大，我们来看精简过后的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段13</span>
<span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>
  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>
  mode<span class="token operator">:</span> TextModes<span class="token punctuation">,</span>
  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>
  <span class="token keyword">const</span> nodes<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!DOCTYPE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;![CDATA[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">!==</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              node <span class="token operator">=</span> <span class="token function">parseCDATA</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nodes
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数原本还有很多其他比较重要的逻辑，但核心的逻辑就如代码片段<strong>13</strong>所描述的那样。这段代码该如何去理解呢？里面有两个关键的变量，一个是<code>parent</code>用来描述解析的子节点归属于哪个父节点，另一个变量是<code>nodes</code>表示解析得到的子节点的数组。同时，代码片段<strong>13</strong>中还调用了几个关键的函数<code>parseElement</code>、<code>parseCDATA</code>、<code>parseText</code>、<code>parseComment</code>、<code>parseBogusComment</code>、<code>parseInterpolation</code>。</p><p>在解释这几个函数具体是如何实现的之前，我们需要搞清楚<code>TextModes</code>具备什么作用，才能明白为什么需要这几个函数来分工协作。</p><h3 id="textmodes" tabindex="-1"><a class="header-anchor" href="#textmodes" aria-hidden="true">#</a> TextModes</h3><p>我们先来观察<code>TextModes</code>的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段14</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> TextModes <span class="token punctuation">{</span>
  <span class="token comment">//          | Elements | Entities | End sign              | Inside of</span>
  <span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token comment">//    | ✔        | ✔        | End tags of ancestors |</span>
  <span class="token constant">RCDATA</span><span class="token punctuation">,</span> <span class="token comment">//  | ✘        | ✔        | End tag of the parent | &lt;textarea&gt;</span>
  <span class="token constant">RAWTEXT</span><span class="token punctuation">,</span> <span class="token comment">// | ✘        | ✘        | End tag of the parent | &lt;style&gt;,&lt;script&gt;</span>
  <span class="token constant">CDATA</span><span class="token punctuation">,</span>
  <span class="token constant">ATTRIBUTE_VALUE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Vue3</strong>通过<code>TextModes</code>来区分，当前处理的模版字符串内容属于什么类型。普通标签用<code>DATA</code>来表示，<code>textarea</code>中的文本用<code>RCDATA</code>来表示，模版字符串原则上不会有<code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>标签存在的，所以对这类型的字符串不做任何处理。<code>RCDATA</code>相较于<code>DATA</code>，有一个不同点，<code>DATA</code>类型的处理方式会对元素标签进行正常解析，但是<code>RCDATA</code>不会解析标签，但这二者都会解析<strong>实体</strong>字符串。而至于<code>CDATA</code>也是对其中的内容不做解析。而<code>ATTRIBUTE_VALUE</code>则主要用来标识标签的属性部分内容。</p><p>其实可以理解为，对于模版字符串的不同的内容类型，采取不同的策略来进行解析。而这些策略，就是我们上面提到过的<code>parseElement</code>、<code>parseCDATA</code>、<code>parseText</code>、<code>parseComment</code>、<code>parseBogusComment</code>、<code>parseInterpolation</code>等函数。虽然对不同类型的数据具体处理各不相同，但是解析的方式主要逻辑是很相似的。所以本文不打算对每一个函数进行详细分析，而只是对极具代表性的函数<code>parseElement</code>进行讲解。</p><h3 id="parseelement" tabindex="-1"><a class="header-anchor" href="#parseelement" aria-hidden="true">#</a> parseElement</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段14</span>
<span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>
  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>
  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略很多代码...</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>Start<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token comment">// 此处省略很多代码...</span>
  ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token keyword">const</span> mode <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getTextMode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
  ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 此处省略很多代码...</span>
  element<span class="token punctuation">.</span>children <span class="token operator">=</span> children
  <span class="token comment">// 此处省略很多代码...</span>
  <span class="token keyword">return</span> element
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略大量代码留下核心逻辑，里面有有三个点值得关注：</p><ol><li>利用<code>ancestors</code>维护当前节点的所有父节点;</li><li>通过<code>parseChildren</code>获取子节点的内容；</li><li>将获取的子节点内容赋值给当前节点<code>element.children = children</code>;</li><li>利用<code>parseTag</code>解析节点本身的内容。</li></ol><p>上面后三个点中的后两个点其实概括了<code>parseElement</code>的核心工作。而变量<code>accestors</code>目前来看主要和命名空间<code>ns</code>相关，但是<code>ns</code>在目前项目中主要是枚举值<code>HTML</code>，所以其作用比较微弱，拿出来讲一讲是为了防止大家疑惑，唯一值得注意的一个点是<code>accestors</code>是一个<strong>栈</strong>，从代码片段<strong>14</strong>中可以看出，在解析子节点之前先<code>push</code>该节点，紧接着解析完子节点后再<code>pop</code>出当前节点，这样就保证了解析的子节点都能获取到自己正确的父节点。</p><p>第<strong>2</strong>个关键点，相当于递归执行代码片段<strong>13</strong>。而第<strong>3</strong>个关键点则是直接将解析到的结果赋值给当前节点，第<strong>4</strong>个关键点是解析标签本身，下面开始分析<code>parseTag</code>函数。</p><h3 id="parsetag" tabindex="-1"><a class="header-anchor" href="#parsetag" aria-hidden="true">#</a> parseTag</h3><p>请看<code>parseTag</code>函数的代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段15</span>
<span class="token keyword">function</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>
  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>
  type<span class="token operator">:</span> TagType<span class="token punctuation">,</span>
  parent<span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token comment">// Tag open.</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token operator">!</span>
  <span class="token keyword">const</span> tag <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> ns <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>

  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>

  <span class="token comment">// save current state in case we need to re-parse attributes with v-pre</span>
  <span class="token keyword">const</span> cursor <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">const</span> currentSource <span class="token operator">=</span> context<span class="token punctuation">.</span>source
  
  <span class="token comment">// Attributes.</span>
  <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token function">parseAttributes</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> isSelfClosing <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span>
  
  <span class="token keyword">let</span> tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">SLOT</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        props<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>
          p <span class="token operator">=&gt;</span>
            p<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSpecialTemplateDirective</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">TEMPLATE</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComponent</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
    ns<span class="token punctuation">,</span>
    tag<span class="token punctuation">,</span>
    tagType<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    isSelfClosing<span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    loc<span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>
    codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// to be created during transform phase</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略了很多代码后，我们能比较容易得出下面几个结论：</p><ol><li>函数<code>parseTag</code>返回的是一个对象；</li><li>函数<code>parseTag</code>返回的对象中包括一个重要的属性<code>props</code>;</li><li>函数<code>parseTag</code>返回的对象中包括一个重要的属性<code>type</code>;</li></ol><p>其实可以简单理解该函数返回了一个对象，该对象描述了一个<code>html</code>标签，比如下面的模版代码： <code>&lt;div id=&#39;app&#39;&gt;yangyitao&lt;/div&gt;</code>中<code>&lt;div id=&#39;app&#39;&gt;</code>就是<code>parseTag</code>返回的对象所需要描述的东西。至于解析属性的函数<code>parseAttributes</code>实现逻辑比较简单代码量也不多，大家可以自己进行分析。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>本文从<code>compiler-dom</code>中的<code>compile</code>函数讲起，分析了模版字符串解析成<code>AST</code>的核心流程，希望大家能在阅读文章后多进行调试，深入掌握<code>AST</code>的生成过程。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情支持：</p><ul><li>如果<code>点赞，点在看，转发</code>可以让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>`,59);function v(m,b){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("为了直观的体会"),r,n("是什么，我们在这个网址上"),s("a",d,[n("https://vue-next-template-explorer.netlify.app/"),i(t)]),n("输入下面的代码：")]),k])}const f=e(l,[["render",v],["__file","12.编译过程介绍及分析模版AST的生成过程.html.vue"]]);export{f as default};
