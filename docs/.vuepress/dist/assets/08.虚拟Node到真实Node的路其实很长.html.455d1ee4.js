import{_ as n,o as s,c as a,f as t}from"./app.c996eb5c.js";const e={},o=t(`<h1 id="_08-虚拟node到真实node的路其实很长" tabindex="-1"><a class="header-anchor" href="#_08-虚拟node到真实node的路其实很长" aria-hidden="true">#</a> 08.虚拟Node到真实Node的路其实很长</h1><p>前面我们知道了，从<strong>虚拟Node</strong>到<strong>真实Node</strong>是借助一个叫做<code>render</code>的函数来完成。本文会带着大家进入<code>render</code>函数，先从从总体上把握<strong>Vue3</strong>的渲染核心流程以及部分源码实现细节。至于比较重要的一些细节，比如组件如何渲染如何更新，<strong>diff算法</strong>具体如何实现，将在后续的文章一一进行分析。</p><h1 id="render函数" tabindex="-1"><a class="header-anchor" href="#render函数" aria-hidden="true">#</a> <code>render</code>函数</h1><p>先直接看<code>render</code>函数的代码实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">const</span> render<span class="token operator">:</span> <span class="token function-variable function">RootRenderFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先来看看该函数的参数，第一个参数是<strong>虚拟Node</strong>对象，第二个参数是一个<code>Element</code>对象，第三个参数暂时先忽略。<code>render</code>函数的内部逻辑也很简单，做了下面几件事情：</p><ol><li>如果传入的<strong>虚拟Node</strong>对象是空，则判断<code>container</code>对应的元素曾经是否渲染过其他<strong>虚拟Node</strong>，如果是则从<code>container</code>上卸载该<strong>虚拟Node</strong>对应的节点，如果不是则什么都不做，将<code>container._vnode</code>置空即可。<code>container._vnode</code>中的值来源于<code>render</code>函数的最后一行代码；</li><li>如果传入的<strong>虚拟Node</strong>不为空，则需要和<code>container</code>元素上挂载过的<code>_vnode</code>所代表的<strong>DOM</strong>元素进行比较并修改当前的真实<strong>DOM</strong>树，这个逻辑都由<code>patch</code>函数来实现，也是本文的重点内容；</li><li>执行<code>flushPostFlushCbs</code>将保存在数组<code>pendingPostFlushCbs</code>中的函数依次执行，至于什么时候给数组<code>pendingPostFlushCbs</code>中添加元素，具体又是如何执行的这些函数，本文暂时不讲，后续的文章中如有必要会用一小节来介绍。</li></ol><h1 id="patch才是灵魂" tabindex="-1"><a class="header-anchor" href="#patch才是灵魂" aria-hidden="true">#</a> <code>patch</code>才是灵魂</h1><p><strong>Vue3</strong>的渲染流程，虽然是通过调用<code>render</code>函数实现，但<code>patch</code>才是整个渲染流程的灵魂。我们来看看<code>patch</code>函数的具体实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">const</span> patch<span class="token operator">:</span> <span class="token function-variable function">PatchFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    n1<span class="token punctuation">,</span>
    n2<span class="token punctuation">,</span>
    container<span class="token punctuation">,</span>
    anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    parentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    parentSuspense <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    isSVG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    slotScopeIds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    optimized <span class="token operator">=</span> __DEV__ <span class="token operator">&amp;&amp;</span> isHmrUpdating <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>n2<span class="token punctuation">.</span>dynamicChildren
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">===</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// patching &amp; not same type, unmount old tree</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      n1 <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>patchFlag <span class="token operator">===</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">BAIL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      optimized <span class="token operator">=</span> <span class="token boolean">false</span>
      n2<span class="token punctuation">.</span>dynamicChildren <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> n2
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> Text<span class="token operator">:</span>
        <span class="token function">processText</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> Comment<span class="token operator">:</span>
        <span class="token function">processCommentNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> Static<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">mountStaticNode</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">patchStaticNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> Fragment<span class="token operator">:</span>
        <span class="token function">processFragment</span><span class="token punctuation">(</span>
         <span class="token comment">// 此处省略若干代码...</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">processElement</span><span class="token punctuation">(</span>
            <span class="token comment">// 此处省略若干代码...</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">processComponent</span><span class="token punctuation">(</span>
            <span class="token comment">// 此处省略若干代码...</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> <span class="token keyword">typeof</span> TeleportImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>
            <span class="token comment">// 此处省略若干代码...</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> <span class="token keyword">typeof</span> SuspenseImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>
            <span class="token comment">// 此处省略若干代码...</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid VNode type:&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">typeof</span> <span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// set ref</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parentComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>ref<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> n2 <span class="token operator">||</span> n1<span class="token punctuation">,</span> <span class="token operator">!</span>n2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>patch</code>函数内部根据传入的<strong>虚拟Node</strong>的类型不同，会分别调用不同的函数进行处理。这里面有两个点值得我们关注：</p><ol><li>搞清楚<code>patch</code>函数的使命；</li><li>通过位运算的方式来进行类型判断；</li></ol><h2 id="patch函数的使命" tabindex="-1"><a class="header-anchor" href="#patch函数的使命" aria-hidden="true">#</a> <code>patch</code>函数的使命</h2><p>可能大家会觉得奇怪，刚才不是已经讲过了<code>patch</code>函数的主要逻辑就是根据<strong>虚拟Node</strong>的不同类型来调用不同的函数来进行处理吗？还有什么使命？没错，<code>patch</code>函数的逻辑很清晰，但是我想在这里强调，<code>patch</code>存在的根本意义是寻找<strong>新虚拟Node</strong>和当前<strong>真实Node</strong>对应的<strong>旧虚拟Node</strong>的差异，并根据这种差异修改<strong>DOM树</strong>以抹平这种差异。理解了这个就能很轻松的理解，为什么有这样的语句：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段3</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">===</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为新旧<strong>虚拟Node</strong>没有差异，当然也就没有继续进行的必要了。我们也能轻松的理解下面的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段4</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
  <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  n1 <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<strong>旧虚拟Node</strong>存在，而且<strong>新虚拟Node</strong>和<strong>旧虚拟Node</strong>的类型不一致，则卸载<strong>旧虚拟Node</strong>，同时将该<strong>旧虚拟Node</strong>置为空。会发现这里有个<code>anchor</code>变量，如果该<code>anchor</code>始终为<code>null</code>则会导致我们新插入元素的时候始终是在尾部，与其所替换的元素的位置不一致，所以需要在卸载<strong>旧虚拟Node</strong>对应的<strong>真实Node</strong>之前，用<code>anchor</code>记录其下一个元素。</p><p>同时我们理解了<code>patch</code>函数的使命，可以尝试想象如果让我们来实现<code>patch</code>函数该怎么做，可能我们很自然的想到，完全可以直接把旧节点删除，插入新节点的内容即可，实现相同的功能可以将几千行代码简化到几行完成，看似低级的实现却也让我们认清了<code>patch</code>函数的本质。在本文的后半部分，会介绍<code>patch</code>函数中调用的很多其他函数，相信有了我们前面的认识可以更好的理解<strong>Vue3</strong>为什么要这么实现<code>patch</code>函数。</p><h2 id="类型判断方式" tabindex="-1"><a class="header-anchor" href="#类型判断方式" aria-hidden="true">#</a> 类型判断方式</h2><p>我们发现代码片段<strong>2</strong>中有几处形如<code>if (shapeFlag &amp; ShapeFlags.ELEMENT)</code>的代码，为什么要这么判断呢？要回答这个问题，我们先看看<code>shapeFlag</code>是什么，<code>ShapeFlags.ELEMENT</code>是从哪里来的。</p><p><code>shapeFlag</code>是从<code>patch</code>函数的第<strong>2</strong>个参数也就是<strong>新虚拟Node</strong>上解构出来的，该值是个数值类型。我们再来看看<code>ShapeFlags</code>的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ShapeFlags <span class="token punctuation">{</span>
  <span class="token constant">ELEMENT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">FUNCTIONAL_COMPONENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">STATEFUL_COMPONENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">TEXT_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token constant">ARRAY_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token constant">SLOTS_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token constant">TELEPORT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
  <span class="token constant">SUSPENSE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token constant">COMPONENT_SHOULD_KEEP_ALIVE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token constant">COMPONENT_KEPT_ALIVE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>
  <span class="token constant">COMPONENT</span> <span class="token operator">=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span> <span class="token operator">|</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">FUNCTIONAL_COMPONENT</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码片段<strong>5</strong>中可以看见<code>ShapeFlags</code>是一个枚举类型。对位运算不了解的朋友可能已经充满了疑惑，为什么要这么表示？要回答这个问题，还得先了解位运算的左移、与、或运算。</p><p>假设我们有<strong>8</strong>个二进制位<code>00000000</code>，每一个二进制位表示<strong>小A</strong>是否具备一项能力，<code>1</code>表示具备，<code>0</code>表示不具备，具体能力映射如下。</p><table><thead><tr><th>篮球</th><th>足球</th><th>游泳</th><th>英语</th><th>喝酒</th><th>美食</th><th>跑步</th><th>开车</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>如果小A会跑步可以这样描述：</p><table><thead><tr><th>篮球</th><th>足球</th><th>游泳</th><th>英语</th><th>喝酒</th><th>美食</th><th>跑步</th><th>开车</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td></tr></tbody></table><p>如果小A不仅会跑步还会喝酒，可以这样描述：</p><table><thead><tr><th>篮球</th><th>足球</th><th>游泳</th><th>英语</th><th>喝酒</th><th>美食</th><th>跑步</th><th>开车</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td><code>1</code></td><td>0</td></tr></tbody></table><p>基于上面的认知，我们可以把不同状态这样来表示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// xiaoAState为0，表示小A，什么技能都不会</span>
<span class="token keyword">let</span> xiaoAState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 0 0 0 0 0 0 0 0</span>
<span class="token keyword">const</span> <span class="token constant">DRIVE_CAR</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0 0 0 0 0 0 0 1</span>
<span class="token keyword">const</span> <span class="token constant">RUN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 0 0 0 0 0 0 1 0</span>
<span class="token keyword">const</span> <span class="token constant">FOOD</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 0 0 0 0 0 1 0 0</span>
<span class="token keyword">const</span> <span class="token constant">DRINK</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 0 0 0 0 1 0 0 0</span>

<span class="token comment">// 让小A具备喝酒的能力，可以这样进行运算：</span>
xiaoAState <span class="token operator">|=</span> <span class="token constant">DRINK</span><span class="token punctuation">;</span> <span class="token comment">// 0 0 0 0 1 0 0 0</span>
<span class="token comment">// 让小A具备跑步的能力，可以这样运算：</span>
xiaoAState <span class="token operator">|=</span> <span class="token constant">RUN</span><span class="token punctuation">;</span>   <span class="token comment">// 0 0 0 0 1 0 1 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或运算可以下面的表格进行理解：</p><table><thead><tr><th>篮球</th><th>足球</th><th>游泳</th><th>英语</th><th>喝酒</th><th>美食</th><th>跑步</th><th>开车</th><th><code>运算符号</code></th><th><code>含义</code></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td>0</td><td>0</td><td></td><td><code>DRINK</code></td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td><code>或</code></td><td><code>RUN</code></td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td><code>1</code></td><td>0</td><td></td><td><code>结果</code></td></tr></tbody></table><p>当我们想判断小A是否具备某项能力的时候可以借助于<code>&amp;</code>运算，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>xiaoAState <span class="token operator">&amp;</span> <span class="token constant">DRINK</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小A确实会喝酒&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>xiaoAState <span class="token operator">&amp;</span> <span class="token constant">FOOD</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小A会做饭&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小A不会做饭&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么可以这样判断呢，我们先来看看，<code>xiaoAState &amp; FOOD</code>的示意：</p><table><thead><tr><th>篮球</th><th>足球</th><th>游泳</th><th>英语</th><th>喝酒</th><th>美食</th><th>跑步</th><th>开车</th><th><code>运算符号</code></th><th><code>含义</code></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td><code>1</code></td><td>0</td><td></td><td><code>xiaoAState</code></td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>1</code></td><td>0</td><td>0</td><td><code>&amp;</code></td><td><code>FOOD</code></td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td><code>0</code></td><td><code>0</code></td><td><code>0</code></td><td>0</td><td></td><td><code>结果</code></td></tr></tbody></table><p>不难发现<code>xiaoAState</code>和自己不具备的能力进行了<code>&amp;</code>运算之后，结果值是<code>0</code>，反之如果是和自己具备的能力进行<code>&amp;</code>运算，结果值就是<code>1</code>，这也就是为什么能够通过<code>&amp;</code>运算来判断<code>xiaoAState</code>是否具备某个能力的原理。到了这里也就不难发现代码片段<code>5</code>为什么要以<code>1</code>为初始值，然后不断左移<code>1</code>位，一切都是为了方便计算。同时这种方式可以让一个属性值表示多个状态，就像上文示范的<code>xiaoAState</code>不仅可以表示具备喝酒的能力还可以表示具备跑步的能力或者其他很多的能力。不得不说这种方式很巧妙，而且性能也比较高，在实际工作中类似场景完全可以借鉴。</p><p>下面我们开始探索<code>patch</code>函数内部调用的其他函：</p><h2 id="processtext" tabindex="-1"><a class="header-anchor" href="#processtext" aria-hidden="true">#</a> <code>processText</code></h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段6</span>
<span class="token keyword">const</span> processText<span class="token operator">:</span> <span class="token function-variable function">ProcessTextOrCommentFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">hostInsert</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateText</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el<span class="token operator">!</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token operator">!==</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hostSetText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑比较简单，如果<strong>旧虚拟Node</strong>为<code>null</code>，则直接将文本插入到容器即可，如果不为<code>null</code>，则说明需要进行更新。这里有三个点值得我们关注：</p><ol><li><code>hostInsert</code>、<code>hostSetText</code>从哪里来的呢？还记得我们在<code>runtime-dom</code>传入的参数<code>const rendererOptions = extend({ patchProp }, nodeOps)</code>吗，没错，具体对<code>DOM</code>节点进行删除、修改、增加都是<code>runtime-dom</code>或者其他平台传入的方法。<code>runtime-core</code>只需要关心将要对节点进行什么类型的操作，但这些操作具体怎么实现由传入的参数决定。这就是<code>runtime-core</code>平台无关的原因。</li><li>代码<code>n2.el = hostCreateText(n2.children as string)</code>可以看出<strong>虚拟Node</strong>的<code>el</code>属性，保存的是一个<code>DOM</code>对象，哪怕这个<code>DOM</code>对象是个文本也不例外。</li><li><code>const el = (n2.el = n1.el!)</code>这行代码比较巧妙，将<strong>旧虚拟Node</strong>的<code>el</code>属性值赋值给<strong>新虚拟Node</strong>的属性<code>el</code>，相当于在<strong>旧虚拟Node</strong>对应的<code>DOM</code>节点的基础上进行操作，而不是新创建节点，减少了性能消耗。</li></ol><h2 id="processcommentnode" tabindex="-1"><a class="header-anchor" href="#processcommentnode" aria-hidden="true">#</a> <code>processCommentNode</code></h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段7</span>
<span class="token keyword">const</span> processCommentNode<span class="token operator">:</span> <span class="token function-variable function">ProcessTextOrCommentFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    n1<span class="token punctuation">,</span>
    n2<span class="token punctuation">,</span>
    container<span class="token punctuation">,</span>
    anchor
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">hostInsert</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateComment</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// there&#39;s no support for dynamic comments</span>
      n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里逻辑比较简单，如果<strong>新虚拟Node</strong>是注释类型，则判断<strong>旧虚拟Node</strong>是否存在，如果不存在则直接执行插入操作。如果存在则直接将<strong>旧虚拟Node</strong>对应的<code>el</code>元素赋值给<strong>新虚拟Node</strong>的<code>el</code>，不做任何其他处理，因为<strong>Vue3</strong>中是不支持注释响应式发生变化，也就是说注释创建后不会被更改。</p><h2 id="mountstaticnode" tabindex="-1"><a class="header-anchor" href="#mountstaticnode" aria-hidden="true">#</a> <code>mountStaticNode</code></h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段8</span>
<span class="token keyword">const</span> <span class="token function-variable function">mountStaticNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    n2<span class="token operator">:</span> VNode<span class="token punctuation">,</span>
    container<span class="token operator">:</span> RendererElement<span class="token punctuation">,</span>
    anchor<span class="token operator">:</span> RendererNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    isSVG<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// static nodes are only present when used with compiler-dom/runtime-dom</span>
    <span class="token comment">// which guarantees presence of hostInsertStaticContent.</span>
    <span class="token punctuation">;</span><span class="token punctuation">[</span>n2<span class="token punctuation">.</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>anchor<span class="token punctuation">]</span> <span class="token operator">=</span> hostInsertStaticContent<span class="token operator">!</span><span class="token punctuation">(</span>
      n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
      container<span class="token punctuation">,</span>
      anchor<span class="token punctuation">,</span>
      isSVG<span class="token punctuation">,</span>
      n2<span class="token punctuation">.</span>el<span class="token punctuation">,</span>
      n2<span class="token punctuation">.</span>anchor
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mountStaticNode</code>的功能是将<strong>新虚拟Node</strong>的静态内容挂载到<code>container</code>上，处理方法也很简单，直接调用<code>runtime-dom</code>传入的函数<code>hostInsertStaticContent</code>。需要注意的两个细节如下：</p><ol><li>在平时编码的过程中，以<code>(</code>、<code>[</code>开头的表达式，前面应该加一个<code>;</code>以防止在代码被压缩后与上一行的内容拼接成属性访问语句。</li><li>不太清楚解构赋值的语法朋友对<code>[n2.el, n2.anchor] = xxx</code>的表示可能很疑惑，可以查阅<code>MDN</code>文档了解相关含义。</li></ol><h2 id="patchstaticnode" tabindex="-1"><a class="header-anchor" href="#patchstaticnode" aria-hidden="true">#</a> <code>patchStaticNode</code></h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段9</span>
<span class="token keyword">const</span> <span class="token function-variable function">patchStaticNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    n1<span class="token operator">:</span> VNode<span class="token punctuation">,</span>
    n2<span class="token operator">:</span> VNode<span class="token punctuation">,</span>
    container<span class="token operator">:</span> RendererElement<span class="token punctuation">,</span>
    isSVG<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// static nodes are only patched during dev for HMR</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token operator">!==</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> anchor <span class="token operator">=</span> <span class="token function">hostNextSibling</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>anchor<span class="token operator">!</span><span class="token punctuation">)</span>
      <span class="token comment">// remove existing</span>
      <span class="token function">removeStaticNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
      <span class="token comment">// insert new</span>
      <span class="token punctuation">;</span><span class="token punctuation">[</span>n2<span class="token punctuation">.</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>anchor<span class="token punctuation">]</span> <span class="token operator">=</span> hostInsertStaticContent<span class="token operator">!</span><span class="token punctuation">(</span>
        n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor<span class="token punctuation">,</span>
        isSVG
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el
      n2<span class="token punctuation">.</span>anchor <span class="token operator">=</span> n1<span class="token punctuation">.</span>anchor
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>patchStaticNode</code>只在开发环境下才有可能调用，为什么呢？因为既然是静态节点，就不存在响应式数据的变化也就不存在更新，所以也就不会调用这个函数。但是开发环境热更新的时候可能会变化相应数据，里面逻辑比较简单，如果还是觉得读起来有困难可以先跳过，不做重点掌握。</p><h2 id="processfragment、processcomponent" tabindex="-1"><a class="header-anchor" href="#processfragment、processcomponent" aria-hidden="true">#</a> <code>processFragment</code>、<code>processComponent</code></h2><p>关于函数<code>processFragment</code>、<code>processComponent</code>内部的流程，在后续的文章中进行分析。</p><h2 id="setref" tabindex="-1"><a class="header-anchor" href="#setref" aria-hidden="true">#</a> <code>setRef</code></h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段10</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parentComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>ref<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> n2 <span class="token operator">||</span> n1<span class="token punctuation">,</span> <span class="token operator">!</span>n2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得我们在上一篇文章中介绍的关于通过<code>ref</code>获取子组件的内容吗，当时我们介绍了<code>getExposeProxy</code>的核心功能是保护子组件的内容不被父组件随意访问。在<code>patch</code>函数中调用了<code>setRef</code>，而<code>setRef</code>中则调用了<code>getExposeProxy</code>函数。我们看看<code>setRef</code>究竟做了什么：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段11</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setRef</span><span class="token punctuation">(</span>
  rawRef<span class="token operator">:</span> VNodeNormalizedRef<span class="token punctuation">,</span>
  oldRawRef<span class="token operator">:</span> VNodeNormalizedRef <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  parentSuspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span>
  isUnmount <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">const</span> refValue <span class="token operator">=</span>
    vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span>
      <span class="token operator">?</span> <span class="token function">getExposeProxy</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token operator">||</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>proxy
      <span class="token operator">:</span> vnode<span class="token punctuation">.</span>el
  <span class="token keyword">const</span> value <span class="token operator">=</span> isUnmount <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> refValue

  <span class="token keyword">const</span> <span class="token punctuation">{</span> i<span class="token operator">:</span> owner<span class="token punctuation">,</span> r<span class="token operator">:</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> rawRef
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">const</span> oldRef <span class="token operator">=</span> oldRawRef <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>oldRawRef <span class="token keyword">as</span> VNodeNormalizedRefAtom<span class="token punctuation">)</span><span class="token punctuation">.</span>r
  <span class="token keyword">const</span> refs <span class="token operator">=</span> owner<span class="token punctuation">.</span>refs <span class="token operator">===</span> <span class="token constant">EMPTY_OBJ</span> <span class="token operator">?</span> <span class="token punctuation">(</span>owner<span class="token punctuation">.</span>refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> owner<span class="token punctuation">.</span>refs
  <span class="token keyword">const</span> setupState <span class="token operator">=</span> owner<span class="token punctuation">.</span>setupState

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldRef <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldRef <span class="token operator">!==</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>oldRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      refs<span class="token punctuation">[</span>oldRef<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>setupState<span class="token punctuation">,</span> oldRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        setupState<span class="token punctuation">[</span>oldRef<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>oldRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">FUNCTION_REF</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> refs<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _isString <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span>
    <span class="token keyword">const</span> _isRef <span class="token operator">=</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_isString <span class="token operator">||</span> _isRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">doSet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略许多代码...</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">;</span><span class="token punctuation">(</span>doSet <span class="token keyword">as</span> SchedulerJob<span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>doSet<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">doSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 此处省略许多代码...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于函数<code>setRef</code>，我们目前只需要知道主要做了<strong>3</strong>点即可：</p><ol><li>获取<code>ref</code>的代理对象；</li><li>找到<strong>旧虚拟Node</strong>对应的<code>ref</code>，如果存在且和<strong>新虚拟Node</strong>对应的<code>ref</code>不一致则置为<code>null</code>；</li><li>将新的<code>ref</code>代理对象赋值给<strong>新虚拟Node</strong>相应的属性。</li></ol><p>至于代码片段<strong>11</strong>呈现出来的关于<code>ref</code>的各种属性以及一些细节，在后续文章中合适的时机我们再继续探讨。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情支持：</p><ul><li>如果<code>点赞，点在看，转发</code>可以让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>`,67),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","08.虚拟Node到真实Node的路其实很长.html.vue"]]);export{u as default};
