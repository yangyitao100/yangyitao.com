import{_ as n,o as s,c as a,f as t}from"./app.c996eb5c.js";const p={},e=t(`<h1 id="_06-single-spa的注册机制" tabindex="-1"><a class="header-anchor" href="#_06-single-spa的注册机制" aria-hidden="true">#</a> 06.single-spa的注册机制</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在前面的5篇文章中，我们对乾坤进行了比较深入的介绍，但是无论怎么深入都是不全面的，甚至某种意义上来讲乾坤并不是一个微前端框架，<code>single-spa</code>才是，乾坤只是一个对<code>single-spa</code>进行增强的一个方案。接下来的几篇文章主要对single-spa的一些核心机制和功能从源码层面对其进行分析。本文主要分析<code>single-spa</code>的注册机制。</p></blockquote><h2 id="registerapplication的主要逻辑" tabindex="-1"><a class="header-anchor" href="#registerapplication的主要逻辑" aria-hidden="true">#</a> registerApplication的主要逻辑</h2><p>我先来看<code>single-spa</code>暴露的注册函数的主要逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">registerApplication</span><span class="token punctuation">(</span>
  <span class="token parameter">appNameOrConfig<span class="token punctuation">,</span>
  appOrLoadApp<span class="token punctuation">,</span>
  activeWhen<span class="token punctuation">,</span>
  customProps</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 关键点1</span>
  <span class="token keyword">const</span> registration <span class="token operator">=</span> <span class="token function">sanitizeArguments</span><span class="token punctuation">(</span>
    appNameOrConfig<span class="token punctuation">,</span>
    appOrLoadApp<span class="token punctuation">,</span>
    activeWhen<span class="token punctuation">,</span>
    customProps
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里省去许多逻辑...</span>
  <span class="token comment">// 关键点2</span>
  apps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">loadErrorTime</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token constant">NOT_LOADED</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parcels</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">devtools</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">overlays</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">selectors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      registration
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isInBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关键点3</span>
    <span class="token function">ensureJQuerySupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键点4</span>
    <span class="token function">reroute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从整体上看，<code>registerApplication</code>一共做了<strong>4</strong>件比较重要的事情。 <strong>首先</strong>，是对参数进行处理，对应代码片段<strong>1</strong>中的关键点<strong>1</strong>，参数处理函数<code>sanitizeArguments</code>有几十行代码，具体怎么处理的，逻辑相对简单，这里就不描述了。对参数的合理处理，给用户提供了更多的灵活性，可以通过不同形式来传递参数，然后将不同格式的参数处理成统一格式。同时，对参数进行了校验。这种写法很常见，在我们日常编程中可以借鉴。 <strong>其次</strong>，是将微应用保存到数组<code>apps</code>中，<code>apps</code>是一个全局变量，会存放所有的注册过的微应用。这个数组很重要，微应用的各种状态都保存在这里，实际上<code>single-spa</code>的核心工作就是对<code>apps</code>中保存的微应用进行管理和控制。 <strong>再次</strong>，是调用<code>ensureJQuerySupport</code>函数对JQuery的某些监听事件进行拦截，下文中进行详述。 <strong>最后</strong>，是调用<code>reroute</code>函数，主要是加载微应用，下文中会进行详述。</p><h2 id="ensurejquerysupport" tabindex="-1"><a class="header-anchor" href="#ensurejquerysupport" aria-hidden="true">#</a> ensureJQuerySupport</h2><p>我看先看<code>ensureJQuerySupport</code>函数的逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ensureJQuerySupport</span><span class="token punctuation">(</span><span class="token parameter">jQuery <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里省略一些代码...</span>
    <span class="token keyword">const</span> originalJQueryOn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>on<span class="token punctuation">;</span>
    <span class="token keyword">const</span> originalJQueryOff <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>off<span class="token punctuation">;</span>

    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventString<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">captureRoutingEvents</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">,</span>
        originalJQueryOn<span class="token punctuation">,</span>
        window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">,</span>
        eventString<span class="token punctuation">,</span>
        fn<span class="token punctuation">,</span>
        arguments
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">off</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventString<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里省略许多代码... 与jQeury.fn.on类似，不在此赘述</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里省略一些代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>2</strong>中省略了许多逻辑判断，但核心功能可以理解为做了两件事。<strong>一</strong>是保存了<code>jQuery</code>的事件监听和事件取消函数。<strong>二</strong>是对<code>jQuery</code>的事件监听函数进行了拦截，具体怎么拦截的，让我们进入<code>captureRoutingEvents</code>函数中一探究竟。</p><h2 id="captureroutingevents" tabindex="-1"><a class="header-anchor" href="#captureroutingevents" aria-hidden="true">#</a> captureRoutingEvents</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段3</span>
<span class="token keyword">function</span> <span class="token function">captureRoutingEvents</span><span class="token punctuation">(</span>
  <span class="token parameter">originalJQueryFunction<span class="token punctuation">,</span>
  nativeFunctionToCall<span class="token punctuation">,</span>
  eventString<span class="token punctuation">,</span>
  fn<span class="token punctuation">,</span>
  originalArgs</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> eventString <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">originalJQueryFunction</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> originalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> eventNames <span class="token operator">=</span> eventString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  eventNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>routingEventsListeningTo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 关键点1</span>
      <span class="token function">nativeFunctionToCall</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
      eventString <span class="token operator">=</span> eventString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventString<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关键点2</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">originalJQueryFunction</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> originalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得我们上文保存的<code>originalJQueryFunction</code>函数吗，在函数<code>captureRoutingEvents</code>有了体现。可以概括为该函数在某些条件下执行<code>jQuery.fn.on</code>未被重写前的逻辑。否则就返回<code>this</code>。相对于代码片段<strong>2</strong>中<code>jQuery.fn.on</code>中的调用，关键点<strong>1</strong>处的代码，相当于执行了<code>window.addEventListener(&quot;hashchange&quot;｜&quot;popstate&quot;,()=&gt;{})</code>。当然里面利用了些条件逻辑，如果监听的事件不仅仅进只有<code>hashchange、popstate</code>两个事件，则继续调用<code>jQuery.fn.on</code>未被重写前的逻辑进行事件的监听。由于我没研究过<code>jQeury</code>，调用被重写前的<code>jQuery.fn.on</code>函数会发生什么，并不太清楚，不过对于理解<code>single-spa</code>而言，能理解上文呈现的逻辑就足够了，对于关键点<strong>2</strong>处返回<code>this</code>有什么用途，后续遇见该逻辑再进行剖析。</p><h2 id="reroute" tabindex="-1"><a class="header-anchor" href="#reroute" aria-hidden="true">#</a> reroute</h2><p>聊完了<code>ensureJQuerySupport</code>，是时候探索<code>reroute</code>了。<code>reroute</code>函数有将近300行代码，对其中次要逻辑进行删减，且只留下和注册相关的逻辑，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段4</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reroute</span><span class="token punctuation">(</span><span class="token parameter">pendingPromises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eventArguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里省略掉许多代码...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    appsToUnload<span class="token punctuation">,</span>
    appsToUnmount<span class="token punctuation">,</span>
    appsToLoad<span class="token punctuation">,</span>
    appsToMount<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getAppChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里省略掉许多代码...</span>
  <span class="token keyword">return</span> <span class="token function">loadApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 这里省略掉许多代码...</span>

  <span class="token keyword">function</span> <span class="token function">loadApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> loadPromises <span class="token operator">=</span> appsToLoad<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toLoadPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>loadPromises<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callAllEventListeners<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">callAllEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 这里省略许多代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>4</strong>中留下了<code>reroute</code>函数的核心逻辑，做了两件事情，<strong>一</strong>是获取处于各种状态的微应用。<strong>二</strong>是返回函数<code>loadApps</code>的执行结果。而<code>loadApps</code>中做了一件重要的事情，就是调用了这样一行代码<code>const loadPromises = appsToLoad.map(toLoadPromise);</code>，我们不难知道<code>appsToLoad</code>代码着需要加载的微应用，而<code>toLoadPromise</code>主要完成什么功能呢？请看下文讲解。</p><h2 id="toloadpromise" tabindex="-1"><a class="header-anchor" href="#toloadpromise" aria-hidden="true">#</a> toLoadPromise</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段5，为了精简逻辑，除了省略一些代码，还做了微调</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里省略许多代码...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>loadPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> loadPromise <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token function">getProps</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里省略许多代码...</span>
        <span class="token keyword">return</span> loadPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这里省略许多代码...</span>
          app<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">NOT_BOOTSTRAPPED</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>bootstrap <span class="token operator">=</span> <span class="token function">flattenFnArray</span><span class="token punctuation">(</span>appOpts<span class="token punctuation">,</span> <span class="token string">&quot;bootstrap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>mount <span class="token operator">=</span> <span class="token function">flattenFnArray</span><span class="token punctuation">(</span>appOpts<span class="token punctuation">,</span> <span class="token string">&quot;mount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>unmount <span class="token operator">=</span> <span class="token function">flattenFnArray</span><span class="token punctuation">(</span>appOpts<span class="token punctuation">,</span> <span class="token string">&quot;unmount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>unload <span class="token operator">=</span> <span class="token function">flattenFnArray</span><span class="token punctuation">(</span>appOpts<span class="token punctuation">,</span> <span class="token string">&quot;unload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>timeouts <span class="token operator">=</span> <span class="token function">ensureValidAppTimeouts</span><span class="token punctuation">(</span>appOpts<span class="token punctuation">.</span>timeouts<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">delete</span> app<span class="token punctuation">.</span>loadPromise<span class="token punctuation">;</span>

          <span class="token keyword">return</span> app<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里省略许多代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>5</strong>中原本有100多行代码，对其进行精简，我们发现核心逻辑其实只做了三件事，<strong>一</strong>是调用子应用传入的加载微应用的方法。<strong>二</strong>是保存微应用的各种状态。<strong>三</strong>是规范发子应用暴露的方法。其实看源码就要抓住核心逻辑，其他疑惑都会迎刃而解，忌讳胡子眉毛一把抓，逐行阅读，最终会把自己陷在里面，不知道代码究竟想要表达什么，进而丧失了继续读下去的热情。好了，关于<code>single-spa</code>的注册机制今天就分析到这里，请朋友们期待更多关于<code>single-spa</code>的文章。</p><p>欢迎关注我的<code>微信公众号：杨艺韬</code>，可以获取最新动态。</p>`,22),o=[e];function c(i,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","06.single-spa的注册机制.html.vue"]]);export{r as default};
