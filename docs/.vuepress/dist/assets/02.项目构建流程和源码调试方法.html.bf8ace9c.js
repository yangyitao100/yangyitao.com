import{_ as p,r as e,o,c,b as s,d as n,e as i,f as a}from"./app.d90d410b.js";const l="/assets/02-01.548da159.webp",u="/assets/02-02.43bb04a6.webp",r={},d=a(`<h1 id="_02-项目构建流程和源码调试方法" tabindex="-1"><a class="header-anchor" href="#_02-项目构建流程和源码调试方法" aria-hidden="true">#</a> 02.项目构建流程和源码调试方法</h1><blockquote><p>作为一个现代前端框架，<code>Vue3</code>源码中包含了一系列的<code>js</code>脚本，支持对源码进行<strong>构建</strong>、<strong>发布</strong>，而<strong>构建</strong>又分为生产环境和开发环境两种不同场景的构建。本文主要分析<code>Vue3</code>源码的构建流程，对于<strong>发布</strong>暂时不讲解。在构建流程分析结束后，再讲解一个源码调试的案例，同时也会讲解为什么可以这样调试。为后续深入源码细节打下基础，同时也方便大家动手实践调试源码。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><p>对项目的构建，本质上就是执行一段程序，让我们编写的代码，处理成一个符合实际场景需要的可执行的程序文件。当然对于<code>Vue3</code>的构建也不例外。在<code>Vue3</code>中，根据实际需要的不同，执行构建的命令是：<code>pnpm run build</code>或<code>pnpm run dev</code>。这里用<code>pnpm</code>还是<code>npm</code>没什么区别，为什么呢？因为执行<code>pnpm run dev</code>或<code>npm run dev</code>，本质上都是执行一个<code>js</code>程序，而这个<code>js</code>文件是一样的，从<code>package.json</code>可以找到对应的文件。我们看下面代码：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 所属文件：core/package.json 注：Vue3目前的工程目录名称是core</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这里省略许多其他内容...</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node scripts/dev.js&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node scripts/build.js&quot;</span>
        <span class="token comment">// 这里省略许多其他内容...</span>
     <span class="token punctuation">}</span>
     <span class="token comment">// 这里省略许多其他内容...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下文统一用<code>pnpm run dev</code>或<code>pnpm run build</code>两条执行命令来进行构建。 其实从名称已经可以看出，在开发阶段执行<code>pnpm run dev</code>，在正式准备发布的场景下执行<code>pnpm run build</code>进行构建。既然执行两个可执行文件来分别处理生产环境的构建和开发环境的构建，那二者肯定有所不同。先将主要的不同列在这里，大家在后文中可以看到这些差别的细节。</p><ul><li>构建工具不同</li><li>构建目标不同</li><li>构建流程不同</li></ul><p>另外，在<code>core/scripts</code>（注：Vue3目前的项目根目录名叫<code>core</code>而不是之前的<code>vue-next</code>）目录下有下面几个文件：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>-core
    <span class="token list punctuation">-</span> scripts
        <span class="token list punctuation">-</span> bootstrap.js
        <span class="token list punctuation">-</span> build.js
        <span class="token list punctuation">-</span> dev.js
        <span class="token list punctuation">-</span> filter-e2e.js
        <span class="token list punctuation">-</span> filter-unit.js
        <span class="token list punctuation">-</span> preinstall.js
        <span class="token list punctuation">-</span> release.js
        <span class="token list punctuation">-</span> setupJestEnv.js
        <span class="token list punctuation">-</span> utils.js
        <span class="token list punctuation">-</span> verifyCommit.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些文件<code>Vue3</code>中的一些脚本，我们当前只需要关心<code>build.js</code>和<code>dev.js</code>即可，其他脚本跟本文的主题关系不大，就整个源码分析系列文章来讲，其他脚本的重要性其实也很有限，后续在相关主题的文章如有必要会讲解对应的脚本实现细节。</p><h1 id="build-js" tabindex="-1"><a class="header-anchor" href="#build-js" aria-hidden="true">#</a> build.js</h1><p>上文提到过，执行<code>pnpm run build</code>，其实执行的就是<code>build.js</code>文件中的程序。该程序的职责是构建出生产环境可用的程序文件。</p><h2 id="主要流程" tabindex="-1"><a class="header-anchor" href="#主要流程" aria-hidden="true">#</a> 主要流程</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此处省略一些代码...</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略一些代码... </span>
  <span class="token keyword">await</span> <span class="token function">buildAll</span><span class="token punctuation">(</span>allTargets<span class="token punctuation">)</span>
  <span class="token comment">// 此处省略一些代码... </span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token parameter">targets</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> build<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token parameter">maxConcurrency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">)</span>
    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token comment">// 此处省略一些代码... </span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pkgDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkgDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 此处省略一些代码... </span>
  <span class="token keyword">await</span> <span class="token function">execa</span><span class="token punctuation">(</span>
    <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;--environment&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">COMMIT:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NODE_ENV:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>env<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TARGET:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        formats <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">FORMATS:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formats<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        buildTypes <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TYPES:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        prodOnly <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">PROD_ONLY:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        sourceMap <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SOURCE_MAP:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">]</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// 此处省略一些代码... </span>
<span class="token punctuation">}</span>
<span class="token comment">// 此处省略一些代码... </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码省去了构建<code>d.ts</code>文件以及其他许多相对次要的逻辑，经过精简后，<code>build.js</code>的核心流程逐渐清晰，可以概括为做了下面两件事情：</p><ul><li>获取<code>packages</code>目录下的所有子文件夹名称，作为子项目名，对应代码片段中的<code>allTargets</code>；</li><li>遍历每一个子项目，获取子项目的<code>package.json</code>文件，并构造相应参数，为每一个子项目并行执行<code>rollup</code>命令，将构造好的参数传入。</li></ul><p>当然完整的<code>build.js</code>，还包括了很多边界条件判断，以及参数处理等逻辑，但是只要把握了这个核心流程，相信大家可以轻松理解其他逻辑。下面我讲讲其中几个可能会让大家有收获的函数细节。</p><h2 id="runparallel" tabindex="-1"><a class="header-anchor" href="#runparallel" aria-hidden="true">#</a> runParallel</h2><p>先看看函数<code>runParallel</code>的代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token parameter">maxConcurrency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">)</span>
    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxConcurrency <span class="token operator">&lt;=</span> source<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> maxConcurrency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数值得学习的地方有两个点，<strong>一</strong>是可以通过<code>Promise.all(&#39;一个promise实例数组&#39;)</code>让多个任务并行执行。<strong>二</strong>是参数<code>maxConcurrency</code>实际上传入的值是通过<code>require(&#39;os&#39;).cpus().length</code>得到的CPU核数，通过CPU核数和任务数做比较，再在一定条件下利用<code>await Promise.race(e)</code>保证任务数量不大于CPU核数，实现了并行和串行的有机结合。</p><h2 id="execa" tabindex="-1"><a class="header-anchor" href="#execa" aria-hidden="true">#</a> execa</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> execa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;execa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> <span class="token function">execa</span><span class="token punctuation">(</span>
    <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;--environment&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">COMMIT:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">NODE_ENV:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>env<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TARGET:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        formats <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">FORMATS:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formats<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        buildTypes <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TYPES:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        prodOnly <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">PROD_ONLY:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        sourceMap <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SOURCE_MAP:true</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">]</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),k=s("code",null,"execa",-1),v={href:"https://github.com/sindresorhus/execa#readme",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"rollup",-1),g=a(`<h1 id="dev-js" tabindex="-1"><a class="header-anchor" href="#dev-js" aria-hidden="true">#</a> dev.js</h1><p>上文提到过，执行<code>pnpm run dev</code>，其实执行的就是<code>dev.js</code>文件中的程序。该程序的职责是构建出开发环境可用的程序文件。同时上文也提到过，<code>dev.js</code>中的构建工具和<code>build.js</code>中的工具是不一样的。这里用的是<code>esbuild</code>，这个工具速度很快，适合在开发环境下使用。而<code>rollup</code>虽然速度没有<code>esbuld</code>快，但是生成的结果文件体积更小，而且对<code>treeshaking</code>的支持也更加良好。这里体现了，框架作者们对技术选型的用心，同时也能一定程度体现其开发者知识的广度和深度，对各个工具如果只是简单了解，不太容易做出正确科学的选择。</p><h2 id="主要流程-1" tabindex="-1"><a class="header-anchor" href="#主要流程-1" aria-hidden="true">#</a> 主要流程</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;esbuild&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 此处省略许多代码</span>
<span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/index.ts</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  outfile<span class="token punctuation">,</span>
  <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  external<span class="token punctuation">,</span>
  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">format</span><span class="token operator">:</span> outputFormat<span class="token punctuation">,</span>
  <span class="token literal-property property">globalName</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>name<span class="token punctuation">,</span>
  <span class="token literal-property property">platform</span><span class="token operator">:</span> format <span class="token operator">===</span> <span class="token string">&#39;cjs&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;node&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;browser&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span>
    format <span class="token operator">===</span> <span class="token string">&#39;cjs&#39;</span> <span class="token operator">||</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>enableNonBrowserBranches
      <span class="token operator">?</span> <span class="token punctuation">[</span>nodePolyfills<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">__COMMIT__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;dev&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__VERSION__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkg<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__DEV__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">true</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__TEST__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">false</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__BROWSER__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>
      format <span class="token operator">!==</span> <span class="token string">&#39;cjs&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>enableNonBrowserBranches
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__GLOBAL__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>format <span class="token operator">===</span> <span class="token string">&#39;global&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__ESM_BUNDLER__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;esm-bundler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__ESM_BROWSER__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;esm-browser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__NODE_JS__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>format <span class="token operator">===</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__SSR__</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>format <span class="token operator">===</span> <span class="token string">&#39;cjs&#39;</span> <span class="token operator">||</span> format<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;esm-bundler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__COMPAT__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">false</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__FEATURE_SUSPENSE__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">true</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__FEATURE_OPTIONS_API__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">true</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__FEATURE_PROD_DEVTOOLS__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">false</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">onRebuild</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rebuilt: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativeOutfile<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">watching: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativeOutfile<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里省略了许多代码，但核心逻辑很简单，接收“构建目标”参数，调用<code>esbuild</code>提供的<code>build</code>函数对参数对应的子项目进行构建。比如执行<code>pnpm run dev &quot;reactivity&quot;</code>，将会对子项目<code>reactivity</code>进行构建。其实上文执行<code>pnpm run build &quot;reactivity&quot;</code>也会对 子项目<code>reacitivity</code>进行构建。不同的是，如果不传参数，执行<code>pnpm run dev</code>会默认构建子项目<code>vue</code>，而执行<code>pnpm run build</code>则会对所有的子项目进行构建。 相较于<code>build.js</code>，<code>dev.js</code>默认开启了<code>sorcemap</code>，构建完成会生成<code>soucemap</code>相关的文件，方便我们调试，当然<code>build.js</code>中也可以开启<code>sourcemap</code>配置，但同时还需要在<code>ts</code>的配置文件中开启<code>sorcemap</code>配置。在<code>dev.js</code>中，还默认开启了对文件系统中文件变化的监听，当监听到有文件发生变化，如果<code>esbuild</code>认为该变化可能会引起构建结果文件发生变化，那么就会重写执行构建流程生成新的构建结果，这个监听文件系统变化的配置对应上面代码片段中的<code>watch</code>属性。</p><h1 id="调试案例" tabindex="-1"><a class="header-anchor" href="#调试案例" aria-hidden="true">#</a> 调试案例</h1><p>了解了如何对<code>Vue3</code>进行构建，下文就呈现一个小案例，对我们的<code>Vue3</code>中的子项目<code>reactivity</code>的源码进行调试。至于<code>reactivity</code>的具体功能和实现，本文不会讲解，在下一篇文章中会进行详细分析，敬请朋友们期待。</p><h2 id="第1步-构建reactivity" tabindex="-1"><a class="header-anchor" href="#第1步-构建reactivity" aria-hidden="true">#</a> 第1步: 构建reactivity</h2><p>在<code>vue3</code>工程根目录下执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span>
<span class="token function">pnpm</span> run dev “reactivity”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会在<code>core/packages/reactivity/dist</code>路径下生成下面两个文件：</p><ul><li>reactivity.global.js</li><li>reactivity.global.js.map</li></ul><blockquote><p>注意，此时控制台会有这样一行提示<code>watching: packages/reactivity/dist/reactivity.global.js</code>，意味着当<code>reactivity</code>中的代码发生变化会重写构建文件。</p></blockquote><p>其中<code>reactivity.global.js</code>文件中的内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> VueReactivity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略1000多行代码...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第2步-在html页面中引入reactivity-global-js" tabindex="-1"><a class="header-anchor" href="#第2步-在html页面中引入reactivity-global-js" aria-hidden="true">#</a> 第2步: 在html页面中引入reactivity.global.js</h2><p>在<code>core/packages/reactivity/dist</code>目录下新建<code>test.html</code>文件，内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reactivity.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> <span class="token punctuation">{</span> effect<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token operator">=</span> VueReactivity
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;杨艺韬&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器打开页面<code>test.html</code>，我名字的拼音，自动变成了汉字，验证了<code>Vue3</code>的响应式的原理。</p><h2 id="第3步-设置断点进行debug" tabindex="-1"><a class="header-anchor" href="#第3步-设置断点进行debug" aria-hidden="true">#</a> 第3步: 设置断点进行debug</h2><p>假如，我们此时想调试函数<code>effect</code>的内部实现，我们可以在<code>effect</code>函数内部打上断点：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 所属文件：core/packages/reactivity/src/effect.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略若干代码</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">debugger</span>
    <span class="token comment">// 省略若干代码</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 省略若干代码</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，保存文件，将会自动触发重新构建。此时打开浏览器调试工具，刷新<code>test.html</code>页面，会发现停留在了断点处： <img src="`+l+`" alt="debugger.jpg"> 有点需要注意：由于开启<code>sourcemap</code>的缘故，调试时候看见的文件是<code>effect.ts</code>，而非引入的<code>reactivity.global.js</code>。</p><h2 id="原理解释" tabindex="-1"><a class="header-anchor" href="#原理解释" aria-hidden="true">#</a> 原理解释</h2><p>上文我们呈现了一个调试源码的案例，相信大家虽然知道了按步骤去这样做，但是会有些疑惑为什么可以这么做？我先解答<strong>3</strong>个大家可能存在的疑惑，其他没提到的请大家留言交流。</p><h3 id="为什么生成的文件是reactivity-global-js-而不是reactivity-cjs-js或reactivity-esm-js等其他格式" tabindex="-1"><a class="header-anchor" href="#为什么生成的文件是reactivity-global-js-而不是reactivity-cjs-js或reactivity-esm-js等其他格式" aria-hidden="true">#</a> 为什么生成的文件是reactivity.global.js，而不是reactivity.cjs.js或reactivity.esm.js等其他格式</h3><p>我们可以将程序构建成不同格式的结果。有哪些格式呢，一般可以分为commonjs模块、ESModule模块、立即执行函数。具体模块有什么区别就不在本文阐述了。但我们目前要在浏览器中调试，使用立即执行函数是一个很不错的选择。该函数执行完成后会返回一个对象，该对象会暴露一些必要的能力。比如上文的<code>effect</code>、<code>reactive</code>函数。</p><h3 id="为什么effect和reactive函数是从vuereactivity解构出来的" tabindex="-1"><a class="header-anchor" href="#为什么effect和reactive函数是从vuereactivity解构出来的" aria-hidden="true">#</a> 为什么effect和reactive函数是从VueReactivity解构出来的？</h3><p>我们知道从立即执行函数中获得了一个对象，且对象名字叫<code>VueReactivity</code>，为什么是这个名字而不是别的名字呢？请看<code>reactivity</code>的<code>package.json</code>文件中的内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 省去许多内容...</span>
  <span class="token property">&quot;buildOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VueReactivity&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;formats&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;esm-bundler&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;esm-browser&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;cjs&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;global&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 省略许多内容...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原来很简单，这个名字是开发者自己配置的。</p><h3 id="reactivity的node-modules目录中的-vue-shared依赖包为什么有个链接符号" tabindex="-1"><a class="header-anchor" href="#reactivity的node-modules目录中的-vue-shared依赖包为什么有个链接符号" aria-hidden="true">#</a> reactivity的node_modules目录中的@vue/shared依赖包为什么有个链接符号？</h3><p><img src="`+u+'" alt="link.jpg"></p><p>还记得我们在前一篇文章中提到过的<code>pnpm</code>，这就是<code>pnpm</code>管理<code>monorepo</code>项目时的重要工作之一，详情将上文以及<code>pnpm</code>关于<code>workspace</code>相关的内容。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情进行支持：</p><ul><li>如果您此刻在掘金看见这篇文章，辛苦<code>点赞</code>，增加掘力值，助我早日成为掘金优秀作者；</li><li>如果您此刻在微信公众号，请<code>点赞，点在看，转发</code>，让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>',38);function b(y,h){const t=e("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[k,n("的详细内容请阅读相关"),s("a",v,[n("文档"),i(t)]),n(",开启子进程执行一个任务。这里才是真正的利用"),m,n("进行打包构建。")]),g])}const _=p(r,[["render",b],["__file","02.项目构建流程和源码调试方法.html.vue"]]);export{_ as default};
