import{_ as n,o as s,c as a,f as p}from"./app.4326c516.js";const t={},o=p(`<h1 id="_05-乾坤loadmicroapp方法实现以及数据通信机制分析" tabindex="-1"><a class="header-anchor" href="#_05-乾坤loadmicroapp方法实现以及数据通信机制分析" aria-hidden="true">#</a> 05.乾坤loadMicroApp方法实现以及数据通信机制分析</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在前面的文章中，我们分析了注册微应用的流程，分析了加载微应用的流程，并且深入到<code>import-html-entry</code>了解了乾坤获取微应用资源的具体机制。前面的这些工作，能够支持我们在路由发生变化后自动加载和挂载不同的微应用，换句话说我们的程序在某个时间点最多只能挂载一个微应用，因为这种微应用的加载和挂载是注册微应用后自动发生的，我们不能进行过多的干预。实际上乾坤也支持同一个页面，加载多个应用。那怎么实现这种机制呢？这就引出了今天的主题，<strong>手动加载微应用</strong>，也就是说我们可以在任何时间点加载任何微应用挂载到任何地方，既然这么灵活，当然就能支持同时展现多个微应用在用户眼前。手动加载微应用的功能由函数<code>loadMicroApp</code>提供，本文就带大家走进该函数。</p></blockquote><h1 id="loadmicroapp的主逻辑" tabindex="-1"><a class="header-anchor" href="#loadmicroapp的主逻辑" aria-hidden="true">#</a> loadMicroApp的主逻辑</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> loadMicroApp<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">app</span><span class="token operator">:</span> LoadableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  configuration<span class="token operator">?</span><span class="token operator">:</span> FrameworkConfiguration <span class="token operator">&amp;</span> <span class="token punctuation">{</span> autoStart<span class="token operator">?</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> MicroApp <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">const</span> memorizedLoadingFn <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ParcelConfigObject<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略许多代码...</span>
    <span class="token keyword">const</span> parcelConfigObjectGetterPromise <span class="token operator">=</span> <span class="token function">loadApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> userConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处省略了许多代码...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">await</span> parcelConfigObjectGetterPromise<span class="token punctuation">)</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 此处省略许多代码...</span>
  microApp <span class="token operator">=</span> <span class="token function">mountRootParcel</span><span class="token punctuation">(</span>memorizedLoadingFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">domElement</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token comment">// 此处省略许多代码...</span>
  <span class="token keyword">return</span> microApp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便理解，我省略了许多次要逻辑，我们来看看这个<code>loadMicroApp</code>主要做了什么工作。最最终结果看，是调用了<code>mountRootParcel</code>函数，然后将其返回值作为<code>loadMicroApp</code>函数的返回值。说到这里相信大家会自然直觉的问<code>mountRootParcel</code>是什么？其实<code>mountRootParcel</code>函数是从<code>single-spa</code>中导入，其核心功能就是返回一个对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>externalRepresentation <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 省略诸多代码...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 省略诸多代码...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略诸多代码...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loadPromise</span><span class="token operator">:</span> <span class="token function">promiseWithoutReturnValue</span><span class="token punctuation">(</span>loadPromise<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bootstrapPromise</span><span class="token operator">:</span> <span class="token function">promiseWithoutReturnValue</span><span class="token punctuation">(</span>bootstrapPromise<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mountPromise</span><span class="token operator">:</span> <span class="token function">promiseWithoutReturnValue</span><span class="token punctuation">(</span>mountPromise<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">unmountPromise</span><span class="token operator">:</span> <span class="token function">promiseWithoutReturnValue</span><span class="token punctuation">(</span>unmountPromise<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回该对象后我们就可以操作该对象所具有的方法，挂载、卸载、获取微应用状态，执行微应用的生命周期方法。我将在后续文章深入到<code>single-spa</code>中讲解整个库的主要逻辑和一些细节，现在我们只需要知道调用<code>mountRootParcel</code>函数会返回可以操作微应用的对象就可以了。我们先看看本文代码片段<strong>1</strong>中有个函数<code>memorizedLoadingFn</code>，该函数的核心逻辑就是调用微应用加载函数<code>loadApp</code>并返回一个包含微应用暴露的生命周期方法的对象，也就是说<code>mountRootParcel</code>在内部是调用了这个<code>memorizedLoadingFn</code>获取了微应用暴露的相关生命周期方法。而<code>memorizedLoadingFn</code>内部的其他代码是做了一些缓存机制，这时候大家可能会觉得奇怪，前面我们分析微应用的加载时候<code>loadApp</code>函数会返回一个对象，该对象有微应用的生命周期函数，就已经可以控制微应用的一些行为了。为什么这里<code>loadApp</code>执行完后又调用了一个<code>single-spa</code>的<code>mountRootParcel</code>函数，而该函数返回的还是一个可以包含控制微应用行为的对象，这样做的意义何在呢？实际上微应用暴露的生命周期方法，功能比较薄弱，比如<code>mount、unmount</code>一般而言就是简单的把相关的DOM节点挂载到某个地方或者从该地方卸载，但虽然能控制自己渲染或者不渲染，但是整个微应用究竟该渲染到哪里去什么时机渲染就有点困难了，因为微应用可能会在任何可能的父应用下工作。而<code>single-spa</code>作为一个基础的框架，相当于一个控制器，比如函数<code>load</code>、<code>bootstrap</code>、<code>mount</code>、<code>unmount</code>等都必须循序执行，这个控制器管理者微应用的各种状态以及一些微应用具备的一些其他能力。具体<code>single-spa</code>是如何工作的我会在后面的文章中逐渐展开。本文先了解这些就可以了，只需要知道，获取到了<code>mountRootParcel</code>函数的返回值，我们就可以控制相应的微应用。</p><p>其实到了这里，结合前面的文章，我们已经可以说是对乾坤有了比较深入的了解，对其主要的API对应的实现和原理也比较清楚。本文再探讨几个乾坤中一些值得了解的点，对乾坤的分析就暂时告一段落，后面的时间主要投入到<code>single-spa</code>的分析中。在分析完<code>single-spa</code>后，我们会回过头来对乾坤整个框架的结构进行分析，洞察其中的设计思想。敬请朋友们期待。</p><h1 id="数据通信机制" tabindex="-1"><a class="header-anchor" href="#数据通信机制" aria-hidden="true">#</a> 数据通信机制</h1><h2 id="主子应用的数据传递" tabindex="-1"><a class="header-anchor" href="#主子应用的数据传递" aria-hidden="true">#</a> 主子应用的数据传递</h2><p>关于父应用给子应用传递数据，其实很简单，在注册微应用的时候，有个可选参数<code>props</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> registerMicroApps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectType</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RegistrableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略许多代码...</span>
  unregisteredApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> activeRule<span class="token punctuation">,</span> loader <span class="token operator">=</span> noop<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>

    <span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略许多代码...</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
          <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">}</span><span class="token punctuation">,</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 省略许多代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">activeWhen</span><span class="token operator">:</span> activeRule<span class="token punctuation">,</span>
      <span class="token literal-property property">customProps</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中可以看出，传入的<code>props</code>参数，在加载微应用的时候直接传入即可，事实上，这些参数可以在微应用执行生命周期方法的时候获取到，这就实现了最简单的父子应用间的东西，当然这里主要指父应用给子应用传值。</p><h2 id="全局事件通信" tabindex="-1"><a class="header-anchor" href="#全局事件通信" aria-hidden="true">#</a> 全局事件通信</h2><p>在小节<strong>主子应用的数据传递</strong>中提到，父应用可以传递参数给子应用，那如果传递的是一个函数呢？没错就是原本普通的通信机制，产生了更为强大的通信机制，通过全局事件通信。刚才提到的函数主要指下面两个函数（实际上不止两个，但这两个相对重要）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注：为了更容易理解，下面代码和源码中有点出入...</span>
<span class="token keyword">function</span> <span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">callback</span><span class="token operator">:</span> OnGlobalStateChangeCallback<span class="token punctuation">,</span> fireImmediately<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 该函数主要用于监听事件，将传入的callback函数进行保存</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 该函数主要用于更新数据，同时触发全局事件，调用函数onGlobalStateChange保存的对应callback函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数<code>setGlobalState</code>提到了触发全局事件，怎么触发呢，看下面代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">emitGlobal</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">prevState</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中<code>deps[id]</code>就对应着<code>onGlobalStateChange</code>中保存的<code>callback</code>函数。最近受限于工作压力，晚上时间有限，没时间把更细节的东西呈现在文章中，上文提到过的或者代码出现过的缓存机制、深度克隆等等，虽然基础，但对很多基础不扎实的朋友来讲，其实是很重要有必要提出来的。希望将来有机会以书籍或者视频更详细的呈现出更多的优秀开源框架的细节。好了本文先到这里，敬请朋友们期待我接下来对<code>single-spa</code>进行分析的系列文章。</p><p>欢迎关注我的<code>微信公众号：杨艺韬</code>，可以获取最新动态。</p>`,21),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","05.乾坤loadMicroApp方法实现以及数据通信机制分析.html.vue"]]);export{r as default};
