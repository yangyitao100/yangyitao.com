import{_ as n,o as s,c as a,f as t}from"./app.d90d410b.js";const e="/assets/04-01.cbc0c735.webp",p={},o=t(`<h1 id="_04-乾坤的资源加载机制-import-html-entry的内部实现" tabindex="-1"><a class="header-anchor" href="#_04-乾坤的资源加载机制-import-html-entry的内部实现" aria-hidden="true">#</a> 04.乾坤的资源加载机制(import-html-entry的内部实现)</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们在前面的文章**乾坤的微应用加载流程分析(从微应用的注册到loadApp方法内部实现)**提到过，加载微应用的时候要获取微应用的<code>js、css、html</code>等资源，但是具体怎么获取的当时并没有讲。还记得在<code>loadApp</code>中执行了这一行代码：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> template<span class="token punctuation">,</span> execScripts<span class="token punctuation">,</span> assetPublicPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这里的<code>importEntry</code>来自于一个依赖库<code>import-html-entry</code>，接下来我们将从<code>importEntry</code>开始，探索整个<code>import-html-entry</code>都做了些什么。</p></blockquote><p>我们先来看一张流程图：</p><p><img src="`+e+`" alt="import-html-entry.jpg"></p><p>接下来我会根据流程图的顺序依次对其中重要环节依次进行讲解，请看下文。</p><h2 id="importentry" tabindex="-1"><a class="header-anchor" href="#importentry" aria-hidden="true">#</a> importEntry</h2><p>我们先来看看<code>importEntry</code>函数接收了哪些参数以及参数对应的含义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1，所属文件：src/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">importEntry</span><span class="token punctuation">(</span><span class="token parameter">entry<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> fetch <span class="token operator">=</span> defaultFetch<span class="token punctuation">,</span> getTemplate <span class="token operator">=</span> defaultGetTemplate<span class="token punctuation">,</span> postProcessTemplate <span class="token punctuation">}</span> <span class="token operator">=</span> opts<span class="token punctuation">;</span>
	<span class="token keyword">const</span> getPublicPath <span class="token operator">=</span> opts<span class="token punctuation">.</span>getPublicPath <span class="token operator">||</span> opts<span class="token punctuation">.</span>getDomain <span class="token operator">||</span> defaultGetPublicPath<span class="token punctuation">;</span>
	<span class="token comment">// 省略一些不太关键的代码...</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> entry <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">importHTML</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> <span class="token punctuation">{</span>
			fetch<span class="token punctuation">,</span>
			getPublicPath<span class="token punctuation">,</span>
			getTemplate<span class="token punctuation">,</span>
			postProcessTemplate<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 此处省略了许多代码... 占位1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里先对<code>importEntry</code>的功能和参数类型提前有个了解：</p><blockquote><p><strong>功能</strong></p><ul><li>加载<code>css/js</code>资源，并且将加载的资源嵌入到<code>html</code>中去；</li><li>获取<code>scripts</code>资源上的<code>exports</code>对象</li></ul><p><strong>类型</strong></p><ul><li>Entry（参数<code>entry</code>的类型，必传）： <code>string | { styles?: string[], scripts?: string[], html?: string }</code> 如果类型为<code>string</code>，<code>importEntry</code>将会调用<code>importHTML</code>执行相关逻辑，否则，就会加载<code>styles</code>、<code>scripts</code>所对应的资源并嵌入到字符串<code>html</code>中，注意这里是字符串，这区别于流程图中对应的第<strong>3</strong>步所提到的加载远程的<code>html</code>资源。另外需要了解，这里的参数<code>styles</code>对应的是<code>style</code>资源的<code>url</code>数组，与之类似，<code>scripts</code>参数对应的是<code>js</code>资源的<code>url</code>数组。而参数<code>html</code>就是一个字符串，是一个<code>html</code>页面的具体内容。</li><li><strong>ImportEntryOpts</strong>（参数<code>opts</code>的类型，可选）： <ul><li><strong>fetch</strong>: 自定义的加载资源的方法，可选，类型为<code>typeof window.fetch | { fn?: typeof window.fetch, autoDecodeResponse?: boolean }</code>，其中的<code>autoDecodeResponse</code> 可选，当字符集不是<code>utf-8</code>（比如<code>gbk</code>或<code>gb2312</code>）的时候自动解码，默认值为<code>false</code>。</li><li><strong>getPublicPath</strong>：类型为<code>(entry: Entry) =&gt; string</code>，自定义的资源访问的相对路径，可选。</li><li><strong>getTemplate</strong>：类型为<code>(tpl: string) =&gt; string</code>,自定义的<code>HTML</code>资源预处理的函数，可选。</li></ul></li></ul></blockquote><p>到这里，相信朋友们已经能能够理解了代码片段<strong>1</strong>中的函数参数了，接下来，我们就进入到函数<code>importHTML</code>中去。</p><h2 id="importhtml" tabindex="-1"><a class="header-anchor" href="#importhtml" aria-hidden="true">#</a> importHTML</h2><p>在进入<code>importHTML</code>之前，希望大家能够知道<code>importHTML</code>函数的参数和<code>importEntry</code>是一致的，后面不再赘述，我们先看看该函数的整体结构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段2，所属文件：src/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">importHTML</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 这里省略许多代码... 占位1</span>
	<span class="token keyword">return</span> embedHTMLCache<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>embedHTMLCache<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token function">readResAsString</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> autoDecodeResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">html</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> assetPublicPath <span class="token operator">=</span> <span class="token function">getPublicPath</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> <span class="token punctuation">{</span> template<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> styles <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processTpl</span><span class="token punctuation">(</span><span class="token function">getTemplate</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">,</span> assetPublicPath<span class="token punctuation">,</span> postProcessTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token function">getEmbedHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> styles<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">embedHTML</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
				<span class="token literal-property property">template</span><span class="token operator">:</span> embedHTML<span class="token punctuation">,</span>
				assetPublicPath<span class="token punctuation">,</span>
				<span class="token function-variable function">getExternalScripts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getExternalScripts</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> fetch<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token function-variable function">getExternalStyleSheets</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getExternalStyleSheets</span><span class="token punctuation">(</span>styles<span class="token punctuation">,</span> fetch<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token function-variable function">execScripts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">proxy<span class="token punctuation">,</span> strictGlobal<span class="token punctuation">,</span> execScriptsHooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scripts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">return</span> <span class="token function">execScripts</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> <span class="token punctuation">{</span>
						fetch<span class="token punctuation">,</span>
						strictGlobal<span class="token punctuation">,</span>
						<span class="token literal-property property">beforeExec</span><span class="token operator">:</span> execScriptsHooks<span class="token punctuation">.</span>beforeExec<span class="token punctuation">,</span>
						<span class="token literal-property property">afterExec</span><span class="token operator">:</span> execScriptsHooks<span class="token punctuation">.</span>afterExec<span class="token punctuation">,</span>
					<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便理解，我们省略了部分代码，代码片段<strong>2</strong>中的占位<strong>1</strong>主要是对传入的参数做了些预处理。</p><blockquote><p>这里简单提一下，<code>embedHTMLCache[url] || (embedHTMLCache[url] = fetch(url)</code>这种使用缓存和给缓存赋值的方式，在日常开发中可以借鉴。</p></blockquote><p><code>importHTML</code>核心作用有三个：</p><ul><li>调用<code>fetch</code>请求<code>html</code>资源（注意，不是<code>js、css</code>资源）；</li><li>调用<code>processTpl</code>处理资源；</li><li>调用<code>getEmbedHTML</code>对<code>processTpl</code>处理后的资源中链接的远程<code>js、css</code>资源取到本地并嵌入到<code>html</code>中 。</li></ul><p>至于请求<code>html</code>资源，主要是<code>fetch</code>方法的调用，不在此过多描述。下面主要讲一讲<code>processTpl</code>和<code>getEmbedHTML</code>两个函数。</p><h2 id="processtpl" tabindex="-1"><a class="header-anchor" href="#processtpl" aria-hidden="true">#</a> processTpl</h2><p>关于<code>processTpl</code>的代码，我不打算逐行进行分析，相反我会讲其中一个原本不应该是重要的点,那就是其中涉及到的<strong>正则表达式</strong>，这部分虽然看起来很基础，但实际上是理解函数<code>processTpl</code>的关键所在。我将在下面代码片段中注释上各个正则表达式可能匹配的内容，再整体描述一下主要逻辑，有了这些介绍，相信朋友们可以自己读懂该函数剩下的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段3，所属文件：src/process-tpl.js</span>
<span class="token comment">/*
  匹配整个script标签及其包含的内容，比如 &lt;script&gt;xxxxx&lt;/script&gt;或&lt;script xxx&gt;xxxxx&lt;/script&gt;

  [\\s\\S]    匹配所有字符。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行
  *         匹配前面的子表达式零次或多次
  +         匹配前面的子表达式一次或多次

  正则表达式后面的全局标记 g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。
  表达式的结尾处的不区分大小写 i 标记指定不区分大小写。   
*/</span>
<span class="token keyword">const</span> <span class="token constant">ALL_SCRIPT_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;script[\\s\\S]*?&gt;)[\\s\\S]*?&lt;\\/script&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
<span class="token comment">/*
    . 匹配除换行符 \\n 之外的任何单字符
    ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。

    圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 ?: 放在第一个选项前来消除这种副作用。
    其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!， ?=为正向预查，在任何开始匹配圆括
    号内的正则表达式模式的位置来匹配搜索字符串，?!为负向预查，在任何开始不匹配该正则表达式模
    式的位置来匹配搜索字符串。
    举例：exp1(?!exp2)：查找后面不是 exp2 的 exp1。

    所以这里的真实含义是匹配script标签，但type不能是text/ng-template
*/</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_TAG_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(script)\\s+((?!type=(&#39;|&quot;)text\\/ng-template\\3).)*?&gt;.*?&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">is</span></span><span class="token punctuation">;</span>
<span class="token comment">/*
* 匹配包含src属性的script标签

  ^ 匹配输入字符串的开始位置，但在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。
*/</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_SRC_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\ssrc=(&#39;|&quot;)?([^&gt;&#39;&quot;\\s]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含 type 属性的标签</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_TYPE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\stype=(&#39;|&quot;)?([^&gt;&#39;&quot;\\s]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含entry属性的标签//</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_ENTRY_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\sentry\\s*.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含 async属性的标签</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_ASYNC_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\sasync\\s*.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配向后兼容的nomodule标记</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_NO_MODULE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\snomodule\\s*.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含type=module的标签</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_MODULE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\stype=(&#39;|&quot;)?module(&#39;|&quot;)?\\s*.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配link标签</span>
<span class="token keyword">const</span> <span class="token constant">LINK_TAG_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(link)\\s+.*?&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">isg</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含 rel=preload或rel=prefetch 的标签， 小提示：rel用于规定当前文档与被了链接文档之间的关系，比如rel=“icon”等</span>
<span class="token keyword">const</span> <span class="token constant">LINK_PRELOAD_OR_PREFETCH_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\srel=(&#39;|&quot;)?(preload|prefetch)\\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含href属性的标签</span>
<span class="token keyword">const</span> <span class="token constant">LINK_HREF_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\shref=(&#39;|&quot;)?([^&gt;&#39;&quot;\\s]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含as=font的标签</span>
<span class="token keyword">const</span> <span class="token constant">LINK_AS_FONT</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\sas=(&#39;|&quot;)?font\\1.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配style标签</span>
<span class="token keyword">const</span> <span class="token constant">STYLE_TAG_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;style[^&gt;]*&gt;[\\s\\S]*?&lt;\\/style&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配rel=stylesheet的标签</span>
<span class="token keyword">const</span> <span class="token constant">STYLE_TYPE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+rel=(&#39;|&quot;)?stylesheet\\1.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含href属性的标签</span>
<span class="token keyword">const</span> <span class="token constant">STYLE_HREF_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\shref=(&#39;|&quot;)?([^&gt;&#39;&quot;\\s]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配注释</span>
<span class="token keyword">const</span> <span class="token constant">HTML_COMMENT_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;!--([\\s\\S]*?)--&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含ignore属性的 link标签</span>
<span class="token keyword">const</span> <span class="token constant">LINK_IGNORE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;link(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">is</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含ignore属性的style标签</span>
<span class="token keyword">const</span> <span class="token constant">STYLE_IGNORE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;style(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">is</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配含ignore属性的script标签</span>
<span class="token keyword">const</span> <span class="token constant">SCRIPT_IGNORE_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;script(\\s+|\\s+.+\\s+)ignore(\\s*|\\s+.*|=.*)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">is</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解了这些正则匹配规则，为我们接下来的分析做好了准备，由于源码中<code>processTpl</code>内容比较丰富，为了方便理解，接下来我会将源码中实际的代码替换成我的注释。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段4，所属文件：src/process-tpl.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">processTpl</span><span class="token punctuation">(</span><span class="token parameter">tpl<span class="token punctuation">,</span> baseURI<span class="token punctuation">,</span> postProcessTemplate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里省略许多代码...</span>
    <span class="token keyword">let</span> styles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> template <span class="token operator">=</span> tpl
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">HTML_COMMENT_REGEX</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 删掉注释</span>
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">LINK_TAG_REGEX</span><span class="token punctuation">,</span> <span class="token parameter">match</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里省略许多代码...</span>
                <span class="token comment">// 如果link标签中有ignore属性，则替换成占位符\`&lt;!-- ignore asset \${ href || &#39;file&#39;} replaced by import-html-entry --&gt;\`</span>
                <span class="token comment">// 如果link标签中没有ignore属性，将标签替换成占位符\`&lt;!-- \${preloadOrPrefetch ? &#39;prefetch/preload&#39; : &#39;&#39;} link \${linkHref} replaced by import-html-entry --&gt;\`</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">STYLE_TAG_REGEX</span><span class="token punctuation">,</span> <span class="token parameter">match</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里省略许多代码...</span>
                <span class="token comment">// 如果style标签有ignore属性，则将标签替换成占位符\`&lt;!-- ignore asset style file replaced by import-html-entry --&gt;\`</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ALL_SCRIPT_REGEX</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> scriptTag</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里省略许多代码...</span>
                <span class="token comment">// 这里虽然有很多代码，但可以概括为匹配正则表达式，替换成相应的占位符</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 这里省略一些代码...</span>
	<span class="token keyword">let</span> tplResult <span class="token operator">=</span> <span class="token punctuation">{</span>
		template<span class="token punctuation">,</span>
		scripts<span class="token punctuation">,</span>
		styles<span class="token punctuation">,</span>
		<span class="token literal-property property">entry</span><span class="token operator">:</span> entry <span class="token operator">||</span> scripts<span class="token punctuation">[</span>scripts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 这里省略一些代码...</span>
	<span class="token keyword">return</span> tplResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码中可以看出，在将相应的标签被替换成占位符后，最终返回了一个<code>tplResult</code>对象。该对象中的<code>scripts</code>、<code>styles</code>都是是数组，保存的是一个个链接，也就是被占位符替换的标签原有的<code>href</code>对应的值。</p><p>请大家把实现移动到本文的代码片段<strong>2</strong>，会发现接下来就调用我们接下来将要分析的<code>getEmbedHTML</code>函数。</p><h2 id="getembedhtml" tabindex="-1"><a class="header-anchor" href="#getembedhtml" aria-hidden="true">#</a> getEmbedHTML</h2><p>我们先来看看函数<code>getEmbedHTML</code>的相关代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getEmbedHTML</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> styles<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token punctuation">{</span> fetch <span class="token operator">=</span> defaultFetch <span class="token punctuation">}</span> <span class="token operator">=</span> opts<span class="token punctuation">;</span>
	<span class="token keyword">let</span> embedHTML <span class="token operator">=</span> template<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">getExternalStyleSheets</span><span class="token punctuation">(</span>styles<span class="token punctuation">,</span> fetch<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">styleSheets</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			embedHTML <span class="token operator">=</span> styles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> styleSrc<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">genLinkReplaceSymbol</span><span class="token punctuation">(</span>styleSrc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;style&gt;/* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>styleSrc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>styleSheets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/style&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> html<span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> embedHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> embedHTML<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getExternalStyleSheets</span><span class="token punctuation">(</span><span class="token parameter">styles<span class="token punctuation">,</span> fetch <span class="token operator">=</span> defaultFetch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">styleLink</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInlineCode</span><span class="token punctuation">(</span>styleLink<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// if it is inline style</span>
				<span class="token keyword">return</span> <span class="token function">getInlineCode</span><span class="token punctuation">(</span>styleLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// external styles</span>
				<span class="token keyword">return</span> styleCache<span class="token punctuation">[</span>styleLink<span class="token punctuation">]</span> <span class="token operator">||</span>
					<span class="token punctuation">(</span>styleCache<span class="token punctuation">[</span>styleLink<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>styleLink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getEmbedHTML</code>实际上主要做了两件事。<strong>一</strong>是获取<code>processTpl</code>中提到<code>style</code>资源链接对应的资源内容；<strong>二</strong>是将这些内容拼装成<code>style</code>标签，然后将<code>processTpl</code>中的占位符替换掉。</p><p>这时我们再回到本文的代码片段<strong>2</strong>，<code>getEmbedHTML</code>返回值是一个<code>Promise</code>，最终会决议的值是一个对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> embedHTML<span class="token punctuation">,</span>
    assetPublicPath<span class="token punctuation">,</span>
    <span class="token function-variable function">getExternalScripts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getExternalScripts</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> fetch<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getExternalStyleSheets</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getExternalStyleSheets</span><span class="token punctuation">(</span>styles<span class="token punctuation">,</span> fetch<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">execScripts</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">proxy<span class="token punctuation">,</span> strictGlobal<span class="token punctuation">,</span> execScriptsHooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scripts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">execScripts</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            fetch<span class="token punctuation">,</span>
            strictGlobal<span class="token punctuation">,</span>
            <span class="token literal-property property">beforeExec</span><span class="token operator">:</span> execScriptsHooks<span class="token punctuation">.</span>beforeExec<span class="token punctuation">,</span>
            <span class="token literal-property property">afterExec</span><span class="token operator">:</span> execScriptsHooks<span class="token punctuation">.</span>afterExec<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该对象最重要的是<code>template</code>和<code>execScripts</code>两个属性，<code>template</code>代表了页面中的内容（<code>html/css</code>），<code>execScripts</code>和页面需要执行的脚本相关。我们来看看<code>exeecScripts</code>内部实现。</p><h2 id="execscripts" tabindex="-1"><a class="header-anchor" href="#execscripts" aria-hidden="true">#</a> execScripts</h2><p>为了描述方便，我依然会将其中的大部分代码省略掉，写上注释。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">execScripts</span><span class="token punctuation">(</span><span class="token parameter">entry<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> proxy <span class="token operator">=</span> window<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 此处省略许多代码...</span>
	<span class="token keyword">return</span> <span class="token function">getExternalScripts</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> fetch<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token comment">// 和获取js资源链接对应的内容</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">scriptsText</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> <span class="token function-variable function">geval</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">scriptSrc<span class="token punctuation">,</span> inlineScript</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token comment">// 此处省略许多代码...</span>
                <span class="token comment">// 这里主要是把js代码进行一定处理，然后拼装成一个自执行函数，然后用eval执行</span>
                <span class="token comment">// 这里最关键的是调用了getExecutableScript，绑定了window.proxy改变js代码中的this引用</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>

			<span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token parameter">scriptSrc<span class="token punctuation">,</span> inlineScript<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 这里省略许多代码...</span>
				<span class="token comment">// 根据不同的条件，在不同的时机调用geval函数执行js代码，并将入口函数执行完暴露的含有微应用生命周期函数的对象返回</span>
				<span class="token comment">// 这里省略许多代码...</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">function</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> resolvePromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这里省略许多代码...</span>
                <span class="token comment">// 依次调用exec函数执行js资源对应的代码</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> success <span class="token operator">||</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们再将实现移动到代码片段<strong>1</strong>，注释里面有个占位<strong>1</strong>，这里面的逻辑对应流程图中的第<strong>6</strong>步到第<strong>8</strong>步，有了前面的基础，这部分逻辑读者朋友们可以自己阅读，有问题可以在留言区提出来。到这里，我们基本上对<code>import-html-entry</code>这个库的主要逻辑有了比较清晰的认识，朋友们可以一边看文章一边在编辑器中打开该项目的源代码，这样更容易理解，一起加油把细节研究透彻。</p><p>欢迎关注我的<code>微信订阅号：杨艺韬</code>，可以获取最新动态。</p>`,41),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","04.乾坤的资源加载机制(import-html-entry的内部实现).html.vue"]]);export{k as default};
