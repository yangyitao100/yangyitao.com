import{_ as n,o as s,c as a,f as e}from"./app.d90d410b.js";const t={},p=e(`<h1 id="uselayouteffect源码实现" tabindex="-1"><a class="header-anchor" href="#uselayouteffect源码实现" aria-hidden="true">#</a> useLayoutEffect源码实现</h1><h2 id="packages-react-src-reacthooks-js" tabindex="-1"><a class="header-anchor" href="#packages-react-src-reacthooks-js" aria-hidden="true">#</a> packages/react/src/ReactHooks.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token parameter">create<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span>create<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-src-react-js" tabindex="-1"><a class="header-anchor" href="#packages-react-src-react-js" aria-hidden="true">#</a> packages/react/src/React.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useLayoutEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ReactHooks&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>
  useLayoutEffect
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-index-js" tabindex="-1"><a class="header-anchor" href="#packages-react-index-js" aria-hidden="true">#</a> packages/react/index.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> 
    useLayoutEffect
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-reconciler-src-reactfiberhooks-js" tabindex="-1"><a class="header-anchor" href="#packages-react-reconciler-src-reactfiberhooks-js" aria-hidden="true">#</a> packages/react-reconciler/src/ReactFiberHooks.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Passive <span class="token keyword">as</span> PassiveEffect<span class="token punctuation">,</span> Update <span class="token keyword">as</span> UpdateEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ReactFiberFlags&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HasEffect <span class="token keyword">as</span> HookHasEffect<span class="token punctuation">,</span> Passive <span class="token keyword">as</span> HookPassive<span class="token punctuation">,</span> Layout <span class="token keyword">as</span> HookLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ReactHookEffectTags&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> HooksDispatcherOnMount <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">useReducer</span><span class="token operator">:</span> mountReducer<span class="token punctuation">,</span>  <span class="token comment">// 在mount期间，使用mountReducer处理useReducer</span>
  <span class="token literal-property property">useState</span><span class="token operator">:</span> mountState<span class="token punctuation">,</span>
  <span class="token literal-property property">useEffect</span><span class="token operator">:</span> mountEffect<span class="token punctuation">,</span>
  <span class="token literal-property property">useLayoutEffect</span><span class="token operator">:</span> mountLayoutEffect
<span class="token punctuation">}</span>

<span class="token keyword">const</span> HooksDispatcherOnUpdate <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">useReducer</span><span class="token operator">:</span> updateReducer<span class="token punctuation">,</span>
  <span class="token literal-property property">useState</span><span class="token operator">:</span> updateState<span class="token punctuation">,</span>
  <span class="token literal-property property">useEffect</span><span class="token operator">:</span> updateEffect<span class="token punctuation">,</span>
  <span class="token literal-property property">useLayoutEffect</span><span class="token operator">:</span> updateLayoutEffect
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mountLayoutEffect</span><span class="token punctuation">(</span><span class="token parameter">create<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">mountEffectImpl</span><span class="token punctuation">(</span>UpdateEffect<span class="token punctuation">,</span> HookLayout<span class="token punctuation">,</span> create<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">updateLayoutEffect</span><span class="token punctuation">(</span><span class="token parameter">create<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">updateEffectImpl</span><span class="token punctuation">(</span>UpdateEffect<span class="token punctuation">,</span> HookLayout<span class="token punctuation">,</span> create<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-reconciler-src-reactfiberflags-js" tabindex="-1"><a class="header-anchor" href="#packages-react-reconciler-src-reactfiberflags-js" aria-hidden="true">#</a> packages/react-reconciler/src/ReactFiberFlags.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> LayoutMask <span class="token operator">=</span> Update<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="packages-react-reconciler-src-reactfiberworkloop-js" tabindex="-1"><a class="header-anchor" href="#packages-react-reconciler-src-reactfiberworkloop-js" aria-hidden="true">#</a> packages/react-reconciler/src/ReactFiberWorkLoop.js</h2><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>import { 
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> commitMutationEffectsOnFiber,
</span><span class="token prefix unchanged"> </span><span class="token line"> commitPassiveUnmountEffects,
</span><span class="token prefix unchanged"> </span><span class="token line"> commitPassiveMountEffects,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  commitLayoutEffects
</span></span>} from &#39;./ReactFiberCommitWork&#39;;
function commitRoot(root) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { finishedWork } = root;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if ((finishedWork.subtreeFlags &amp; Passive) !== NoFlags || (finishedWork.flags &amp; Passive) !== NoFlags) {
</span><span class="token prefix unchanged"> </span><span class="token line">   if (!rootDoesHavePassiveEffect) {
</span><span class="token prefix unchanged"> </span><span class="token line">     rootDoesHavePassiveEffect = true;
</span><span class="token prefix unchanged"> </span><span class="token line">     scheduleCallback(flushPassiveEffect);
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const subtreeHasEffects = (finishedWork.subtreeFlags &amp; MutationMask) !== NoFlags;
</span><span class="token prefix unchanged"> </span><span class="token line"> const rootHasEffect = (finishedWork.flags &amp; MutationMask) !== NoFlags;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (subtreeHasEffects || rootHasEffect) {
</span><span class="token prefix unchanged"> </span><span class="token line">   commitMutationEffectsOnFiber(finishedWork, root);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    commitLayoutEffects(finishedWork, root);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if (rootDoesHavePassiveEffect) {
</span><span class="token prefix unchanged"> </span><span class="token line">     rootDoesHavePassiveEffect = false;
</span><span class="token prefix unchanged"> </span><span class="token line">     rootWithPendingPassiveEffects = root;
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> root.current = finishedWork;
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages-react-reconciler-src-reactfibercommitwork-js" tabindex="-1"><a class="header-anchor" href="#packages-react-reconciler-src-reactfibercommitwork-js" aria-hidden="true">#</a> packages/react-reconciler/src/ReactFiberCommitWork.js</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Placement<span class="token punctuation">,</span> MutationMask<span class="token punctuation">,</span> Update<span class="token punctuation">,</span> Passive<span class="token punctuation">,</span> LayoutMask <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ReactFiberFlags&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HasEffect <span class="token keyword">as</span> HookHasEffect<span class="token punctuation">,</span> Passive <span class="token keyword">as</span> HookPassive<span class="token punctuation">,</span> Layout <span class="token keyword">as</span> HookLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./ReactHookEffectTags&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitMutationEffectsOnFiber</span><span class="token punctuation">(</span><span class="token parameter">finishedWork<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">const</span> flags <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">recursivelyTraverseMutationEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">commitReconciliationEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> Update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>HookHasEffect <span class="token operator">|</span> HookLayout<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span><span class="token parameter">finishedWork<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span><span class="token parameter">finishedRoot<span class="token punctuation">,</span> current<span class="token punctuation">,</span> finishedWork</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> flags <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">recursivelyTraverseLayoutEffects</span><span class="token punctuation">(</span>finishedRoot<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">recursivelyTraverseLayoutEffects</span><span class="token punctuation">(</span>finishedRoot<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> LayoutMask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">commitHookLayoutEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> HookHasEffect <span class="token operator">|</span> HookLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">commitHookLayoutEffects</span><span class="token punctuation">(</span><span class="token parameter">finishedWork<span class="token punctuation">,</span> hookFlags</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>hookFlags<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">recursivelyTraverseLayoutEffects</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> parentFiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentFiber<span class="token punctuation">.</span>subtreeFlags <span class="token operator">&amp;</span> LayoutMask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> current <span class="token operator">=</span> child<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
      <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
      child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","09.useLayoutEffect源码实现.html.vue"]]);export{r as default};
