import{_ as s,o as n,c as a,f as e}from"./app.4326c516.js";const p="/assets/fibertree1.048bf58f.png",t={},o=e('<h1 id="fiber是什么" tabindex="-1"><a class="header-anchor" href="#fiber是什么" aria-hidden="true">#</a> Fiber是什么？</h1><p>Fiber代表的是一种数据结构，在代码中体现为一个对象，这个对象包括很多属性，其中特别值得注意的有：</p><ul><li>type：组件的类型，可以是函数组件、类组件或原生 DOM 元素。</li><li>key：组件的唯一标识符，用于在组件树中区分兄弟节点。</li><li>props：组件的属性。</li><li>stateNode：对于类组件，这是组件实例。对于原生 DOM 元素，这是实际的 DOM 节点。</li><li>return：指向父 Fiber 节点的指针。</li><li>child：指向第一个子 Fiber 节点的指针。</li><li>sibling：指向兄弟 Fiber 节点的指针。</li><li>flags：描述 Fiber 节点需要执行的副作用类型（如插入、更新或删除）。</li><li>alternate：指向当前 Fiber 节点的替代 Fiber 节点，这是双缓存技术的关键部分。</li></ul><p>我们来看一张图： <img src="'+p+`" alt="FiberNode"></p><p>假设我们有一个简单的 React 应用，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Welcome to React Fiber<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简化的示例中，React 将为根组件 App 创建一个 Fiber 节点。Fiber 节点的数据结构可能如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fiberNode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> App<span class="token punctuation">,</span> <span class="token comment">// 函数组件</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 没有 key</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 没有传入任何属性</span>
  <span class="token literal-property property">stateNode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 函数组件没有实例</span>
  <span class="token keyword">return</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 根 Fiber 节点没有父节点</span>
  <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/* 指向第一个子节点的指针 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sibling</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 没有兄弟节点</span>
  <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span> <span class="token comment">// 描述需要执行的副作用类型</span>
  <span class="token literal-property property">alternate</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 没有替代节点</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 React 遍历组件树时，它将为每个组件创建一个 Fiber 节点，这些节点通过 return、child 和 sibling 指针相互关联。当组件树中的组件发生更新时，React 会创建新的 Fiber 节点，这些节点与旧 Fiber 节点一起组成一颗完整的 Fiber 树。</p><p>我们在前面在实现原始版React的时候，渲染过程是将虚拟DOM-&gt;转化为真实DOM-&gt;将真实DOM挂载到页面上。那我们的Fiber架构下，在虚拟DOM和真实DOM之间不进行直接的转化，而是通过一个桥梁来进行关联，这个桥梁就是Fiber对象。</p>`,10),l=[o];function r(c,i){return n(),a("div",null,l)}const k=s(t,[["render",r],["__file","04.Fiber是什么.html.vue"]]);export{k as default};
