import{_ as o,r as l,o as r,c as p,b as a,d as e,e as n,f as t}from"./app.03bf752b.js";const c={},i=t(`<h1 id="_04-jsx相关概念和原理" tabindex="-1"><a class="header-anchor" href="#_04-jsx相关概念和原理" aria-hidden="true">#</a> 04.JSX相关概念和原理</h1><p>我们在前面环境准备的小节，创建了一个项目simple-react，我们现在回过头来看一下，会发现有这样的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Simple React App<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然这里面的代码等价于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elment <span class="token operator">=</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Simple React App<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>elment<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有些同学一眼看去会把<code>&lt;div&gt;Hello Simple React App&lt;/div&gt;</code>视为html，但事实上呢我们这里的<code>element</code>很多属性都是常规html标签所没有的或者和常规html标签有所差异，举个例子，onClick事件就和普通的html标签表达不一样，也就是说JSX和html是不同的两个东西。那究竟JSX是什么呢？</p><h2 id="什么是jsx" tabindex="-1"><a class="header-anchor" href="#什么是jsx" aria-hidden="true">#</a> 什么是JSX?</h2>`,7),d={href:"https://reactjs.org/docs/introducing-jsx.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<ul><li>JSX is a syntax extension to JavaScript. 翻译过来：JSX是JavaScript的一种语法扩展。大家从字面意思上就可以窥见一些信息，所谓语法扩展，就意味着JavaScript语法本身是不支持JSX的。比如我们在普通的JavaScript程序中编写类似于下面的代码：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elment <span class="token operator">=</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Simple React App<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>程序是会报错的。那JSX既不是html也不是JavaScript的一部分。那究竟是什么呢？根据本小节对应视频中的案例演示，我们可以知道在React程序中，JSX最终呈现出来的结果就是普通的Javascript代码。那这里JSX到普通Javascript的代码的转化是谁来完成的呢？一般来说，通常大家使用的是babel来完成这个转译的过程，之所以说是通常，就意味着不是绝对，哪怕我们自己写个程序也可以实现这个过程，当然自己写这些代码是没必要的，因为babel已经做得很成熟了。这里我希望大家树立两个观点：</p>`,3),v=a("li",null,"如果有成熟的工具，尽可能不去造轮子，避免浪费时间",-1),_={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://babeljs.io/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYewdgzgLgBApgGwLZzLAvDAPAEwJYBuAfABKIIgwBSAygBpYD0-xQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.20.12&externalPlugins=&assumptions=%7B%7D",target:"_blank",rel:"noopener noreferrer"},h=a("p",null,"至于该工具的功能演示可以在视频中观看领会，限于篇幅这里就不赘述。",-1);function k(g,b){const s=l("ExternalLinkIcon");return r(),p("div",null,[i,a("p",null,[e("关于这个问题，我们可以在React官方文档上面找到答案： "),a("a",d,[e("intruducing JSX"),n(s)]),e(" 文档中有这样的描述：")]),u,a("ul",null,[v,a("li",null,[e("如果有特殊需求，任何成熟工具具备的能力，理论上我们都可以实现，不存在完成某项工作非某个框架不可的情况 对babel不了解的同学呢，可以参阅babel的"),a("a",_,[e("官方文档"),n(s)]),e("。")])]),a("p",null,[e("上面我们在自己的项目SimpleReact中查看了编译的结果，但是需要进行启动项目，访问页面等一系列操作，比较繁琐，我们也可以在这个bable官网中的"),a("a",m,[e("try it out"),n(s)]),e("中进行调试。")]),h])}const S=o(c,[["render",k],["__file","04.JSX相关概念和原理.html.vue"]]);export{S as default};
