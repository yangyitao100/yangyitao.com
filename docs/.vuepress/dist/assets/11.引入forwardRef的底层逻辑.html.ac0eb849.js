import{_ as n,o as s,c as a,f as e}from"./app.d90d410b.js";const t={},p=e(`<h1 id="_10-引入forwardref的底层逻辑" tabindex="-1"><a class="header-anchor" href="#_10-引入forwardref的底层逻辑" aria-hidden="true">#</a> 10.引入forwardRef的底层逻辑</h1><p>上一小节我们实现了类组件的ref相关代码，本小节我们来探索如何为函数式组件引入ref的相关能力。大家想一想，类组件、函数组件都是组件，为什么函数组件不能像类组件那样实现ref的相关功能，还要在这里单独用一小节来进行探索。</p><p>我们在实现类组件的ref相关功能的时候，之所以能将ref和类组件生成的DOM进行关联，是因为我们当时通过<code>ref &amp;&amp; (ref.current = instance);</code>先将类组件的实例和ref进行关联，然后通过调用实例的方法间接操作。</p><p>在前面分析类组件的ref实现原理的小节，我们已经知道要让ref发挥作用可以通过以下3个步骤完成：</p><ol><li>初始化：<code>this.myRef = React.createRef();</code> 相当于 this.myRef = { current: null }</li><li>传递ref引用：<code>ref= { this.myRef }</code>，这里有个隐藏的动作，this.myRef.current = xxx dom</li><li>取值：<code>const element = this.myRef.current;</code></li></ol><p>如果我们企图在函数组件中，模仿类组件的这三个步骤来实现ref的相关功能是无法成功的，比如官方文档上提供的下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://reactjs.org/docs/refs-and-the-dom.html</span>
<span class="token keyword">function</span> <span class="token function">MyFunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This will *not* work!</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>MyFunctionComponent ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么不能成功呢？</p><blockquote><p>https://reactjs.org/docs/refs-and-the-dom.html 官方文档提到过：By default, you may not use the ref attribute on function components because they don’t have instances</p></blockquote><p>官方文档说是因为函数组件没有实例，这个解释很正确，但对于很多同学来讲可能会感觉不知所云。我们先忽略这个解释，跟着我的思路往下走。</p><p>我们在本章前面介绍过，函数组件本质上就是一个函数，只不过这个函数的返回值是一个虚拟DOM。而这段代码中，我们在使用函数组件的时候，只是将this.textInput和MyFunctionComponent进行关联，但并没有将this.textInput和MyFunctionComponent的返回值进行关联。问题产生的原因已经很清晰，那解决方案也就很清晰了，那就是建立函数组件的ref值和函数组件对应函数的返回值之间的关联。那现在面临的问题就是怎么进行关联，能自然联想到的方式就是将ref作为函数组件的参数传入，并在返回值中进行手动使用，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> functionRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>functionRef<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将react-dom.js中的getDomByFunctionComponent进行改造：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getDomByFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> vNode<span class="token punctuation">;</span>
    <span class="token keyword">let</span> renderVNode <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>renderVNode<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">createDOM</span><span class="token punctuation">(</span>renderVNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种方案有个弊端，就是每个函数组件的返回值都需要我们手动进行ref的关联，给日常开发带来了困扰，这种方案当然是不可行的，所以我们需要改进，将前面想到的手动关联的方式转化成自动关联。所以React提供了一个单独的api来实现这个关联的过程，这个api就是forwardRef，至于forwardRef具体如何实现我们会在下一小节进行介绍。。</p>`,15),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","11.引入forwardRef的底层逻辑.html.vue"]]);export{r as default};
