import{_ as n,o as s,c as a,f as t}from"./app.03bf752b.js";const e="/assets/07-01.9f70699c.webp",p="/assets/08-01.aeeb6ff0.webp",o={},c=t(`<h1 id="_07-对single-spa的路由管理及微应用状态管理的分析" tabindex="-1"><a class="header-anchor" href="#_07-对single-spa的路由管理及微应用状态管理的分析" aria-hidden="true">#</a> 07.对single-spa的路由管理及微应用状态管理的分析</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>抛开<strong>手动</strong>对微应用进行加载、挂载等操作不讲，<code>single-spa</code>最主要的应用场景是根据路由的切换来自动对已注册的微应用进行一系列管理。这里面有两个重要环节，<strong>一</strong>是对路由的变化进行监听和控制，<strong>二</strong>是根据路由的变化改变微应用的一些状态。本文就分两大部分，从源码层面分别对<code>single-spa</code>的路由管理和微应用状态管理进行分析。</p></blockquote><h1 id="路由管理机制" tabindex="-1"><a class="header-anchor" href="#路由管理机制" aria-hidden="true">#</a> 路由管理机制</h1><h2 id="路由管理的初始化的主要逻辑" tabindex="-1"><a class="header-anchor" href="#路由管理的初始化的主要逻辑" aria-hidden="true">#</a> 路由管理的初始化的主要逻辑</h2><p>请先浏览流程图：</p><p><img src="`+e+`" alt="single-spa的路由劫持流程.jpg"></p><p>从流程图中，关于路由管理的初始化，<code>single-spa</code>做了<strong>4</strong>件事情。我们同时看看代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isInBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对应流程图第1步</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;hashchange&quot;</span><span class="token punctuation">,</span> urlReroute<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> urlReroute<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 对应流程图第2步</span>
  <span class="token comment">// 这里省略许多代码...</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里省略许多代码...</span>
      <span class="token comment">// 如果eventName为hashchange或popstate，则将fn存入一个数组变量中，并直接return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">originalAddEventListener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function-variable function">removeEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listenerFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listenerFn <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里省略许多代码...</span>
      <span class="token comment">// 如果eventName为hashchange或popstate，则将listenerFn从数组变量中移除，并直接return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">originalRemoveEventListener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 对应流程图第3步</span>
  window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">patchedUpdateState</span><span class="token punctuation">(</span>
    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">,</span>
    <span class="token string">&quot;pushState&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">patchedUpdateState</span><span class="token punctuation">(</span>
    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">,</span>
    <span class="token string">&quot;replaceState&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 省去许多代码...</span>
  <span class="token comment">// 对应流程图第4步</span>
  window<span class="token punctuation">.</span>singleSpaNavigate <span class="token operator">=</span> navigateToUrl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合流程图和代码，每一步都可能能够理解，但是源码为什么会这么写呢？我们可以这样来描述上述<strong>4</strong>个步骤。<strong>首先</strong>，监听<code>hashchange、popstate</code>事件本身；<strong>其次</strong>，拦截设置<code>hashchange、popstate</code>监听事件的监听函数；<strong>再次</strong>，拦截可能改变路由状态的<strong>api</strong>方法；<strong>最后</strong>，提供一个全局的工具函数，方便用户改变路由状态。这里有两个方面值得我们注意，<strong>一</strong>是要明白，调用<code>history.pushState</code>或<code>history.replaceState</code>并不会触发<code>popstate</code>事件。<strong>二</strong>是在世纪编码中如果要试图去劫持某个行为，不仅要劫持相应的监听事件，还要劫持可能改变该行为又不会触发监听事件的相应<code>API</code>。另外，需要注意的是，代码片段<strong>1</strong>中的代码是在文件<code>src/navigation/navigation-events.js</code>中的最外层，并未放到函数中并调用，虽然<code>single-spa</code>是个优秀的开源库，但个人仍然认为这样代码结构不值得学习在实际编码中应该予以规避。下面是<code>MDN</code>关于<code>history API</code>的相关文档原文说明。</p><blockquote><p>Note that just calling history.pushState() or history.replaceState() won&#39;t trigger a popstate event. The popstate event will be triggered by doing a browser action such as a click on the back or forward button (or calling history.back() or history.forward() in JavaScript).</p></blockquote><p>从上面代码代码片段<strong>1</strong>对应的流程图第<strong>1</strong>步中的代码，我们知道<code>single-spa</code>为<code>popstate、hashchange</code>两个事件注册了监听事件，事件触发后会执行<code>urlReroute</code>函数。而<code>urlReroute</code>函数内部只是调用了<code>reroute([], arguments)</code>这样一行代码。关于这个<code>reroute</code>函数非常重要，几乎所有（之所以不是全部，是因为<code>single-spa</code>还有些跟路由无关的机制）微应用的状态变化和管理都根这个函数有着紧密的联系，后续文章中会有所介绍。现在我们继续先看路由管理的初始化相关的内容。</p><h2 id="劫持监听事件" tabindex="-1"><a class="header-anchor" href="#劫持监听事件" aria-hidden="true">#</a> 劫持监听事件</h2><p>我们先看一下，劫持<code>hashchange、popstate</code>事件的具体实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段2</span>
<span class="token keyword">const</span> originalAddEventListener <span class="token operator">=</span> window<span class="token punctuation">.</span>addEventListener<span class="token punctuation">;</span>
<span class="token keyword">const</span> originalRemoveEventListener <span class="token operator">=</span> window<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function-variable function">addEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        routingEventsListeningTo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token function">find</span><span class="token punctuation">(</span>capturedEventListeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> listener <span class="token operator">===</span> fn<span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        capturedEventListeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">originalAddEventListener</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function-variable function">removeEventListener</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> listenerFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内部实现和window.addEventListener类似，不在此赘述</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>2</strong>中，核心逻辑我们可以这样概括，将原始的<code>window.addEventListener</code>和<code>window.removeEventListner</code>保存起来，然后对这两个监听函数进行重写。重写的内容其实也很简单，如果将要监听的事件是<code>hashchange</code>或<code>popstate</code>，则将相应的回调函数保存在一个数组中，待合适的时机进行批量执行，同时监听函数返回。如果所要监听的函数不是<code>hashchange</code>或<code>popstate</code>，则调用原始的<code>window.addEventListener</code>或<code>window.removeEventListner</code>注册对应的监听事件。这种改变原函数行为的机制有人称之为<code>Monkeypatch</code>，例如本文中有下面的注释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Monkeypatch addEventListener so that we can ensure correct timing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际编码中，如果有相似场景，可以借鉴这种写法。</p><h2 id="劫持history-api" tabindex="-1"><a class="header-anchor" href="#劫持history-api" aria-hidden="true">#</a> 劫持history API</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段3</span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">patchedUpdateState</span><span class="token punctuation">(</span>
    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">,</span>
    <span class="token string">&quot;pushState&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">patchedUpdateState</span><span class="token punctuation">(</span>
    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">,</span>
    <span class="token string">&quot;replaceState&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>3</strong>中是拦截<code>window.history.pushState</code>和<code>window.history.replaceState</code>两个<code>API</code>。</p><h3 id="patchedupdatestate" tabindex="-1"><a class="header-anchor" href="#patchedupdatestate" aria-hidden="true">#</a> patchedUpdateState</h3><p>具体处理函数是<code>patchedUpdateState</code>,代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段4</span>
<span class="token keyword">function</span> <span class="token function">patchedUpdateState</span><span class="token punctuation">(</span><span class="token parameter">updateState<span class="token punctuation">,</span> methodName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> urlBefore <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">updateState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> urlAfter <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>urlRerouteOnly <span class="token operator">||</span> urlBefore <span class="token operator">!==</span> urlAfter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>
          <span class="token function">createPopStateEvent</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reroute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部逻辑也比较简单，主要做了三件事情，<strong>一</strong>是调用未被重写过的<code>window.history.pushState</code>或<code>window.history.replaceState</code>，然后将执行结果记录为<code>result</code>。<strong>二</strong>是记录调用<code>API</code>前后<code>window.location.href</code>的值。<strong>三</strong>是触发一个自定义的事件，具体是什么样子的事件，由函数<code>createPopStateEvent</code>生成。</p><h3 id="createpopstateevent" tabindex="-1"><a class="header-anchor" href="#createpopstateevent" aria-hidden="true">#</a> createPopStateEvent</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">function</span> <span class="token function">createPopStateEvent</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> originalMethodName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> evt<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    evt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PopStateEvent</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    evt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">&quot;PopStateEvent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    evt<span class="token punctuation">.</span><span class="token function">initPopStateEvent</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  evt<span class="token punctuation">.</span>singleSpa <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  evt<span class="token punctuation">.</span>singleSpaTrigger <span class="token operator">=</span> originalMethodName<span class="token punctuation">;</span>
  <span class="token keyword">return</span> evt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>5</strong>中主要做了三件事，<strong>一</strong>初始化一个事件对象，<strong>二</strong>是对该事件对象添加一些标识性质的属性，<strong>三</strong>是做一些兼容性处理。至于为什么要这样进行兼容性处理，请阅读源码中指示的相关<code>issues</code>地址。</p><h2 id="window-singlespanavigate" tabindex="-1"><a class="header-anchor" href="#window-singlespanavigate" aria-hidden="true">#</a> window.singleSpaNavigate</h2><p>对应上文流程图中的第<strong>4</strong>步，有下面这行代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>singleSpaNavigate <span class="token operator">=</span> navigateToUrl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数主要的功能是如源码中的注释所示：</p><blockquote><p>For convenience in <code>onclick</code> attributes, we expose a global function for navigating to whatever an &lt;a&gt; tag&#39;s href is.</p></blockquote><p>我们来看看<code>navigateToUrl</code>是如何进行处理的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">navigateToUrl</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> url<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    url <span class="token operator">=</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
    obj <span class="token operator">&amp;&amp;</span>
    obj<span class="token punctuation">.</span>currentTarget <span class="token operator">&amp;&amp;</span>
    obj<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>href <span class="token operator">&amp;&amp;</span>
    obj<span class="token punctuation">.</span>preventDefault
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    url <span class="token operator">=</span> obj<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略一些代码... 此处在抛出错误</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token function">parseUri</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> destination <span class="token operator">=</span> <span class="token function">parseUri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> destination<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>host <span class="token operator">!==</span> destination<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> destination<span class="token punctuation">.</span>host<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略一些代码... 一些条件判断</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
    destination<span class="token punctuation">.</span>pathname <span class="token operator">===</span> current<span class="token punctuation">.</span>pathname <span class="token operator">&amp;&amp;</span>
    destination<span class="token punctuation">.</span>search <span class="token operator">===</span> current<span class="token punctuation">.</span>search
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> destination<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// different path, host, or query params</span>
    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的逻辑其实比较简单，就不逐行代码解释了。相反，我这里要把<code>single-spa</code>的使用文档中的内容放到这里，相信有助于理解上面源码为什么要这么写。说到底这只是一个工具方法，没有它也不影响程序本身，所以重要性一般，也就不在此对文档进行逐行翻译了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*Use this utility function to easily perform url navigation between registered applications without needing to deal with event.preventDefault(), pushState, triggerAppChange(), etc.

arguments
    navigationObj: string | context | DOMEvent
    navigationObj must be one of the following types:
    a url string.
    a context / thisArg that has an href property; useful for calling singleSpaNavigate.call(anchorElement) with a reference to the anchor element or other context.
    a DOMEvent object for a click event on a DOMElement that has an href attribute; ideal for the &lt;a onclick=&quot;singleSpaNavigate&quot;&gt;&lt;/a&gt; use case.*/</span>

<span class="token comment">// Three ways of using navigateToUrl</span>
singleSpa<span class="token punctuation">.</span><span class="token function">navigateToUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/new-url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
singleSpa<span class="token punctuation">.</span><span class="token function">navigateToUrl</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>singleSpa<span class="token punctuation">.</span>navigateToUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">A</span> fourth way to use navigateToUrl<span class="token punctuation">,</span> <span class="token keyword">this</span> one inside <span class="token keyword">of</span> your <span class="token constant">HTML</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;/new-url&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;singleSpaNavigate(event)&quot;</span><span class="token operator">&gt;</span>My link<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我们对<code>single-spa</code>的路由管理已经有比较深入的理解，下文就进入<code>single-spa</code>的另一个重要主题<strong>微应用的状态管理</strong>吧。</p><h1 id="微应用的状态管理机制" tabindex="-1"><a class="header-anchor" href="#微应用的状态管理机制" aria-hidden="true">#</a> 微应用的状态管理机制</h1><p>关于这部分内容，会分两个方面进行讲解：</p><ul><li>微应用的<strong>状态种类及状态间的转化关系</strong></li><li>微应用的<strong>状态切换流程</strong></li></ul><p>先知道微应用有哪些状态，后看源码中是如何具体实现这些状态变化。</p><h2 id="微应用的状态种类" tabindex="-1"><a class="header-anchor" href="#微应用的状态种类" aria-hidden="true">#</a> 微应用的状态种类</h2><p>我们先看<code>src/applications/app.helpers.js</code>文件中关于微应用状态的常量声明：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// App statuses</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NOT_LOADED</span> <span class="token operator">=</span> <span class="token string">&quot;NOT_LOADED&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOADING_SOURCE_CODE</span> <span class="token operator">=</span> <span class="token string">&quot;LOADING_SOURCE_CODE&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NOT_BOOTSTRAPPED</span> <span class="token operator">=</span> <span class="token string">&quot;NOT_BOOTSTRAPPED&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">BOOTSTRAPPING</span> <span class="token operator">=</span> <span class="token string">&quot;BOOTSTRAPPING&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">NOT_MOUNTED</span> <span class="token operator">=</span> <span class="token string">&quot;NOT_MOUNTED&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MOUNTING</span> <span class="token operator">=</span> <span class="token string">&quot;MOUNTING&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MOUNTED</span> <span class="token operator">=</span> <span class="token string">&quot;MOUNTED&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">UPDATING</span> <span class="token operator">=</span> <span class="token string">&quot;UPDATING&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">UNMOUNTING</span> <span class="token operator">=</span> <span class="token string">&quot;UNMOUNTING&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">UNLOADING</span> <span class="token operator">=</span> <span class="token string">&quot;UNLOADING&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOAD_ERROR</span> <span class="token operator">=</span> <span class="token string">&quot;LOAD_ERROR&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SKIP_BECAUSE_BROKEN</span> <span class="token operator">=</span> <span class="token string">&quot;SKIP_BECAUSE_BROKEN&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中可以直观的看出一共有<strong>12</strong>种状态。为了更容易把握<code>single-spa</code>的核心功能，本文会省略对下面两个状态的讲解，也就是本文会涉及到其他<strong>10</strong>种状态的描述。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOAD_ERROR</span> <span class="token operator">=</span> <span class="token string">&quot;LOAD_ERROR&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SKIP_BECAUSE_BROKEN</span> <span class="token operator">=</span> <span class="token string">&quot;SKIP_BECAUSE_BROKEN&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="微应用的状态切换流程" tabindex="-1"><a class="header-anchor" href="#微应用的状态切换流程" aria-hidden="true">#</a> 微应用的状态切换流程</h2><p>我们先看看流程图： <img src="`+p+`" alt="single-spa的状态切换.jpg"></p><p>从图中可以直观的看出，虽然状态很多，抛开异常状态，微应用状态数量多达<strong>10</strong>个，但是可以概括为<strong>4</strong>个大的状态：<strong>加载</strong>、<strong>启动</strong>、<strong>挂载</strong>、<strong>卸载</strong>。我们可以把<strong>更新</strong>涉及到的状态理解为<code>MOUNTED</code>状态下的一种特殊状态。说到这这时候是不是有些似曾相识。还记得我们在注册微应用的时候有个加载微应用的函数作为注册函数<code>registerApplication</code>的参数<code>applicationOrLoadingFn: () =&gt; &lt;Function | Promise&gt;</code>传入。而执行完这个加载函数会返回一个对象，该对象上有三个函数：<code>bootstrap</code>、<code>mount</code>、<code>unmount</code>。没错，流程图中对应的四个大的状态就对应着上面四个函数。下文，我们以<strong>加载</strong>阶段为例，来看<code>single-spa</code>如何对微应用的状态进行控制。至于其他的状态变化和<strong>加载</strong>阶段状态的变化并没有太大的不同，就不在本文中进行赘述了。 还记得我们前面的文章中提到的，在注册微应用的时候有这样一行代码吗：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>apps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">loadErrorTime</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token constant">NOT_LOADED</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parcels</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">devtools</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">overlays</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">selectors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      registration
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，也就是说我们注册的微应用，初始状态就是<code>NOT_LOADED</code>。在<strong>加载</strong>阶段，会涉及一个<code>toLoadPromise</code>函数，代码如下：</p><blockquote><p>注：至于<code>toLoadPromise</code>是在何时调用，本文暂不分析，在后面会有文章介绍<code>reroute</code>函数的一些主要逻辑的时候会提到，此时只需要该函数会在<strong>加载</strong>阶段执行即可。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略许多代码...</span>
    app<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">LOADING_SOURCE_CODE</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处省略许多代码...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>loadPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略许多代码...</span>
        <span class="token keyword">return</span> loadPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 此处省略许多代码...</span>
          app<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">NOT_BOOTSTRAPPED</span><span class="token punctuation">;</span>
          <span class="token comment">// 此处省略许多代码...</span>
          <span class="token keyword">return</span> app<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略许多代码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isUserErr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这就是本文没涉及到的错误相关的状态</span>
          newStatus <span class="token operator">=</span> <span class="token constant">SKIP_BECAUSE_BROKEN</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这就是本文没涉及到的错误相关的状态</span>
          newStatus <span class="token operator">=</span> <span class="token constant">LOAD_ERROR</span><span class="token punctuation">;</span>
          <span class="token comment">// 此处省略许多代码</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 此处省略许多代码</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码中不难看出，所谓的状态变化，就是在不同阶段修改代表微应用的对象<code>app</code>上面的<code>status</code>属性的值。</p><p>欢迎关注我的 <code>微信公众号：杨艺韬</code>，可以获得最新动态。</p>`,56),i=[c];function l(u,r){return s(),a("div",null,i)}const k=n(o,[["render",l],["__file","07.对single-spa的路由管理及微应用状态管理的分析.html.vue"]]);export{k as default};
