import{_ as n,o as s,c as a,f as e}from"./app.03bf752b.js";const t="/assets/04-01.c3aff0a7.webp",p="/assets/04-02.45e3092f.webp",o={},c=e(`<h1 id="_04-vue3响应式系统源码实现1" tabindex="-1"><a class="header-anchor" href="#_04-vue3响应式系统源码实现1" aria-hidden="true">#</a> 04.Vue3响应式系统源码实现1</h1><blockquote><p>我们在前一篇文章中手写实现了一个极简版的响应式系统，接下来将会开始带着大家分析<code>reactivity</code>中的具体实现。关于<code>reactivity</code>的源码实现细节分析会通过两篇文章完成。本文将会从观察<code>reactivity</code>的代码文件结构开始，并从中选出最核心最重要的几个文件(<code>reactive.ts、effect.ts、dep.ts、baseHandlers.ts、collectionHanders.ts</code>)分析其代码关系，接着会分析这其中的一些关键逻辑。在下一篇文章中在探索一些具体<code>api</code>的功能以及对应的源码实现细节。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/******************************************************************/</span>
<span class="token doc-comment comment">/*****************     欢迎关注微信公众号：杨艺韬     *****************/</span>
<span class="token doc-comment comment">/******************************************************************/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="代码组织结构" tabindex="-1"><a class="header-anchor" href="#代码组织结构" aria-hidden="true">#</a> 代码组织结构</h1><p>我们先来看看<code>reactivity</code>由哪些代码文件组成：</p><p><img src="`+t+`" alt="dir.jpg"> 从图中可以看出，<code>reactivity</code>的具体实现由<strong>12</strong>个代码文件组成。 看过上一篇文章的朋友可能会觉得惊讶，当时极简版的代码是这样的简单，不足<strong>50</strong>行。 没错，当时写的极简版响应式系统仅用少量代码就实现了修改对象的属性，自动触发页面更新的功能。相信<strong>50</strong>行代码和<strong>12</strong>个文件之间的差距不仅仅是边界条件处理那么简单。但是也不用担心，只要抓住了这些文件间的关系就可以消除心中的疑惑，因为根本的原理确确实实就是我们前面手写的极简版。我们先来看看这<strong>12</strong>个文件具体的分工是什么：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>reactive.ts-----------------对外提供响应式能力（对象）
ref.ts----------------------对外提供响应式能力（原始类型值）
baseHandlers.ts-------------Proxy处理器（普通对象）
collectionHandlers.ts-------Proxy处理器（集合对象）
effect.ts-------------------响应式对象属性依赖管理器
dep.ts----------------------工具函数

computed.ts-----------------计算属性
deferredComputed.ts---------下一个tick执行的计算属性
effectScope.ts--------------effect相关的一个管理器
index.ts--------------------集合整个库的能力，对外暴露
operations.ts---------------操作类型相关的常量
warning.ts------------------工具函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文只会涉及上面列出的前<strong>5</strong>个文件。之所以这样安排，是因为这<strong>5</strong>个文件的内容，完整的呈现了响应式系统的工作流程，而且<code>reactivive.ts</code>暴露的<code>reactive</code>函数在某种程度上可以认为是日常开发中最常用的<code>api</code>，理解了上面几个文件中的代码，对于响应式系统剩下的内容就能比较轻松的理解。</p><p>如果对这几个文件的分工，此时还是比较疑惑，可以回想一下上一篇文章中实现的极简版响应式系统相关代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段1--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">const</span> objMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">const</span> <span class="token function-variable function">reactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                        effectArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
                        propertyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> effectArr<span class="token punctuation">)</span>
                        objMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyMap<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> 
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> val
                    <span class="token keyword">let</span> propertyMap <span class="token operator">=</span> objMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">let</span> effectArr <span class="token operator">=</span> propertyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                    effectArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            activeEffect <span class="token operator">=</span> fn
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> dataObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;yangyitao&#39;</span><span class="token punctuation">}</span>
        <span class="token keyword">let</span> reactiveDataObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span>

        <span class="token keyword">const</span> <span class="token function-variable function">functionA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> reactiveDataObj<span class="token punctuation">.</span>name <span class="token comment">// Id为\`anyRealId\`的元素真实存在 </span>
        <span class="token punctuation">}</span>
        <span class="token function">effect</span><span class="token punctuation">(</span>functionA<span class="token punctuation">)</span>

        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            reactiveDataObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;杨艺韬&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从极简本中要抓住几个重点：</p><ol><li>effect函数</li><li>调用函数reactive，让普通对象具备响应式能力</li><li>创建Proxy对象实例，给Proxy对象设置处理器对象</li></ol><p>这个时候我们再回头看我们今天要分析的几个文件，由于<code>dep.ts</code>只是一个工具函数，可以暂时忽略。而<code>collectionHandlers.ts</code>只是为<code>Set</code>、<code>Map</code>之类的集合对象添加响应式能力而存在的Proxy处理器对象相关的内容，我们这里也可以暂时忽略，只分析为普通对象添加响应式能力的代码。因此可以先简单的认为：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>reactive.ts-----------------极简版中的reactive函数所在的地方
baseHandlers.ts-------------极简版中的创建proxy实例的地方
effect.ts-------------------极简版中的调用effect函数的地方
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体进入代码之前，请先看下面这张思维导图：</p><p><img src="`+p+`" alt="conection.png"> 此时看这张图片可能会觉得有些复杂，但没关系，分析完本文的内容再回过头相信就会更加容易理解了。</p><h1 id="函数reactive" tabindex="-1"><a class="header-anchor" href="#函数reactive" aria-hidden="true">#</a> 函数reactive</h1><p>按照极简版中的理解，<code>reactive</code>函数，就是为某个对象创建一个<code>Proxy</code>实例并返回。我们先看看源码中的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> reactive<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> UnwrapNestedRefs<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略一些次要逻辑...</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
    mutableHandlers<span class="token punctuation">,</span>
    mutableCollectionHandlers<span class="token punctuation">,</span>
    reactiveMap
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> Target<span class="token punctuation">,</span>
  <span class="token literal-property property">isReadonly</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">baseHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">collectionHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">proxyMap</span><span class="token operator">:</span> WeakMap<span class="token operator">&lt;</span>Target<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略一些次要逻辑...</span>
  <span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> existingProxy
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> targetType <span class="token operator">=</span> <span class="token function">getTargetType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> TargetType<span class="token punctuation">.</span><span class="token constant">INVALID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    <span class="token comment">//此时暂不考虑集合对象的处理，可以认为该参数值就是baseHandler</span>
    targetType <span class="token operator">===</span> TargetType<span class="token punctuation">.</span><span class="token constant">COLLECTION</span> <span class="token operator">?</span> collectionHandlers <span class="token operator">:</span> baseHandlers
  <span class="token punctuation">)</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
  <span class="token keyword">return</span> proxy
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，逻辑和极简版还是高度相似的，只不过这里的<code>Proxy</code>实例的处理器相关代码是放在文件<code>baseHandlers</code>中维护的。但是，我们会发现在文件<code>reactive.ts</code>中除了函数<code>reactive</code>，还有函数<code>shallowReactive</code>、<code>readonly</code>、<code>shallowReadonly</code>，这几个函数内部和函数<code>reactive</code>一样也调用了<code>createReactiveObject</code>，也就是说都最终创建了<code>Proxy</code>实例，只不过传入的参数不太一样。 具体这些函数的功能，可以查阅<code>vue3</code>的官方文档，就不在此处赘述了。另外<code>reactive.ts</code>中还有<strong>7</strong>个工具函数，逻辑相对简单朋友们可以自行阅读，不作为本文重点进行介绍了。</p><h1 id="函数effect" tabindex="-1"><a class="header-anchor" href="#函数effect" aria-hidden="true">#</a> 函数effect</h1><p>先看看函数<code>effect</code>的具体代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> effect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> ReactiveEffectOptions
<span class="token punctuation">)</span><span class="token operator">:</span> ReactiveEffectRunner <span class="token punctuation">{</span>
  <span class="token comment">// 省去一些参处理代码...</span>
  <span class="token keyword">const</span> _effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token comment">// 省去和effectScope相关逻辑以及一些条件判断的代码...</span>
  _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 省去返回值相关逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对该函数代码进行精简后，逻辑很简单，创建一个<code>ReactiveEffect</code>实例，并执行其<code>run</code>方法。我们来看看类<code>ReactiveEffect</code>的代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  active <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token literal-property property">deps</span><span class="token operator">:</span> Dep<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> ReactiveEffect <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token comment">// 省略许多属性声明代码...</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">public</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> <span class="token literal-property property">scheduler</span><span class="token operator">:</span> EffectScheduler <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    scope<span class="token operator">?</span><span class="token operator">:</span> EffectScope
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略代码...</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略许多代码...</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 省略许多代码...</span>
  <span class="token punctuation">}</span>

  <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略许多代码...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去除支持，发现<code>run</code>方法只是执行了传入的<code>fn</code>这个函数参数并返回结果。也就是说，我们调用<code>effect</code>函数，最重要的工作，就是执行了传入的函数参数。朋友们可能会问，执行了又怎么样呢？</p><h2 id="mutablehandlers" tabindex="-1"><a class="header-anchor" href="#mutablehandlers" aria-hidden="true">#</a> mutableHandlers</h2><p>还记得我们上面分析<code>reactive</code>函数时候提到的<code>baseHandler</code>吗，当我们将某个普通对象传入<code>reactive</code>的时候，会为该对象创建<code>Proxy</code>实例，并设置<code>baseHandler</code>，而<code>baseHander</code>又做了细致的区分，对于我们调用<code>reactive</code>函数而言，其真实的处理器是<code>baseHandlers.ts</code>中的<code>mutableHandlers</code>，具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">mutableHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  get<span class="token punctuation">,</span>
  set<span class="token punctuation">,</span>
  deleteProperty<span class="token punctuation">,</span>
  has<span class="token punctuation">,</span>
  ownKeys
<span class="token punctuation">}</span>
<span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> Target<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span> <span class="token literal-property property">receiver</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略若干代码...</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> TrackOpTypes<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// 省略若干代码...</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token parameter">shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> unknown<span class="token punctuation">,</span>
    <span class="token literal-property property">receiver</span><span class="token operator">:</span> object</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>
    <span class="token comment">// 省略若干代码...</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">SET</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token comment">// 省略若干代码</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得我们在极简版中的响应式系统中，访问对象属性的时候，记录其对应的从<code>effect</code>传入的函数，改变对象属性值的时候，遍历记录中的函数依次执行。这个记录和触发的任务在这里交给了<code>track</code>和<code>trigger</code>，那这两个函数在哪里实现的呢，答案是在<code>effect.ts</code>中实现。大家想想为什么要在<code>effect.ts</code>中维护这两个函数呢？其实不难理解，<code>track</code>收集的是对象属性和对应的<code>ReactiveEffect</code>对象实例。我们在极简版中是收集的传给<code>effect</code>的函数，这里源码实现中收集的是<code>ReactiveEffect</code>对象实例。而<code>trigger</code>是遍历对象属性所对应的<code>ReactiveEffect</code>实例集合并执行实例的<code>run</code>方法。</p><p>这时候再回过头看上文中的思维导图，相信就更加容易理解了，如果还是阅读起来有困难可以尝试断点调试，具体调试方法在本系列文章的第<strong>2</strong>篇中有介绍。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><p>本文介绍了<code>reactivity</code>中的代码文件组成。选取了其中最关键的三个文件<code>reactive.ts</code>、<code>effect.ts</code>,<code>baseHandlers.ts</code>，介绍了<code>reactive</code>函数到实现，进而分析了<code>Proxy</code>实例的处理器，引出了<code>track</code>和<code>trigger</code>两个函数。同时也介绍了<code>effect</code>函数，涉及了类<code>ReactiveEffect</code>最关键的实现。有了这些基础，下一篇文章中，将会讨论一些<code>reactivity</code>暴露的具体<code>api</code>的功能及其对应的源码细节。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情支持：</p><ul><li>如果<code>点赞，点在看，转发</code>可以让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>`,37),l=[c];function i(r,u){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","04.Vue3响应式系统源码实现1.html.vue"]]);export{k as default};
