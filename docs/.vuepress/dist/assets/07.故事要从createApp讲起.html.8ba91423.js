import{_ as n,o as s,c as a,f as e}from"./app.4326c516.js";const t={},p=e(`<h1 id="_07-故事要从createapp讲起" tabindex="-1"><a class="header-anchor" href="#_07-故事要从createapp讲起" aria-hidden="true">#</a> 07.故事要从createApp讲起</h1><p>读完前面的文章，相信大家已经能对<code>Vue3</code>的响应式原理有比较深入的掌握。但仅仅掌握响应式原理是不够的，我认为<code>Vue3</code>有<strong>3</strong>大支柱。</p><ul><li>其一，就是前面讲的响应式系统；</li><li>其二，是将我们编写的<code>template</code>、<code>jsx</code>代码转化为<strong>虚拟Node</strong>的过程，这个过程由<code>compiler-dom</code>、<code>compiler-core</code>提供的<code>compiler</code>函数实现，该函数的返回值是一个<code>render</code>函数，在后续的文章中我统一称这个<code>render</code>函数为<strong>编译render</strong>；</li><li>其三，是我们将<strong>虚拟Node</strong>转化为<strong>真实Node</strong>的<code>render</code>函数，在后续的文章中我统一称这个<code>render</code>函数为<strong>渲染render</strong>；</li></ul><blockquote><p>注：</p><ol><li>由于本文分析的源码都是<code>runtime-dom</code>、<code>runtime-core</code>中的内容，如无特别说明，本文提到的<code>render</code>函数都指<strong>渲染</strong><code>render</code>函数。</li><li>上面提到的<strong>虚拟Node</strong>，常常称作<strong>虚拟DOM</strong>，二者含义一样，<strong>真实Node</strong>和<strong>真实DOM</strong>同理。</li></ol></blockquote><p>其实上面关于这<strong>3</strong>大支柱的描述，已经高度概括了整个<code>Vue3</code>框架的核心功能。本文会以一个简短的案例开始，引出<code>createApp</code>函数实现，在这个分析的过程中，会讲到<code>runtime-dom</code>和<code>runtime-core</code>之间的代码协作关系，以及<code>createApp</code>函数的具体实现逻辑，实现逻辑讲到对<code>render</code>函数的调用为止。至于<code>render</code>函数的实现细节会在后续多篇文章中进行逐步分析。</p><h1 id="案例-初始化一个vue3应用" tabindex="-1"><a class="header-anchor" href="#案例-初始化一个vue3应用" aria-hidden="true">#</a> 案例-初始化一个Vue3应用</h1><p>在实际开发中我们通常会用下面的来初始化一个<code>Vue</code>应用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">// import the root component App from a single-file component.</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">const</span> vueApp <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
vueApp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的几行代码，实际上有很多工作要做，因为首先要把<code>App.vue</code>的内容转化成<strong>虚拟Node</strong>，在编译完成后，代码片段<strong>1</strong>中传给函数<code>createApp</code>的参数<code>App</code>是一个组件对象。而<code>vueApp</code>是一个对象，该对象有一个方法是<code>mount</code>，该函数的功能就是把组件对象<code>App</code>转化为<strong>虚拟Node</strong>，进而将该<strong>虚拟Node</strong>转化成<strong>真实Node</strong>并让其挂载到<code>#app</code>所指向的<code>DOM</code>元素下面。关于编译的过程，将来会在分析<code>compiler-dom</code>和<code>compiler-core</code>的文章中进行细致的讲解，本文先不提。</p><h2 id="编写不需要编译转化的代码" tabindex="-1"><a class="header-anchor" href="#编写不需要编译转化的代码" aria-hidden="true">#</a> 编写不需要编译转化的代码</h2><p>要理解程序的正常运行，少不了要使用<strong>虚拟Node</strong>，我们将程序改造成如下形式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段2--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./runtime-dom.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
       <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> VueRuntimeDOM
       <span class="token keyword">const</span> RootComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;杨艺韬喜欢研究源码&#39;</span><span class="token punctuation">)</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token function">createApp</span><span class="token punctuation">(</span>RootComponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app1&quot;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最明显的变化就是我们在直接定义组件对象，而不需要通过编译把<code>App.vue</code>文件的内容转化成组件对象，同时在组件对象中手写了一个编译<code>render</code>函数，也不需要继续编译把<code>template</code>转化成编译<code>render</code>函数来。注意这里这里涉及两个编译过程，一个是<code>.vue</code>文件转化成组件对象的编译过程，另一个编译过程是将组件对象中所涉及的<code>template</code>转化成编译<code>render</code>函数，这两者都暂时不提，后续的文章中都会详细介绍。</p><p>事实上，代码片段<strong>2</strong>中<code>RootComponent</code>对象的编译<code>render</code>函数会在某个时机执行，具体在哪里执行，我们在本文分析<code>createApp</code>内部实现的时候进行解释。</p><h2 id="初识编译编译render函数" tabindex="-1"><a class="header-anchor" href="#初识编译编译render函数" aria-hidden="true">#</a> 初识编译编译render函数</h2><p>但是我们知道<code>Vue3</code>一个重要的特点是可以自由控制哪些数据具备响应式的能力，这就离不开我们的<code>setup</code>方法。我们把代码片段<strong>2</strong>进一步转化成如下形式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段3--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">haha</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./runtime-dom.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
       <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> h<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token operator">=</span> VueRuntimeDOM
       <span class="token keyword">const</span> RootComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">let</span> relativeData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;杨艺韬&#39;</span><span class="token punctuation">,</span>
                   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">60</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span>
               <span class="token keyword">let</span> <span class="token function-variable function">agePlus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                   relativeData<span class="token punctuation">.</span>age<span class="token operator">++</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">return</span> <span class="token punctuation">{</span>relativeData<span class="token punctuation">,</span> agePlus<span class="token punctuation">}</span>
           <span class="token punctuation">}</span><span class="token punctuation">,</span>
           <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">proxy</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                   <span class="token literal-property property">onClick</span><span class="token operator">:</span> proxy<span class="token punctuation">.</span>agePlus<span class="token punctuation">,</span>
                   <span class="token literal-property property">innerHTML</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxy<span class="token punctuation">.</span>relativeData<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">已经</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proxy<span class="token punctuation">.</span>relativeData<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了，点击这里继续增加年龄</span><span class="token template-punctuation string">\`</span></span>
               <span class="token punctuation">}</span> <span class="token punctuation">)</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token function">createApp</span><span class="token punctuation">(</span>RootComponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从代码片段<strong>3</strong>中可以发现，<code>setup</code>方法的返回值，可以在编译<code>render</code>函数中通过<code>prxoy</code>参数获取到。大家可能会觉得这种写法有些冗余，确实是这样。因为这里的编译<code>render</code>函数本身就是<code>Vue2</code>的产物。在<code>Vue3</code>中我们可以直接这样写，代码变化如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--代码片段4--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">haha</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./runtime-dom.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
       <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> h<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token operator">=</span> VueRuntimeDOM
       <span class="token keyword">const</span> RootComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">let</span> relativeData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;杨艺韬&#39;</span><span class="token punctuation">,</span>
                   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">60</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span>
               <span class="token keyword">let</span> <span class="token function-variable function">agePlus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                   relativeData<span class="token punctuation">.</span>age<span class="token operator">++</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                   <span class="token literal-property property">onClick</span><span class="token operator">:</span> agePlus<span class="token punctuation">,</span>
                   <span class="token literal-property property">innerHTML</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativeData<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">已经</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativeData<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了，点击这里继续增加年龄</span><span class="token template-punctuation string">\`</span></span>
               <span class="token punctuation">}</span> <span class="token punctuation">)</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token function">createApp</span><span class="token punctuation">(</span>RootComponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发中，一般来说<code>setup</code>的返回值，要么是一个对象，要么是一个返回<code>jsx</code>的函数，这里的<code>jsx</code>代码会在编译阶段转化成类似代码片段<strong>4</strong>的形式，这种情况下这些代码所在文件格式是<code>tsx</code>。而如果是返回对象，通常是在<code>.vue</code>文件中编写了<code>template</code>代码。这两种形式都可以采用，但需要知道的是<code>template</code>会有编译时的静态分析，提升性能，而<code>jsx</code>则更加灵活。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>上面我们简要介绍了在<code>Vue3</code>中一些简单的组件编码形式，理解了传递给函数<code>createApp</code>的组件对象在实际工作中是如何发挥基础作用的。下面我们就进入<code>createApp</code>函数的实现。在分析<code>createApp</code>的时候，有时候会再次回顾上文提到的一些运行效果，让这些运行效果和具体源码对照起来，更容易加深对<code>Vue3</code>的理解。</p><h1 id="createapp的代码实现" tabindex="-1"><a class="header-anchor" href="#createapp的代码实现" aria-hidden="true">#</a> createApp的代码实现</h1><h2 id="createapp的外包装" tabindex="-1"><a class="header-anchor" href="#createapp的外包装" aria-hidden="true">#</a> createApp的外包装</h2><p>我们先将视线移到<code>core/packages/runtime-dom</code>目录下的<code>index.ts</code>文件中去，会发现对外暴露了很多<code>API</code>，但是没关系，我们先看我们今天的主角<code>createApp</code>，其他暂时忽略，将来再单独介绍其他暴露的<code>API</code>的具体含义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段5</span>
<span class="token comment">// 此处省略若干代码...</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> nodeOps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./nodeOps&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> patchProp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./patchProp&#39;</span>
<span class="token comment">// 此处省略若干代码...</span>
<span class="token keyword">const</span> rendererOptions <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> patchProp <span class="token punctuation">}</span><span class="token punctuation">,</span> nodeOps<span class="token punctuation">)</span>
<span class="token comment">// 此处省略若干代码...</span>
<span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    renderer <span class="token operator">||</span>
    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Element <span class="token operator">|</span> ShadowRoot<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 此处省略若干代码...</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token comment">// 此处省略若干代码...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token operator">=</span> app
  app<span class="token punctuation">.</span>mount <span class="token operator">=</span> <span class="token punctuation">(</span>containerOrSelector<span class="token operator">:</span> Element <span class="token operator">|</span> ShadowRoot <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token comment">// 此处省略若干代码...</span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> container <span class="token keyword">instanceof</span> <span class="token class-name">SVGElement</span><span class="token punctuation">)</span>
    <span class="token comment">// 此处省略若干代码...</span>
    <span class="token keyword">return</span> proxy
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> app
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> CreateAppFunction<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span>
<span class="token comment">// 此处省略若干代码...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将代码做了一系列的精简后，发现三个重点：</p><ol><li>真正的<code>Vue</code>应用对象，是执行<code>ensureRenderer().createApp(...args)</code>创建的，而<code>ensureRenderer</code>函数内部调用了<code>createRenderer</code>函数。这个<code>createRenderer</code>函数位于<code>runtime-core</code>中；</li><li>在调用函数<code>createRender</code>函数的时候，传入了参数<code>rendererOptions</code>，这些参数是一些操作<code>DOM</code>节点和<code>DOM</code>节点属性的具体方法。</li><li>创建了<code>Vue</code>应用对象<code>app</code>后，重写了其<code>mount</code>方法，重写的<code>mount</code>方法内部，做了些跟浏览器强相关的操作，比如清空<code>DOM</code>节点。接着又调用了重写前的<code>mount</code>方法进行挂载操作。</li></ol><p>总之，<code>runtime-dom</code>真正提供的能力是操作浏览器平台<code>DOM</code>节点。而跟平台无关的动作全部在<code>runtime-core</code>完成，这是有些朋友可能会疑惑，怎么就跟平台无关了，我们不是传递了操作具体<code>DOM</code>节点的方法<code>rendererOptions</code>给了<code>runtime-core</code>暴露的方法了吗。正是因为操作真实浏览器<code>DOM</code>的方法是通过参数传递过去的，所以这里也可以是其他平台操作节点的具体方法。也就是说，<code>runtime-core</code>只知道需要对某些节点进行增添、修改、删除，但这些节点是浏览器<code>DOM</code>还是其他平台的节点都不会关系，参数传来的是什么，<code>runtime-core</code>就调用什么，这就是所谓的和平台无关，其实在实际编码中完全可以借鉴这种分层的编码思想。</p><h2 id="createrenderer" tabindex="-1"><a class="header-anchor" href="#createrenderer" aria-hidden="true">#</a> createRenderer</h2><p>接下来我们就进入<code>core/packages/runtime-core/src/render.ts</code>中的<code>createRenderer</code>函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段6</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  HostNode <span class="token operator">=</span> RendererNode<span class="token punctuation">,</span>
  HostElement <span class="token operator">=</span> RendererElement
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token operator">&lt;</span>HostNode<span class="token punctuation">,</span> HostElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">baseCreateRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>HostNode<span class="token punctuation">,</span> HostElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们接着进入函数<code>baseCreateRenderer</code>，该函数<strong>2000</strong>多行代码，我对其进行了大量精简：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段7</span>
<span class="token keyword">function</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span>
  options<span class="token operator">:</span> RendererOptions<span class="token punctuation">,</span>
  createHydrationFns<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> createHydrationFunctions
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此处省略2000行左右的代码...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    render<span class="token punctuation">,</span>
    hydrate<span class="token punctuation">,</span>
    createApp<span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>7</strong>中省略了绝大部分代码，我只留下了返回值。实际上，函数<code>baseCreateRenderer</code>可以说是整个<code>runtime-core</code>的核心，因为所有的关于<code>虚拟Node</code>转化成<code>真实Node</code>的逻辑都包括在了该函数中，常常提起的<code>diff</code>算法也包括在其中。本文暂时不会分析<code>baseCreateRenderer</code>函数内部的逻辑，贴合主题，只关注这里的<code>createApp</code>对应的值<code>createAppAPI(render, hydrate)</code>，实际上<code>createAppAPI(render, hydrate)</code>返回的是一个函数。这里的<code>createApp</code>也就是上文代码片段<strong>5</strong>中<code>const app = ensureRenderer().createApp(...args)</code>的<code>createApp</code>。</p><h2 id="createappapi" tabindex="-1"><a class="header-anchor" href="#createappapi" aria-hidden="true">#</a> createAppAPI</h2><p>我们进入位于<code>core/packages/runtime-core/src/apiCreateApp.ts</code>中的函数<code>createAppAPI</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段8</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createAppAPI</span><span class="token generic class-name"><span class="token operator">&lt;</span>HostElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  render<span class="token operator">:</span> RootRenderFunction<span class="token punctuation">,</span>
  hydrate<span class="token operator">?</span><span class="token operator">:</span> RootHydrateFunction
<span class="token punctuation">)</span><span class="token operator">:</span> CreateAppFunction<span class="token operator">&lt;</span>HostElement<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">,</span> rootProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处省略若干代码...</span>
    <span class="token keyword">const</span> app<span class="token operator">:</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token punctuation">{</span>
      _uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span>
      _component<span class="token operator">:</span> rootComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span>
      _props<span class="token operator">:</span> rootProps<span class="token punctuation">,</span>
      _container<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      _context<span class="token operator">:</span> context<span class="token punctuation">,</span>
      _instance<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

      version<span class="token punctuation">,</span>

      <span class="token keyword">get</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span>config
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token keyword">set</span> <span class="token function">config</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token operator">:</span> Plugin<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">component</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> component<span class="token operator">?</span><span class="token operator">:</span> Component<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">directive</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> directive<span class="token operator">?</span><span class="token operator">:</span> Directive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">mount</span><span class="token punctuation">(</span>
        rootContainer<span class="token operator">:</span> HostElement<span class="token punctuation">,</span>
        isHydrate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
        isSVG<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
      <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token function">provide</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处省略若干代码...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 此处省略若干代码...</span>
    <span class="token keyword">return</span> app
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码片段<strong>8</strong>中可以看出，<code>createAppAPI</code>函数返回了一个函数<code>createApp</code>，而该函数的返回值是一个对象<code>app</code>，<code>app</code>其实就是我们创建的<code>Vue</code>应用，<code>app</code>上有很多属性和方法，代表了<code>Vue</code>应用对象所具备的信息和能力。</p><h2 id="mount方法" tabindex="-1"><a class="header-anchor" href="#mount方法" aria-hidden="true">#</a> mount方法</h2><p>就如代码片段<strong>1</strong>中所表示的那样，创建一个<code>Vue</code>应用完成后的第一个操作就是调用<code>mount</code>方法进行挂载，其他内容我们可以暂时忽略，先关注<code>app</code>的<code>mount</code>方法实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段9</span>
<span class="token function">mount</span><span class="token punctuation">(</span>
    rootContainer<span class="token operator">:</span> HostElement<span class="token punctuation">,</span>
    isHydrate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>
    isSVG<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>
        rootComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span>
        rootProps
      <span class="token punctuation">)</span>
      vnode<span class="token punctuation">.</span>appContext <span class="token operator">=</span> context
      <span class="token comment">// 此处省略若干代码...</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isHydrate <span class="token operator">&amp;&amp;</span> hydrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hydrate</span><span class="token punctuation">(</span>vnode <span class="token keyword">as</span> VNode<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Element<span class="token operator">&gt;</span><span class="token punctuation">,</span> rootContainer <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
      app<span class="token punctuation">.</span>_container <span class="token operator">=</span> rootContainer
      
      <span class="token punctuation">;</span><span class="token punctuation">(</span>rootContainer <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__vue_app__ <span class="token operator">=</span> app
      <span class="token comment">// 此处省略若干代码...</span>
      <span class="token keyword">return</span> <span class="token function">getExposeProxy</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token operator">||</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>proxy
    <span class="token punctuation">}</span> <span class="token comment">// 此处省略若干代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>9</strong>中省略了很多和开发阶段相关的代码，可以概括为这样几项主要工作：</p><ol><li>将根组件对象<code>rootComponent</code>（代码片段<strong>4</strong>中的传入的值<code>RootComponent</code>）转化成<strong>虚拟Node</strong>;</li><li>调用<code>render</code>函数，将这个<strong>虚拟Node</strong>转化成<strong>真实Node</strong>并挂载到<code>rootContainer</code>所指向的元素上。那这里的<code>render</code>函数来自哪里呢？从代码片段<strong>8</strong>不难发现，是通过参数传入的，那这个参数从哪里来呢，我们再回到代码片段<strong>7</strong>发现正是函数<code>baseCreateRenderer</code>内部声明的<code>render</code>函数。</li><li>调用<code>getExposeProxy</code>函数得到一个代理对象并返回。</li></ol><p>至于如何将组件对象转化成<strong>虚拟Node</strong>，以及<strong>render</strong>函数的具体实现，本文都不继续深入，因为这两者都是一个比较大的新的话题，需要新的文章来阐述。下面分析一下这里的<code>getExposeProxy</code>函数，因为这个函数和我们前面讲的响应式系统相关，而对于响应式系统已经深入掌握过了，理解这个函数应该会比较容易。</p><h2 id="getexposeproxy" tabindex="-1"><a class="header-anchor" href="#getexposeproxy" aria-hidden="true">#</a> getExposeProxy</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段10</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getExposeProxy</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>exposed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      instance<span class="token punctuation">.</span>exposeProxy <span class="token operator">||</span>
      <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>exposeProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token function">proxyRefs</span><span class="token punctuation">(</span><span class="token function">markRaw</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>exposed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> publicPropertiesMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> publicPropertiesMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段<strong>10</strong>的核心就在于这个新创建的<code>Proxy</code>实例。而这个<code>Proxy</code>初始化的对象是<code>proxyRefs(markRaw(instance.exposed))</code>的执行结果。我们先不管<code>instance.exposed</code>具体是什么含义，但从程序逻辑来看可以这样理解，如果通过<code>instance.exposeProxy</code>获取数据，只能获取<code>instance.exposed</code>或<code>publicPropertiesMap</code>具有的属性，否则就返回<code>undefined</code>。至于这里为什么先调用<code>markRaw</code>再调用<code>proxyRefs</code>，是因为<code>proxyRefs</code>内部做了条件判断，如果传入的对象本身就是响应式的就直接返回了，所以需要先处理成非响应式的对象。而这里的<code>proxyRefs</code>是为了访问原始值的响应式对象的值的时候不用再写<code>.value</code>，这在上一篇文章中已经分析过。</p><h2 id="ref的特殊用法" tabindex="-1"><a class="header-anchor" href="#ref的特殊用法" aria-hidden="true">#</a> ref的特殊用法</h2><p>那这个<code>instance.exposed</code>到底是什么呢？我们先来看看<code>ref</code>获取子组件的内容的实践应用：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 代码片段11
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&#39;./Child.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    Child
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.$refs.child will hold an instance of &lt;Child /&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 代码片段2，文件名：Child.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  expose<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;publicData&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;publicMethod&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      publicData<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
      privateData<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>ref</code>的这种特殊用法，大家可以在官方文档中查阅出更详细的内容，在这里需要知道，如果子组件给<code>expose</code>属性设置了值，则父组件只能拿到<code>expose</code>所声明的这些属性对应的值。这也就是为什么代码片段<strong>10</strong>中要有这样一个代理对象，反过来我们也知道了保护子组件的内容不被父组件随意访问的机制的实现原理。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>本文先抛出一个具体案例，再从<code>createApp</code>讲起，跟随函数调用栈，提到了编译<code>render</code>、渲染<code>render</code>两个函数，分析了<code>createRenderer</code>、<code>createAppAPI</code>、<code>mount</code>、<code>getExposeProxy</code>等函数实现。到这里大家可以理解创建一个<code>Vue</code>应用的基本过程。本文为分析渲染<code>render</code>函数的具体实现打下了基础，关于渲染<code>render</code>函数的具体实现我将在下一篇文章中正是开始介绍，敬请朋友们期待。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>读完文章觉得有收获的朋友们，可以做下面几件事情支持：</p><ul><li>如果<code>点赞，点在看，转发</code>可以让文章帮助到更多需要帮助的人；</li><li>如果是微信公众号的作者，可以找我开通<code>白名单</code>，<code>转载</code>我的原创文章；</li></ul><p>最后，请朋友们关注我的<code>微信公众号: 杨艺韬</code>，可以获取我的最新动态。</p>`,59),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","07.故事要从createApp讲起.html.vue"]]);export{r as default};
